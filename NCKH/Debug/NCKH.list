
NCKH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006810  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08006920  08006920  00007920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b28  08006b28  00008048  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006b28  08006b28  00008048  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006b28  08006b28  00008048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b28  08006b28  00007b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b2c  08006b2c  00007b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08006b30  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000048  08006b78  00008048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  08006b78  00008628  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3b5  00000000  00000000  00008071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f3  00000000  00000000  00016426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00018620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc3  00000000  00000000  00019518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f34  00000000  00000000  0001a0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffd4  00000000  00000000  0003200f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5e5  00000000  00000000  00041fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce5c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004350  00000000  00000000  000ce60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000d295c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000048 	.word	0x20000048
 800012c:	00000000 	.word	0x00000000
 8000130:	08006908 	.word	0x08006908

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000004c 	.word	0x2000004c
 800014c:	08006908 	.word	0x08006908

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <WS2812_Send>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void WS2812_Send (void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	e036      	b.n	8000dc6 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8000d58:	4a2e      	ldr	r2, [pc, #184]	@ (8000e14 <WS2812_Send+0xcc>)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	785b      	ldrb	r3, [r3, #1]
 8000d62:	041a      	lsls	r2, r3, #16
 8000d64:	492b      	ldr	r1, [pc, #172]	@ (8000e14 <WS2812_Send+0xcc>)
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	789b      	ldrb	r3, [r3, #2]
 8000d6e:	021b      	lsls	r3, r3, #8
 8000d70:	431a      	orrs	r2, r3
 8000d72:	4928      	ldr	r1, [pc, #160]	@ (8000e14 <WS2812_Send+0xcc>)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	78db      	ldrb	r3, [r3, #3]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8000d80:	2317      	movs	r3, #23
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	e019      	b.n	8000dba <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8000d86:	2201      	movs	r2, #1
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	461a      	mov	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4013      	ands	r3, r2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d005      	beq.n	8000da4 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8000d98:	4a1f      	ldr	r2, [pc, #124]	@ (8000e18 <WS2812_Send+0xd0>)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	213c      	movs	r1, #60	@ 0x3c
 8000d9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000da2:	e004      	b.n	8000dae <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8000da4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e18 <WS2812_Send+0xd0>)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	211e      	movs	r1, #30
 8000daa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	dae2      	bge.n	8000d86 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	ddc5      	ble.n	8000d58 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	e00a      	b.n	8000de8 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8000dd2:	4a11      	ldr	r2, [pc, #68]	@ (8000e18 <WS2812_Send+0xd0>)
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3301      	adds	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	2b31      	cmp	r3, #49	@ 0x31
 8000dec:	ddf1      	ble.n	8000dd2 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	4a09      	ldr	r2, [pc, #36]	@ (8000e18 <WS2812_Send+0xd0>)
 8000df4:	2100      	movs	r1, #0
 8000df6:	4809      	ldr	r0, [pc, #36]	@ (8000e1c <WS2812_Send+0xd4>)
 8000df8:	f003 f820 	bl	8003e3c <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8000dfc:	bf00      	nop
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <WS2812_Send+0xd8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0fb      	beq.n	8000dfe <WS2812_Send+0xb6>
	datasentflag = 0;
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <WS2812_Send+0xd8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200005a0 	.word	0x200005a0
 8000e18:	200001fc 	.word	0x200001fc
 8000e1c:	200000bc 	.word	0x200000bc
 8000e20:	200005e0 	.word	0x200005e0

08000e24 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	b2d9      	uxtb	r1, r3
 8000e36:	4a10      	ldr	r2, [pc, #64]	@ (8000e78 <Set_LED+0x54>)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	b2d9      	uxtb	r1, r3
 8000e42:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <Set_LED+0x54>)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	460a      	mov	r2, r1
 8000e4c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	b2d9      	uxtb	r1, r3
 8000e52:	4a09      	ldr	r2, [pc, #36]	@ (8000e78 <Set_LED+0x54>)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	460a      	mov	r2, r1
 8000e5c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2d9      	uxtb	r1, r3
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <Set_LED+0x54>)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	460a      	mov	r2, r1
 8000e6c:	70da      	strb	r2, [r3, #3]
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	20000560 	.word	0x20000560
 8000e7c:	00000000 	.word	0x00000000

08000e80 <Set_Brightness>:

void Set_Brightness (int brightness)  // 0-45
{
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8000e8c:	dd01      	ble.n	8000e92 <Set_Brightness+0x12>
 8000e8e:	232d      	movs	r3, #45	@ 0x2d
 8000e90:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e05f      	b.n	8000f58 <Set_Brightness+0xd8>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8000e98:	4a35      	ldr	r2, [pc, #212]	@ (8000f70 <Set_Brightness+0xf0>)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000ea0:	4a34      	ldr	r2, [pc, #208]	@ (8000f74 <Set_Brightness+0xf4>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	e04e      	b.n	8000f4c <Set_Brightness+0xcc>
		{
			float angle = 90-brightness;  // in degrees
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fef3 	bl	8000ca0 <__aeabi_i2f>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff faaa 	bl	8000418 <__aeabi_f2d>
 8000ec4:	a328      	add	r3, pc, #160	@ (adr r3, 8000f68 <Set_Brightness+0xe8>)
 8000ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eca:	f7ff fafd 	bl	80004c8 <__aeabi_dmul>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <Set_Brightness+0xf8>)
 8000edc:	f7ff fc1e 	bl	800071c <__aeabi_ddiv>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff fdd0 	bl	8000a8c <__aeabi_d2f>
 8000eec:	4603      	mov	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8000f70 <Set_Brightness+0xf0>)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	441a      	add	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fa78 	bl	80003f4 <__aeabi_i2d>
 8000f04:	4604      	mov	r4, r0
 8000f06:	460d      	mov	r5, r1
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f7ff fa85 	bl	8000418 <__aeabi_f2d>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f004 fcbb 	bl	8005890 <tan>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4620      	mov	r0, r4
 8000f20:	4629      	mov	r1, r5
 8000f22:	f7ff fbfb 	bl	800071c <__aeabi_ddiv>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f7ff fd8d 	bl	8000a4c <__aeabi_d2uiz>
 8000f32:	4603      	mov	r3, r0
 8000f34:	b2d9      	uxtb	r1, r3
 8000f36:	4a0f      	ldr	r2, [pc, #60]	@ (8000f74 <Set_Brightness+0xf4>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	441a      	add	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4413      	add	r3, r2
 8000f42:	460a      	mov	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	ddad      	ble.n	8000eae <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	2b0f      	cmp	r3, #15
 8000f5c:	dd9c      	ble.n	8000e98 <Set_Brightness+0x18>
		}
	}

#endif

}
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}
 8000f68:	53c8d4f1 	.word	0x53c8d4f1
 8000f6c:	400921fb 	.word	0x400921fb
 8000f70:	20000560 	.word	0x20000560
 8000f74:	200005a0 	.word	0x200005a0
 8000f78:	40668000 	.word	0x40668000

08000f7c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000f84:	2100      	movs	r1, #0
 8000f86:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000f88:	f003 f8fa 	bl	8004180 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000bc 	.word	0x200000bc
 8000fa0:	200005e0 	.word	0x200005e0

08000fa4 <DFPlayer_sendCMD>:

void DFPlayer_sendCMD(uint8_t cmd, uint8_t param1, uint8_t param2)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	71bb      	strb	r3, [r7, #6]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	717b      	strb	r3, [r7, #5]
	  tx_data[0] = 0x7E;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8000fb8:	227e      	movs	r2, #126	@ 0x7e
 8000fba:	701a      	strb	r2, [r3, #0]
	  tx_data[1] = 0xFF;
 8000fbc:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8000fbe:	22ff      	movs	r2, #255	@ 0xff
 8000fc0:	705a      	strb	r2, [r3, #1]
	  tx_data[2] = 0x06;
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8000fc4:	2206      	movs	r2, #6
 8000fc6:	709a      	strb	r2, [r3, #2]
	  tx_data[3] = cmd;
 8000fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	70d3      	strb	r3, [r2, #3]
	  tx_data[4] = 0x00;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	711a      	strb	r2, [r3, #4]
	  tx_data[5] = param1;
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	7153      	strb	r3, [r2, #5]
	  tx_data[6] = param2;
 8000fda:	4a1a      	ldr	r2, [pc, #104]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8000fdc:	797b      	ldrb	r3, [r7, #5]
 8000fde:	7193      	strb	r3, [r2, #6]
	  uint16_t check_sum = tx_data[1] + tx_data[2] + tx_data[3] + tx_data[4] + tx_data[5] + tx_data[6];
 8000fe0:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8000fe2:	785b      	ldrb	r3, [r3, #1]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8000fe8:	789b      	ldrb	r3, [r3, #2]
 8000fea:	4413      	add	r3, r2
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4a15      	ldr	r2, [pc, #84]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8000ff0:	78d2      	ldrb	r2, [r2, #3]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	4a13      	ldr	r2, [pc, #76]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8000ff8:	7912      	ldrb	r2, [r2, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8001000:	7952      	ldrb	r2, [r2, #5]
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
 8001006:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8001008:	7992      	ldrb	r2, [r2, #6]
 800100a:	4413      	add	r3, r2
 800100c:	81fb      	strh	r3, [r7, #14]
	  check_sum = 0 - check_sum;
 800100e:	89fb      	ldrh	r3, [r7, #14]
 8001010:	425b      	negs	r3, r3
 8001012:	81fb      	strh	r3, [r7, #14]
	  tx_data[7] = (check_sum >> 8) & 0x00ff;
 8001014:	89fb      	ldrh	r3, [r7, #14]
 8001016:	0a1b      	lsrs	r3, r3, #8
 8001018:	b29b      	uxth	r3, r3
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 800101e:	71da      	strb	r2, [r3, #7]
	  tx_data[8] = (check_sum) & 0x00ff;
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8001026:	721a      	strb	r2, [r3, #8]
	  tx_data[9] = 0xEF;
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 800102a:	22ef      	movs	r2, #239	@ 0xef
 800102c:	725a      	strb	r2, [r3, #9]

	  HAL_UART_Transmit(&huart1, tx_data, 10, HAL_MAX_DELAY);
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	220a      	movs	r2, #10
 8001034:	4903      	ldr	r1, [pc, #12]	@ (8001044 <DFPlayer_sendCMD+0xa0>)
 8001036:	4804      	ldr	r0, [pc, #16]	@ (8001048 <DFPlayer_sendCMD+0xa4>)
 8001038:	f003 fdd6 	bl	8004be8 <HAL_UART_Transmit>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200001d8 	.word	0x200001d8
 8001048:	20000148 	.word	0x20000148

0800104c <reset_buffer>:

void reset_buffer(uint8_t buffer[])
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 5; i++)
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e007      	b.n	800106a <reset_buffer+0x1e>
	{
		buffer[i] = 0;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 5; i++)
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	3301      	adds	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d9f4      	bls.n	800105a <reset_buffer+0xe>
	}
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <checkCard>:
	}
	return 1;
}

uint8_t checkCard(uint8_t currentID[], uint8_t card[])
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < 5; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e00e      	b.n	80010aa <checkCard+0x2e>
	{
		if(currentID[i] != card[i])
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	6839      	ldr	r1, [r7, #0]
 8001098:	440b      	add	r3, r1
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d001      	beq.n	80010a4 <checkCard+0x28>
		{
			return 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e006      	b.n	80010b2 <checkCard+0x36>
	for(uint8_t i = 0; i < 5; i++)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	3301      	adds	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d9ed      	bls.n	800108c <checkCard+0x10>
			break;
		}
	}
	return 1;
 80010b0:	2301      	movs	r3, #1
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <prepareToSend>:

void prepareToSend(uint8_t package[])
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	package[0] = 0x0A;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	220a      	movs	r2, #10
 80010c8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < MAX_LED; i++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e00b      	b.n	80010e8 <prepareToSend+0x2c>
	{
		package[1 + i] = dir_data[i];
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	3301      	adds	r3, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	440b      	add	r3, r1
 80010dc:	490b      	ldr	r1, [pc, #44]	@ (800110c <prepareToSend+0x50>)
 80010de:	5c8a      	ldrb	r2, [r1, r2]
 80010e0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < MAX_LED; i++)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	3301      	adds	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	d9f0      	bls.n	80010d0 <prepareToSend+0x14>
	}
	package[MAX_LED + 1] = 0x1C;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3311      	adds	r3, #17
 80010f2:	221c      	movs	r2, #28
 80010f4:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart3, package, 18, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	2212      	movs	r2, #18
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4804      	ldr	r0, [pc, #16]	@ (8001110 <prepareToSend+0x54>)
 8001100:	f003 fd72 	bl	8004be8 <HAL_UART_Transmit>
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200005ec 	.word	0x200005ec
 8001110:	20000190 	.word	0x20000190

08001114 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1a      	ldr	r2, [pc, #104]	@ (800118c <HAL_UART_RxCpltCallback+0x78>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d12e      	bne.n	8001184 <HAL_UART_RxCpltCallback+0x70>
	{
		if(rx_data[0] == 0x0A && rx_data[2] == 0x1C)
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <HAL_UART_RxCpltCallback+0x7c>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b0a      	cmp	r3, #10
 800112c:	d115      	bne.n	800115a <HAL_UART_RxCpltCallback+0x46>
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_UART_RxCpltCallback+0x7c>)
 8001130:	789b      	ldrb	r3, [r3, #2]
 8001132:	2b1c      	cmp	r3, #28
 8001134:	d111      	bne.n	800115a <HAL_UART_RxCpltCallback+0x46>
		{
			current_step = rx_data[1];
 8001136:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <HAL_UART_RxCpltCallback+0x7c>)
 8001138:	785a      	ldrb	r2, [r3, #1]
 800113a:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <HAL_UART_RxCpltCallback+0x80>)
 800113c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < 3; i++) rx_data[i] = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e006      	b.n	8001152 <HAL_UART_RxCpltCallback+0x3e>
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <HAL_UART_RxCpltCallback+0x7c>)
 8001148:	2100      	movs	r1, #0
 800114a:	54d1      	strb	r1, [r2, r3]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	3301      	adds	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d9f5      	bls.n	8001144 <HAL_UART_RxCpltCallback+0x30>
 8001158:	e00f      	b.n	800117a <HAL_UART_RxCpltCallback+0x66>
		}
		else
		{
			prepareToSend(package_data);
 800115a:	480f      	ldr	r0, [pc, #60]	@ (8001198 <HAL_UART_RxCpltCallback+0x84>)
 800115c:	f7ff ffae 	bl	80010bc <prepareToSend>
			for(uint8_t i = 0; i < 3; i++) rx_data[i] = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	73bb      	strb	r3, [r7, #14]
 8001164:	e006      	b.n	8001174 <HAL_UART_RxCpltCallback+0x60>
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	4a09      	ldr	r2, [pc, #36]	@ (8001190 <HAL_UART_RxCpltCallback+0x7c>)
 800116a:	2100      	movs	r1, #0
 800116c:	54d1      	strb	r1, [r2, r3]
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	3301      	adds	r3, #1
 8001172:	73bb      	strb	r3, [r7, #14]
 8001174:	7bbb      	ldrb	r3, [r7, #14]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d9f5      	bls.n	8001166 <HAL_UART_RxCpltCallback+0x52>
		}
		HAL_UART_Receive_IT(&huart3, (uint8_t *)rx_data, 3);
 800117a:	2203      	movs	r2, #3
 800117c:	4904      	ldr	r1, [pc, #16]	@ (8001190 <HAL_UART_RxCpltCallback+0x7c>)
 800117e:	4807      	ldr	r0, [pc, #28]	@ (800119c <HAL_UART_RxCpltCallback+0x88>)
 8001180:	f003 fdbd 	bl	8004cfe <HAL_UART_Receive_IT>
	}
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40004800 	.word	0x40004800
 8001190:	200001f8 	.word	0x200001f8
 8001194:	20000601 	.word	0x20000601
 8001198:	200001e4 	.word	0x200001e4
 800119c:	20000190 	.word	0x20000190

080011a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a6:	f001 fb59 	bl	800285c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011aa:	f000 fb83 	bl	80018b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ae:	f000 fcc7 	bl	8001b40 <MX_GPIO_Init>
  MX_DMA_Init();
 80011b2:	f000 fca7 	bl	8001b04 <MX_DMA_Init>
  MX_TIM2_Init();
 80011b6:	f000 fbf9 	bl	80019ac <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80011ba:	f000 fc4f 	bl	8001a5c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80011be:	f000 fbbf 	bl	8001940 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80011c2:	f000 fc75 	bl	8001ab0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_init(GPIOA, MOSI_Pin, GPIOA, MISO_Pin, GPIOA, SCK_Pin, GPIOA, CS_Pin);
 80011c6:	2310      	movs	r3, #16
 80011c8:	9303      	str	r3, [sp, #12]
 80011ca:	4bbb      	ldr	r3, [pc, #748]	@ (80014b8 <main+0x318>)
 80011cc:	9302      	str	r3, [sp, #8]
 80011ce:	2320      	movs	r3, #32
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	4bb9      	ldr	r3, [pc, #740]	@ (80014b8 <main+0x318>)
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2340      	movs	r3, #64	@ 0x40
 80011d8:	4ab7      	ldr	r2, [pc, #732]	@ (80014b8 <main+0x318>)
 80011da:	2180      	movs	r1, #128	@ 0x80
 80011dc:	48b6      	ldr	r0, [pc, #728]	@ (80014b8 <main+0x318>)
 80011de:	f001 f897 	bl	8002310 <MFRC522_init>
  DFPlayer_sendCMD(0x3F, 0x00, 0x01);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2100      	movs	r1, #0
 80011e6:	203f      	movs	r0, #63	@ 0x3f
 80011e8:	f7ff fedc 	bl	8000fa4 <DFPlayer_sendCMD>
  HAL_Delay(200);
 80011ec:	20c8      	movs	r0, #200	@ 0xc8
 80011ee:	f001 fb97 	bl	8002920 <HAL_Delay>

  DFPlayer_sendCMD(0x06, 0x00, volume);
 80011f2:	4bb2      	ldr	r3, [pc, #712]	@ (80014bc <main+0x31c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	2100      	movs	r1, #0
 80011fa:	2006      	movs	r0, #6
 80011fc:	f7ff fed2 	bl	8000fa4 <DFPlayer_sendCMD>
  HAL_Delay(200);
 8001200:	20c8      	movs	r0, #200	@ 0xc8
 8001202:	f001 fb8d 	bl	8002920 <HAL_Delay>
  DFPlayer_sendCMD(0x08, 0x00, 0x07);
 8001206:	2207      	movs	r2, #7
 8001208:	2100      	movs	r1, #0
 800120a:	2008      	movs	r0, #8
 800120c:	f7ff feca 	bl	8000fa4 <DFPlayer_sendCMD>
  HAL_Delay(200);
 8001210:	20c8      	movs	r0, #200	@ 0xc8
 8001212:	f001 fb85 	bl	8002920 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(!flag)
 8001216:	4baa      	ldr	r3, [pc, #680]	@ (80014c0 <main+0x320>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f040 8199 	bne.w	8001552 <main+0x3b2>
	{
		Set_LED(led_num, r, g, b);
 8001220:	4ba8      	ldr	r3, [pc, #672]	@ (80014c4 <main+0x324>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	4ba8      	ldr	r3, [pc, #672]	@ (80014c8 <main+0x328>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4619      	mov	r1, r3
 800122c:	4ba7      	ldr	r3, [pc, #668]	@ (80014cc <main+0x32c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4ba7      	ldr	r3, [pc, #668]	@ (80014d0 <main+0x330>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	f7ff fdf5 	bl	8000e24 <Set_LED>
		Set_Brightness(brightness);
 800123a:	4ba6      	ldr	r3, [pc, #664]	@ (80014d4 <main+0x334>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fe1e 	bl	8000e80 <Set_Brightness>
		WS2812_Send();
 8001244:	f7ff fd80 	bl	8000d48 <WS2812_Send>
		HAL_Delay(250);
 8001248:	20fa      	movs	r0, #250	@ 0xfa
 800124a:	f001 fb69 	bl	8002920 <HAL_Delay>
		Set_LED(led_num, 0, 0, 0);
 800124e:	4b9d      	ldr	r3, [pc, #628]	@ (80014c4 <main+0x324>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	2300      	movs	r3, #0
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	f7ff fde3 	bl	8000e24 <Set_LED>
		Set_Brightness(brightness);
 800125e:	4b9d      	ldr	r3, [pc, #628]	@ (80014d4 <main+0x334>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fe0c 	bl	8000e80 <Set_Brightness>
		WS2812_Send();
 8001268:	f7ff fd6e 	bl	8000d48 <WS2812_Send>
		HAL_Delay(250);
 800126c:	20fa      	movs	r0, #250	@ 0xfa
 800126e:	f001 fb57 	bl	8002920 <HAL_Delay>
		if(checkCard(currentID, forward_card))
 8001272:	4999      	ldr	r1, [pc, #612]	@ (80014d8 <main+0x338>)
 8001274:	4899      	ldr	r0, [pc, #612]	@ (80014dc <main+0x33c>)
 8001276:	f7ff ff01 	bl	800107c <checkCard>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d02f      	beq.n	80012e0 <main+0x140>
		{
			r = 255;
 8001280:	4b91      	ldr	r3, [pc, #580]	@ (80014c8 <main+0x328>)
 8001282:	22ff      	movs	r2, #255	@ 0xff
 8001284:	701a      	strb	r2, [r3, #0]
			g = 0;
 8001286:	4b91      	ldr	r3, [pc, #580]	@ (80014cc <main+0x32c>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
			b = 0;
 800128c:	4b90      	ldr	r3, [pc, #576]	@ (80014d0 <main+0x330>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
			Set_LED(led_num, r, g, b);
 8001292:	4b8c      	ldr	r3, [pc, #560]	@ (80014c4 <main+0x324>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	4b8b      	ldr	r3, [pc, #556]	@ (80014c8 <main+0x328>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	4b8b      	ldr	r3, [pc, #556]	@ (80014cc <main+0x32c>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b8a      	ldr	r3, [pc, #552]	@ (80014d0 <main+0x330>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	f7ff fdbc 	bl	8000e24 <Set_LED>
			WS2812_Send();
 80012ac:	f7ff fd4c 	bl	8000d48 <WS2812_Send>
			HAL_Delay(100);
 80012b0:	2064      	movs	r0, #100	@ 0x64
 80012b2:	f001 fb35 	bl	8002920 <HAL_Delay>
			dir_data[led_num] = FORWARD;
 80012b6:	4b83      	ldr	r3, [pc, #524]	@ (80014c4 <main+0x324>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b88      	ldr	r3, [pc, #544]	@ (80014e0 <main+0x340>)
 80012be:	2101      	movs	r1, #1
 80012c0:	5499      	strb	r1, [r3, r2]
			DFPlayer_sendCMD(0x03, 0x00, 0x01);
 80012c2:	2201      	movs	r2, #1
 80012c4:	2100      	movs	r1, #0
 80012c6:	2003      	movs	r0, #3
 80012c8:	f7ff fe6c 	bl	8000fa4 <DFPlayer_sendCMD>
			HAL_Delay(900);
 80012cc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80012d0:	f001 fb26 	bl	8002920 <HAL_Delay>
			reset_buffer(currentID);
 80012d4:	4881      	ldr	r0, [pc, #516]	@ (80014dc <main+0x33c>)
 80012d6:	f7ff feb9 	bl	800104c <reset_buffer>
			wait_to_send = 1;
 80012da:	4b82      	ldr	r3, [pc, #520]	@ (80014e4 <main+0x344>)
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
		}
		if(checkCard(currentID, left_card))
 80012e0:	4981      	ldr	r1, [pc, #516]	@ (80014e8 <main+0x348>)
 80012e2:	487e      	ldr	r0, [pc, #504]	@ (80014dc <main+0x33c>)
 80012e4:	f7ff feca 	bl	800107c <checkCard>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d02f      	beq.n	800134e <main+0x1ae>
		{
			r = 0;
 80012ee:	4b76      	ldr	r3, [pc, #472]	@ (80014c8 <main+0x328>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
			g = 255;
 80012f4:	4b75      	ldr	r3, [pc, #468]	@ (80014cc <main+0x32c>)
 80012f6:	22ff      	movs	r2, #255	@ 0xff
 80012f8:	701a      	strb	r2, [r3, #0]
			b = 0;
 80012fa:	4b75      	ldr	r3, [pc, #468]	@ (80014d0 <main+0x330>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
			Set_LED(led_num, r, g, b);
 8001300:	4b70      	ldr	r3, [pc, #448]	@ (80014c4 <main+0x324>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	4b70      	ldr	r3, [pc, #448]	@ (80014c8 <main+0x328>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	4b6f      	ldr	r3, [pc, #444]	@ (80014cc <main+0x32c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b6f      	ldr	r3, [pc, #444]	@ (80014d0 <main+0x330>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	f7ff fd85 	bl	8000e24 <Set_LED>
			WS2812_Send();
 800131a:	f7ff fd15 	bl	8000d48 <WS2812_Send>
			HAL_Delay(100);
 800131e:	2064      	movs	r0, #100	@ 0x64
 8001320:	f001 fafe 	bl	8002920 <HAL_Delay>
			dir_data[led_num] = LEFT;
 8001324:	4b67      	ldr	r3, [pc, #412]	@ (80014c4 <main+0x324>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b6d      	ldr	r3, [pc, #436]	@ (80014e0 <main+0x340>)
 800132c:	2103      	movs	r1, #3
 800132e:	5499      	strb	r1, [r3, r2]
			DFPlayer_sendCMD(0x03, 0x00, 0x02);
 8001330:	2202      	movs	r2, #2
 8001332:	2100      	movs	r1, #0
 8001334:	2003      	movs	r0, #3
 8001336:	f7ff fe35 	bl	8000fa4 <DFPlayer_sendCMD>
			HAL_Delay(900);
 800133a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800133e:	f001 faef 	bl	8002920 <HAL_Delay>

			reset_buffer(currentID);
 8001342:	4866      	ldr	r0, [pc, #408]	@ (80014dc <main+0x33c>)
 8001344:	f7ff fe82 	bl	800104c <reset_buffer>
			wait_to_send = 1;
 8001348:	4b66      	ldr	r3, [pc, #408]	@ (80014e4 <main+0x344>)
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
		}
		if(checkCard(currentID, right_card))
 800134e:	4967      	ldr	r1, [pc, #412]	@ (80014ec <main+0x34c>)
 8001350:	4862      	ldr	r0, [pc, #392]	@ (80014dc <main+0x33c>)
 8001352:	f7ff fe93 	bl	800107c <checkCard>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d02f      	beq.n	80013bc <main+0x21c>
		{
			r = 0;
 800135c:	4b5a      	ldr	r3, [pc, #360]	@ (80014c8 <main+0x328>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
			g = 0;
 8001362:	4b5a      	ldr	r3, [pc, #360]	@ (80014cc <main+0x32c>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
			b = 255;
 8001368:	4b59      	ldr	r3, [pc, #356]	@ (80014d0 <main+0x330>)
 800136a:	22ff      	movs	r2, #255	@ 0xff
 800136c:	701a      	strb	r2, [r3, #0]
			Set_LED(led_num, r, g, b);
 800136e:	4b55      	ldr	r3, [pc, #340]	@ (80014c4 <main+0x324>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	4b54      	ldr	r3, [pc, #336]	@ (80014c8 <main+0x328>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	4b54      	ldr	r3, [pc, #336]	@ (80014cc <main+0x32c>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b53      	ldr	r3, [pc, #332]	@ (80014d0 <main+0x330>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f7ff fd4e 	bl	8000e24 <Set_LED>
			WS2812_Send();
 8001388:	f7ff fcde 	bl	8000d48 <WS2812_Send>
			HAL_Delay(100);
 800138c:	2064      	movs	r0, #100	@ 0x64
 800138e:	f001 fac7 	bl	8002920 <HAL_Delay>
			dir_data[led_num] = RIGHT;
 8001392:	4b4c      	ldr	r3, [pc, #304]	@ (80014c4 <main+0x324>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b51      	ldr	r3, [pc, #324]	@ (80014e0 <main+0x340>)
 800139a:	2104      	movs	r1, #4
 800139c:	5499      	strb	r1, [r3, r2]
			DFPlayer_sendCMD(0x03, 0x00, 0x03);
 800139e:	2203      	movs	r2, #3
 80013a0:	2100      	movs	r1, #0
 80013a2:	2003      	movs	r0, #3
 80013a4:	f7ff fdfe 	bl	8000fa4 <DFPlayer_sendCMD>
			HAL_Delay(900);
 80013a8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80013ac:	f001 fab8 	bl	8002920 <HAL_Delay>

			reset_buffer(currentID);
 80013b0:	484a      	ldr	r0, [pc, #296]	@ (80014dc <main+0x33c>)
 80013b2:	f7ff fe4b 	bl	800104c <reset_buffer>
			wait_to_send = 1;
 80013b6:	4b4b      	ldr	r3, [pc, #300]	@ (80014e4 <main+0x344>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
		}
		if(checkCard(currentID, backward_card))
 80013bc:	494c      	ldr	r1, [pc, #304]	@ (80014f0 <main+0x350>)
 80013be:	4847      	ldr	r0, [pc, #284]	@ (80014dc <main+0x33c>)
 80013c0:	f7ff fe5c 	bl	800107c <checkCard>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d02f      	beq.n	800142a <main+0x28a>
		{
			r = 255;
 80013ca:	4b3f      	ldr	r3, [pc, #252]	@ (80014c8 <main+0x328>)
 80013cc:	22ff      	movs	r2, #255	@ 0xff
 80013ce:	701a      	strb	r2, [r3, #0]
			g = 0;
 80013d0:	4b3e      	ldr	r3, [pc, #248]	@ (80014cc <main+0x32c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
			b = 180;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	@ (80014d0 <main+0x330>)
 80013d8:	22b4      	movs	r2, #180	@ 0xb4
 80013da:	701a      	strb	r2, [r3, #0]
			Set_LED(led_num, r, g, b);
 80013dc:	4b39      	ldr	r3, [pc, #228]	@ (80014c4 <main+0x324>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	4b39      	ldr	r3, [pc, #228]	@ (80014c8 <main+0x328>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4b38      	ldr	r3, [pc, #224]	@ (80014cc <main+0x32c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b38      	ldr	r3, [pc, #224]	@ (80014d0 <main+0x330>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	f7ff fd17 	bl	8000e24 <Set_LED>
			WS2812_Send();
 80013f6:	f7ff fca7 	bl	8000d48 <WS2812_Send>
			HAL_Delay(100);
 80013fa:	2064      	movs	r0, #100	@ 0x64
 80013fc:	f001 fa90 	bl	8002920 <HAL_Delay>
			dir_data[led_num] = BACKWARD;
 8001400:	4b30      	ldr	r3, [pc, #192]	@ (80014c4 <main+0x324>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b36      	ldr	r3, [pc, #216]	@ (80014e0 <main+0x340>)
 8001408:	2102      	movs	r1, #2
 800140a:	5499      	strb	r1, [r3, r2]
			DFPlayer_sendCMD(0x03, 0x00, 0x04);
 800140c:	2204      	movs	r2, #4
 800140e:	2100      	movs	r1, #0
 8001410:	2003      	movs	r0, #3
 8001412:	f7ff fdc7 	bl	8000fa4 <DFPlayer_sendCMD>
			HAL_Delay(900);
 8001416:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800141a:	f001 fa81 	bl	8002920 <HAL_Delay>
			reset_buffer(currentID);
 800141e:	482f      	ldr	r0, [pc, #188]	@ (80014dc <main+0x33c>)
 8001420:	f7ff fe14 	bl	800104c <reset_buffer>
			wait_to_send = 1;
 8001424:	4b2f      	ldr	r3, [pc, #188]	@ (80014e4 <main+0x344>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
		}
		if(checkCard(currentID, delete_card))
 800142a:	4932      	ldr	r1, [pc, #200]	@ (80014f4 <main+0x354>)
 800142c:	482b      	ldr	r0, [pc, #172]	@ (80014dc <main+0x33c>)
 800142e:	f7ff fe25 	bl	800107c <checkCard>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d066      	beq.n	8001506 <main+0x366>
		{
			r = 0;
 8001438:	4b23      	ldr	r3, [pc, #140]	@ (80014c8 <main+0x328>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
			g = 0;
 800143e:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <main+0x32c>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
			b = 0;
 8001444:	4b22      	ldr	r3, [pc, #136]	@ (80014d0 <main+0x330>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
			Set_LED(led_num, r, g, b);
 800144a:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <main+0x324>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <main+0x328>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <main+0x32c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <main+0x330>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	f7ff fce0 	bl	8000e24 <Set_LED>
			WS2812_Send();
 8001464:	f7ff fc70 	bl	8000d48 <WS2812_Send>
			HAL_Delay(100);
 8001468:	2064      	movs	r0, #100	@ 0x64
 800146a:	f001 fa59 	bl	8002920 <HAL_Delay>
			dir_data[led_num] = STOP;
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <main+0x324>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <main+0x340>)
 8001476:	2100      	movs	r1, #0
 8001478:	5499      	strb	r1, [r3, r2]
			DFPlayer_sendCMD(0x03, 0x00, 0x06);
 800147a:	2206      	movs	r2, #6
 800147c:	2100      	movs	r1, #0
 800147e:	2003      	movs	r0, #3
 8001480:	f7ff fd90 	bl	8000fa4 <DFPlayer_sendCMD>
			HAL_Delay(900);
 8001484:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001488:	f001 fa4a 	bl	8002920 <HAL_Delay>
			if(led_num > 0) --led_num;
 800148c:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <main+0x324>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <main+0x300>
 8001494:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <main+0x324>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <main+0x324>)
 800149e:	701a      	strb	r2, [r3, #0]
			r = 255;
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <main+0x328>)
 80014a2:	22ff      	movs	r2, #255	@ 0xff
 80014a4:	701a      	strb	r2, [r3, #0]
			g = 255;
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <main+0x32c>)
 80014a8:	22ff      	movs	r2, #255	@ 0xff
 80014aa:	701a      	strb	r2, [r3, #0]
			b = 255;
 80014ac:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <main+0x330>)
 80014ae:	22ff      	movs	r2, #255	@ 0xff
 80014b0:	701a      	strb	r2, [r3, #0]
			DFPlayer_sendCMD(0x08, 0x00, 0x07);
 80014b2:	2207      	movs	r2, #7
 80014b4:	e020      	b.n	80014f8 <main+0x358>
 80014b6:	bf00      	nop
 80014b8:	40010800 	.word	0x40010800
 80014bc:	20000000 	.word	0x20000000
 80014c0:	200005e4 	.word	0x200005e4
 80014c4:	200005e8 	.word	0x200005e8
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000009 	.word	0x20000009
 80014d0:	2000000a 	.word	0x2000000a
 80014d4:	20000004 	.word	0x20000004
 80014d8:	2000000c 	.word	0x2000000c
 80014dc:	200005fc 	.word	0x200005fc
 80014e0:	200005ec 	.word	0x200005ec
 80014e4:	200005e9 	.word	0x200005e9
 80014e8:	20000014 	.word	0x20000014
 80014ec:	2000001c 	.word	0x2000001c
 80014f0:	20000024 	.word	0x20000024
 80014f4:	2000002c 	.word	0x2000002c
 80014f8:	2100      	movs	r1, #0
 80014fa:	2008      	movs	r0, #8
 80014fc:	f7ff fd52 	bl	8000fa4 <DFPlayer_sendCMD>
			reset_buffer(currentID);
 8001500:	4897      	ldr	r0, [pc, #604]	@ (8001760 <main+0x5c0>)
 8001502:	f7ff fda3 	bl	800104c <reset_buffer>
		}
		if(led_num == MAX_LED)
 8001506:	4b97      	ldr	r3, [pc, #604]	@ (8001764 <main+0x5c4>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b10      	cmp	r3, #16
 800150c:	d117      	bne.n	800153e <main+0x39e>
		{
			WS2812_Send();
 800150e:	f7ff fc1b 	bl	8000d48 <WS2812_Send>
			HAL_Delay(500);
 8001512:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001516:	f001 fa03 	bl	8002920 <HAL_Delay>
			DFPlayer_sendCMD(0x03, 0x00, 0x08);
 800151a:	2208      	movs	r2, #8
 800151c:	2100      	movs	r1, #0
 800151e:	2003      	movs	r0, #3
 8001520:	f7ff fd40 	bl	8000fa4 <DFPlayer_sendCMD>
			HAL_Delay(5000);
 8001524:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001528:	f001 f9fa 	bl	8002920 <HAL_Delay>
			DFPlayer_sendCMD(0x08, 0x00, 0x0B);
 800152c:	220b      	movs	r2, #11
 800152e:	2100      	movs	r1, #0
 8001530:	2008      	movs	r0, #8
 8001532:	f7ff fd37 	bl	8000fa4 <DFPlayer_sendCMD>
			flag = 1;
 8001536:	4b8c      	ldr	r3, [pc, #560]	@ (8001768 <main+0x5c8>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e17d      	b.n	800183a <main+0x69a>
		}
		else
		{
			r = 255;
 800153e:	4b8b      	ldr	r3, [pc, #556]	@ (800176c <main+0x5cc>)
 8001540:	22ff      	movs	r2, #255	@ 0xff
 8001542:	701a      	strb	r2, [r3, #0]
			g = 255;
 8001544:	4b8a      	ldr	r3, [pc, #552]	@ (8001770 <main+0x5d0>)
 8001546:	22ff      	movs	r2, #255	@ 0xff
 8001548:	701a      	strb	r2, [r3, #0]
			b = 255;
 800154a:	4b8a      	ldr	r3, [pc, #552]	@ (8001774 <main+0x5d4>)
 800154c:	22ff      	movs	r2, #255	@ 0xff
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e173      	b.n	800183a <main+0x69a>
		}
	}
	else
	{
		HAL_UART_Receive_IT(&huart3, (uint8_t *)rx_data, 3);
 8001552:	2203      	movs	r2, #3
 8001554:	4988      	ldr	r1, [pc, #544]	@ (8001778 <main+0x5d8>)
 8001556:	4889      	ldr	r0, [pc, #548]	@ (800177c <main+0x5dc>)
 8001558:	f003 fbd1 	bl	8004cfe <HAL_UART_Receive_IT>
		if(checkCard(currentID, confirm_card))
 800155c:	4988      	ldr	r1, [pc, #544]	@ (8001780 <main+0x5e0>)
 800155e:	4880      	ldr	r0, [pc, #512]	@ (8001760 <main+0x5c0>)
 8001560:	f7ff fd8c 	bl	800107c <checkCard>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d04f      	beq.n	800160a <main+0x46a>
		{
			DFPlayer_sendCMD(0x03, 0x00, 0x09);
 800156a:	2209      	movs	r2, #9
 800156c:	2100      	movs	r1, #0
 800156e:	2003      	movs	r0, #3
 8001570:	f7ff fd18 	bl	8000fa4 <DFPlayer_sendCMD>
			HAL_Delay(1000);
 8001574:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001578:	f001 f9d2 	bl	8002920 <HAL_Delay>
			prepareToSend(package_data);
 800157c:	4881      	ldr	r0, [pc, #516]	@ (8001784 <main+0x5e4>)
 800157e:	f7ff fd9d 	bl	80010bc <prepareToSend>
			HAL_Delay(100);
 8001582:	2064      	movs	r0, #100	@ 0x64
 8001584:	f001 f9cc 	bl	8002920 <HAL_Delay>
			Set_Brightness(0);
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff fc79 	bl	8000e80 <Set_Brightness>
			WS2812_Send();
 800158e:	f7ff fbdb 	bl	8000d48 <WS2812_Send>
			HAL_Delay(200);
 8001592:	20c8      	movs	r0, #200	@ 0xc8
 8001594:	f001 f9c4 	bl	8002920 <HAL_Delay>
			Set_Brightness(brightness);
 8001598:	4b7b      	ldr	r3, [pc, #492]	@ (8001788 <main+0x5e8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fc6f 	bl	8000e80 <Set_Brightness>
			WS2812_Send();
 80015a2:	f7ff fbd1 	bl	8000d48 <WS2812_Send>
			HAL_Delay(200);
 80015a6:	20c8      	movs	r0, #200	@ 0xc8
 80015a8:	f001 f9ba 	bl	8002920 <HAL_Delay>
			Set_Brightness(0);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fc67 	bl	8000e80 <Set_Brightness>
			WS2812_Send();
 80015b2:	f7ff fbc9 	bl	8000d48 <WS2812_Send>
			HAL_Delay(200);
 80015b6:	20c8      	movs	r0, #200	@ 0xc8
 80015b8:	f001 f9b2 	bl	8002920 <HAL_Delay>
			Set_Brightness(brightness);
 80015bc:	4b72      	ldr	r3, [pc, #456]	@ (8001788 <main+0x5e8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fc5d 	bl	8000e80 <Set_Brightness>
			WS2812_Send();
 80015c6:	f7ff fbbf 	bl	8000d48 <WS2812_Send>
			HAL_Delay(200);
 80015ca:	20c8      	movs	r0, #200	@ 0xc8
 80015cc:	f001 f9a8 	bl	8002920 <HAL_Delay>
			Set_Brightness(0);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff fc55 	bl	8000e80 <Set_Brightness>
			WS2812_Send();
 80015d6:	f7ff fbb7 	bl	8000d48 <WS2812_Send>
			HAL_Delay(200);
 80015da:	20c8      	movs	r0, #200	@ 0xc8
 80015dc:	f001 f9a0 	bl	8002920 <HAL_Delay>
			Set_Brightness(brightness);
 80015e0:	4b69      	ldr	r3, [pc, #420]	@ (8001788 <main+0x5e8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fc4b 	bl	8000e80 <Set_Brightness>
			WS2812_Send();
 80015ea:	f7ff fbad 	bl	8000d48 <WS2812_Send>
			HAL_Delay(200);
 80015ee:	20c8      	movs	r0, #200	@ 0xc8
 80015f0:	f001 f996 	bl	8002920 <HAL_Delay>
			reset_buffer(currentID);
 80015f4:	485a      	ldr	r0, [pc, #360]	@ (8001760 <main+0x5c0>)
 80015f6:	f7ff fd29 	bl	800104c <reset_buffer>
			DFPlayer_sendCMD(0x08, 0x00, 0x0A);
 80015fa:	220a      	movs	r2, #10
 80015fc:	2100      	movs	r1, #0
 80015fe:	2008      	movs	r0, #8
 8001600:	f7ff fcd0 	bl	8000fa4 <DFPlayer_sendCMD>
			run = 1;
 8001604:	4b61      	ldr	r3, [pc, #388]	@ (800178c <main+0x5ec>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]

		}
		if(dir_data[last_step] == FORWARD)
 800160a:	4b61      	ldr	r3, [pc, #388]	@ (8001790 <main+0x5f0>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	4b60      	ldr	r3, [pc, #384]	@ (8001794 <main+0x5f4>)
 8001612:	5c9b      	ldrb	r3, [r3, r2]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d108      	bne.n	800162a <main+0x48a>
		{
			r = 255;
 8001618:	4b54      	ldr	r3, [pc, #336]	@ (800176c <main+0x5cc>)
 800161a:	22ff      	movs	r2, #255	@ 0xff
 800161c:	701a      	strb	r2, [r3, #0]
			g = 0;
 800161e:	4b54      	ldr	r3, [pc, #336]	@ (8001770 <main+0x5d0>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
			b = 0;
 8001624:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <main+0x5d4>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
		}
		if(dir_data[last_step] == BACKWARD)
 800162a:	4b59      	ldr	r3, [pc, #356]	@ (8001790 <main+0x5f0>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	4b58      	ldr	r3, [pc, #352]	@ (8001794 <main+0x5f4>)
 8001632:	5c9b      	ldrb	r3, [r3, r2]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d108      	bne.n	800164a <main+0x4aa>
		{
			r = 255;
 8001638:	4b4c      	ldr	r3, [pc, #304]	@ (800176c <main+0x5cc>)
 800163a:	22ff      	movs	r2, #255	@ 0xff
 800163c:	701a      	strb	r2, [r3, #0]
			g = 0;
 800163e:	4b4c      	ldr	r3, [pc, #304]	@ (8001770 <main+0x5d0>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
			b = 180;
 8001644:	4b4b      	ldr	r3, [pc, #300]	@ (8001774 <main+0x5d4>)
 8001646:	22b4      	movs	r2, #180	@ 0xb4
 8001648:	701a      	strb	r2, [r3, #0]
		}
		if(dir_data[last_step] == LEFT)
 800164a:	4b51      	ldr	r3, [pc, #324]	@ (8001790 <main+0x5f0>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	4b50      	ldr	r3, [pc, #320]	@ (8001794 <main+0x5f4>)
 8001652:	5c9b      	ldrb	r3, [r3, r2]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d108      	bne.n	800166a <main+0x4ca>
		{
			r = 0;
 8001658:	4b44      	ldr	r3, [pc, #272]	@ (800176c <main+0x5cc>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
			g = 255;
 800165e:	4b44      	ldr	r3, [pc, #272]	@ (8001770 <main+0x5d0>)
 8001660:	22ff      	movs	r2, #255	@ 0xff
 8001662:	701a      	strb	r2, [r3, #0]
			b = 0;
 8001664:	4b43      	ldr	r3, [pc, #268]	@ (8001774 <main+0x5d4>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
		}
		if(dir_data[last_step] == RIGHT)
 800166a:	4b49      	ldr	r3, [pc, #292]	@ (8001790 <main+0x5f0>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	4b48      	ldr	r3, [pc, #288]	@ (8001794 <main+0x5f4>)
 8001672:	5c9b      	ldrb	r3, [r3, r2]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d108      	bne.n	800168a <main+0x4ea>
		{
			r = 0;
 8001678:	4b3c      	ldr	r3, [pc, #240]	@ (800176c <main+0x5cc>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
			g = 0;
 800167e:	4b3c      	ldr	r3, [pc, #240]	@ (8001770 <main+0x5d0>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
			b = 255;
 8001684:	4b3b      	ldr	r3, [pc, #236]	@ (8001774 <main+0x5d4>)
 8001686:	22ff      	movs	r2, #255	@ 0xff
 8001688:	701a      	strb	r2, [r3, #0]
		}
		if(run)
 800168a:	4b40      	ldr	r3, [pc, #256]	@ (800178c <main+0x5ec>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80d3 	beq.w	800183a <main+0x69a>
		{
			if(current_step > last_step)
 8001694:	4b40      	ldr	r3, [pc, #256]	@ (8001798 <main+0x5f8>)
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	4b3d      	ldr	r3, [pc, #244]	@ (8001790 <main+0x5f0>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d917      	bls.n	80016d0 <main+0x530>
			{
				Set_LED(last_step, r, g, b);
 80016a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001790 <main+0x5f0>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	4b31      	ldr	r3, [pc, #196]	@ (800176c <main+0x5cc>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4b30      	ldr	r3, [pc, #192]	@ (8001770 <main+0x5d0>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b30      	ldr	r3, [pc, #192]	@ (8001774 <main+0x5d4>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	f7ff fbb5 	bl	8000e24 <Set_LED>
				Set_Brightness(brightness);
 80016ba:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <main+0x5e8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fbde 	bl	8000e80 <Set_Brightness>
				WS2812_Send();
 80016c4:	f7ff fb40 	bl	8000d48 <WS2812_Send>
				last_step = current_step;
 80016c8:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <main+0x5f8>)
 80016ca:	781a      	ldrb	r2, [r3, #0]
 80016cc:	4b30      	ldr	r3, [pc, #192]	@ (8001790 <main+0x5f0>)
 80016ce:	701a      	strb	r2, [r3, #0]
			}
			if(current_step == MAX_LED)
 80016d0:	4b31      	ldr	r3, [pc, #196]	@ (8001798 <main+0x5f8>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b10      	cmp	r3, #16
 80016d6:	f040 8087 	bne.w	80017e8 <main+0x648>
			{
				DFPlayer_sendCMD(0x03, 0x00, 0x09);
 80016da:	2209      	movs	r2, #9
 80016dc:	2100      	movs	r1, #0
 80016de:	2003      	movs	r0, #3
 80016e0:	f7ff fc60 	bl	8000fa4 <DFPlayer_sendCMD>
				HAL_Delay(1000);
 80016e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016e8:	f001 f91a 	bl	8002920 <HAL_Delay>
				Set_Brightness(0);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fbc7 	bl	8000e80 <Set_Brightness>
				WS2812_Send();
 80016f2:	f7ff fb29 	bl	8000d48 <WS2812_Send>
				HAL_Delay(200);
 80016f6:	20c8      	movs	r0, #200	@ 0xc8
 80016f8:	f001 f912 	bl	8002920 <HAL_Delay>
				Set_Brightness(brightness);
 80016fc:	4b22      	ldr	r3, [pc, #136]	@ (8001788 <main+0x5e8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fbbd 	bl	8000e80 <Set_Brightness>
				WS2812_Send();
 8001706:	f7ff fb1f 	bl	8000d48 <WS2812_Send>
				HAL_Delay(200);
 800170a:	20c8      	movs	r0, #200	@ 0xc8
 800170c:	f001 f908 	bl	8002920 <HAL_Delay>
				Set_Brightness(0);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fbb5 	bl	8000e80 <Set_Brightness>
				WS2812_Send();
 8001716:	f7ff fb17 	bl	8000d48 <WS2812_Send>
				HAL_Delay(200);
 800171a:	20c8      	movs	r0, #200	@ 0xc8
 800171c:	f001 f900 	bl	8002920 <HAL_Delay>
				Set_Brightness(brightness);
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <main+0x5e8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fbab 	bl	8000e80 <Set_Brightness>
				WS2812_Send();
 800172a:	f7ff fb0d 	bl	8000d48 <WS2812_Send>
				HAL_Delay(200);
 800172e:	20c8      	movs	r0, #200	@ 0xc8
 8001730:	f001 f8f6 	bl	8002920 <HAL_Delay>
				Set_Brightness(0);
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fba3 	bl	8000e80 <Set_Brightness>
				WS2812_Send();
 800173a:	f7ff fb05 	bl	8000d48 <WS2812_Send>
				HAL_Delay(200);
 800173e:	20c8      	movs	r0, #200	@ 0xc8
 8001740:	f001 f8ee 	bl	8002920 <HAL_Delay>
				Set_Brightness(brightness);
 8001744:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <main+0x5e8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fb99 	bl	8000e80 <Set_Brightness>
				WS2812_Send();
 800174e:	f7ff fafb 	bl	8000d48 <WS2812_Send>
				HAL_Delay(200);
 8001752:	20c8      	movs	r0, #200	@ 0xc8
 8001754:	f001 f8e4 	bl	8002920 <HAL_Delay>
				for(uint8_t i = 0; i < MAX_LED; i++)
 8001758:	2300      	movs	r3, #0
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	e029      	b.n	80017b2 <main+0x612>
 800175e:	bf00      	nop
 8001760:	200005fc 	.word	0x200005fc
 8001764:	200005e8 	.word	0x200005e8
 8001768:	200005e4 	.word	0x200005e4
 800176c:	20000008 	.word	0x20000008
 8001770:	20000009 	.word	0x20000009
 8001774:	2000000a 	.word	0x2000000a
 8001778:	200001f8 	.word	0x200001f8
 800177c:	20000190 	.word	0x20000190
 8001780:	20000034 	.word	0x20000034
 8001784:	200001e4 	.word	0x200001e4
 8001788:	20000004 	.word	0x20000004
 800178c:	20000603 	.word	0x20000603
 8001790:	20000602 	.word	0x20000602
 8001794:	200005ec 	.word	0x200005ec
 8001798:	20000601 	.word	0x20000601
				{
					Set_LED(i, 0, 0, 0);
 800179c:	79f8      	ldrb	r0, [r7, #7]
 800179e:	2300      	movs	r3, #0
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	f7ff fb3e 	bl	8000e24 <Set_LED>
					WS2812_Send();
 80017a8:	f7ff face 	bl	8000d48 <WS2812_Send>
				for(uint8_t i = 0; i < MAX_LED; i++)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	3301      	adds	r3, #1
 80017b0:	71fb      	strb	r3, [r7, #7]
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d9f1      	bls.n	800179c <main+0x5fc>
				}
				reset_buffer(currentID);
 80017b8:	4833      	ldr	r0, [pc, #204]	@ (8001888 <main+0x6e8>)
 80017ba:	f7ff fc47 	bl	800104c <reset_buffer>
				flag = 0;
 80017be:	4b33      	ldr	r3, [pc, #204]	@ (800188c <main+0x6ec>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
				led_num = 0;
 80017c4:	4b32      	ldr	r3, [pc, #200]	@ (8001890 <main+0x6f0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
				current_step = 0;
 80017ca:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <main+0x6f4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
				run = 0;
 80017d0:	4b31      	ldr	r3, [pc, #196]	@ (8001898 <main+0x6f8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
				last_step = current_step;
 80017d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <main+0x6f4>)
 80017d8:	781a      	ldrb	r2, [r3, #0]
 80017da:	4b30      	ldr	r3, [pc, #192]	@ (800189c <main+0x6fc>)
 80017dc:	701a      	strb	r2, [r3, #0]
				DFPlayer_sendCMD(0x08, 0x00, 0x07);
 80017de:	2207      	movs	r2, #7
 80017e0:	2100      	movs	r1, #0
 80017e2:	2008      	movs	r0, #8
 80017e4:	f7ff fbde 	bl	8000fa4 <DFPlayer_sendCMD>
			}
			Set_LED(last_step, r, g, b);
 80017e8:	4b2c      	ldr	r3, [pc, #176]	@ (800189c <main+0x6fc>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	4b2c      	ldr	r3, [pc, #176]	@ (80018a0 <main+0x700>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4619      	mov	r1, r3
 80017f4:	4b2b      	ldr	r3, [pc, #172]	@ (80018a4 <main+0x704>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <main+0x708>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	f7ff fb11 	bl	8000e24 <Set_LED>
			Set_Brightness(brightness);
 8001802:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <main+0x70c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fb3a 	bl	8000e80 <Set_Brightness>
			WS2812_Send();
 800180c:	f7ff fa9c 	bl	8000d48 <WS2812_Send>
			HAL_Delay(250);
 8001810:	20fa      	movs	r0, #250	@ 0xfa
 8001812:	f001 f885 	bl	8002920 <HAL_Delay>
			Set_LED(current_step, 255, 255, 255);
 8001816:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <main+0x6f4>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	23ff      	movs	r3, #255	@ 0xff
 800181e:	22ff      	movs	r2, #255	@ 0xff
 8001820:	21ff      	movs	r1, #255	@ 0xff
 8001822:	f7ff faff 	bl	8000e24 <Set_LED>
			Set_Brightness(brightness);
 8001826:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <main+0x70c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fb28 	bl	8000e80 <Set_Brightness>
			WS2812_Send();
 8001830:	f7ff fa8a 	bl	8000d48 <WS2812_Send>
			HAL_Delay(250);
 8001834:	20fa      	movs	r0, #250	@ 0xfa
 8001836:	f001 f873 	bl	8002920 <HAL_Delay>
		}
	}
	if(isCard())
 800183a:	f000 fdcf 	bl	80023dc <isCard>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <main+0x6ae>
	{
		readCardSerial(currentID);
 8001844:	4810      	ldr	r0, [pc, #64]	@ (8001888 <main+0x6e8>)
 8001846:	f000 fddd 	bl	8002404 <readCardSerial>
		MFRC522_Halt();
 800184a:	f000 fd26 	bl	800229a <MFRC522_Halt>
	}
	if(wait_to_send)
 800184e:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <main+0x710>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f43f acdf 	beq.w	8001216 <main+0x76>
	{
	    DFPlayer_sendCMD(0x03, 0x00, 0x05);
 8001858:	2205      	movs	r2, #5
 800185a:	2100      	movs	r1, #0
 800185c:	2003      	movs	r0, #3
 800185e:	f7ff fba1 	bl	8000fa4 <DFPlayer_sendCMD>
		HAL_Delay(700);
 8001862:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001866:	f001 f85b 	bl	8002920 <HAL_Delay>
	    DFPlayer_sendCMD(0x03, 0x00, 0x07);
 800186a:	2207      	movs	r2, #7
 800186c:	2100      	movs	r1, #0
 800186e:	2003      	movs	r0, #3
 8001870:	f7ff fb98 	bl	8000fa4 <DFPlayer_sendCMD>
		wait_to_send = 0;
 8001874:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <main+0x710>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
		++led_num;
 800187a:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <main+0x6f0>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <main+0x6f0>)
 8001884:	701a      	strb	r2, [r3, #0]
	if(!flag)
 8001886:	e4c6      	b.n	8001216 <main+0x76>
 8001888:	200005fc 	.word	0x200005fc
 800188c:	200005e4 	.word	0x200005e4
 8001890:	200005e8 	.word	0x200005e8
 8001894:	20000601 	.word	0x20000601
 8001898:	20000603 	.word	0x20000603
 800189c:	20000602 	.word	0x20000602
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000009 	.word	0x20000009
 80018a8:	2000000a 	.word	0x2000000a
 80018ac:	20000004 	.word	0x20000004
 80018b0:	200005e9 	.word	0x200005e9

080018b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b090      	sub	sp, #64	@ 0x40
 80018b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ba:	f107 0318 	add.w	r3, r7, #24
 80018be:	2228      	movs	r2, #40	@ 0x28
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 ffaa 	bl	800581c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d6:	2301      	movs	r3, #1
 80018d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e4:	2301      	movs	r3, #1
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e8:	2302      	movs	r3, #2
 80018ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018f2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80018f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f8:	f107 0318 	add.w	r3, r7, #24
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 fdb9 	bl	8003474 <HAL_RCC_OscConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001908:	f000 f9a6 	bl	8001c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190c:	230f      	movs	r3, #15
 800190e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001910:	2302      	movs	r3, #2
 8001912:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800191c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2102      	movs	r1, #2
 8001926:	4618      	mov	r0, r3
 8001928:	f002 f826 	bl	8003978 <HAL_RCC_ClockConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001932:	f000 f991 	bl	8001c58 <Error_Handler>
  }
}
 8001936:	bf00      	nop
 8001938:	3740      	adds	r7, #64	@ 0x40
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <MX_SPI1_Init+0x64>)
 8001946:	4a18      	ldr	r2, [pc, #96]	@ (80019a8 <MX_SPI1_Init+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800194a:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <MX_SPI1_Init+0x64>)
 800194c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001950:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001952:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <MX_SPI1_Init+0x64>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <MX_SPI1_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <MX_SPI1_Init+0x64>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001964:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <MX_SPI1_Init+0x64>)
 8001966:	2201      	movs	r2, #1
 8001968:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <MX_SPI1_Init+0x64>)
 800196c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001970:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001972:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <MX_SPI1_Init+0x64>)
 8001974:	2210      	movs	r2, #16
 8001976:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <MX_SPI1_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <MX_SPI1_Init+0x64>)
 8001980:	2200      	movs	r2, #0
 8001982:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001984:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <MX_SPI1_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <MX_SPI1_Init+0x64>)
 800198c:	220a      	movs	r2, #10
 800198e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <MX_SPI1_Init+0x64>)
 8001992:	f002 f97f 	bl	8003c94 <HAL_SPI_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800199c:	f000 f95c 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000064 	.word	0x20000064
 80019a8:	40013000 	.word	0x40013000

080019ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b2:	f107 0320 	add.w	r3, r7, #32
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019ce:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <MX_TIM2_Init+0xac>)
 80019d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019d6:	4b20      	ldr	r3, [pc, #128]	@ (8001a58 <MX_TIM2_Init+0xac>)
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <MX_TIM2_Init+0xac>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <MX_TIM2_Init+0xac>)
 80019e4:	2259      	movs	r2, #89	@ 0x59
 80019e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <MX_TIM2_Init+0xac>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <MX_TIM2_Init+0xac>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019f4:	4818      	ldr	r0, [pc, #96]	@ (8001a58 <MX_TIM2_Init+0xac>)
 80019f6:	f002 f9d1 	bl	8003d9c <HAL_TIM_PWM_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001a00:	f000 f92a 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a0c:	f107 0320 	add.w	r3, r7, #32
 8001a10:	4619      	mov	r1, r3
 8001a12:	4811      	ldr	r0, [pc, #68]	@ (8001a58 <MX_TIM2_Init+0xac>)
 8001a14:	f003 f83a 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001a1e:	f000 f91b 	bl	8001c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a22:	2360      	movs	r3, #96	@ 0x60
 8001a24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2200      	movs	r2, #0
 8001a36:	4619      	mov	r1, r3
 8001a38:	4807      	ldr	r0, [pc, #28]	@ (8001a58 <MX_TIM2_Init+0xac>)
 8001a3a:	f002 fc67 	bl	800430c <HAL_TIM_PWM_ConfigChannel>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001a44:	f000 f908 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a48:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <MX_TIM2_Init+0xac>)
 8001a4a:	f000 fdbb 	bl	80025c4 <HAL_TIM_MspPostInit>

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	@ 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200000bc 	.word	0x200000bc

08001a5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <MX_USART1_UART_Init+0x50>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a68:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <MX_USART1_UART_Init+0x4c>)
 8001a94:	f003 f858 	bl	8004b48 <HAL_UART_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a9e:	f000 f8db 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000148 	.word	0x20000148
 8001aac:	40013800 	.word	0x40013800

08001ab0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <MX_USART3_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <MX_USART3_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <MX_USART3_UART_Init+0x4c>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <MX_USART3_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <MX_USART3_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <MX_USART3_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MX_USART3_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <MX_USART3_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <MX_USART3_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	@ (8001afc <MX_USART3_UART_Init+0x4c>)
 8001ae8:	f003 f82e 	bl	8004b48 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001af2:	f000 f8b1 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000190 	.word	0x20000190
 8001b00:	40004800 	.word	0x40004800

08001b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <MX_DMA_Init+0x38>)
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b3c <MX_DMA_Init+0x38>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6153      	str	r3, [r2, #20]
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MX_DMA_Init+0x38>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	200f      	movs	r0, #15
 8001b28:	f000 fff5 	bl	8002b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b2c:	200f      	movs	r0, #15
 8001b2e:	f001 f80e 	bl	8002b4e <HAL_NVIC_EnableIRQ>

}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000

08001b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b54:	4b3b      	ldr	r3, [pc, #236]	@ (8001c44 <MX_GPIO_Init+0x104>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	4a3a      	ldr	r2, [pc, #232]	@ (8001c44 <MX_GPIO_Init+0x104>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	6193      	str	r3, [r2, #24]
 8001b60:	4b38      	ldr	r3, [pc, #224]	@ (8001c44 <MX_GPIO_Init+0x104>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6c:	4b35      	ldr	r3, [pc, #212]	@ (8001c44 <MX_GPIO_Init+0x104>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a34      	ldr	r2, [pc, #208]	@ (8001c44 <MX_GPIO_Init+0x104>)
 8001b72:	f043 0320 	orr.w	r3, r3, #32
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b32      	ldr	r3, [pc, #200]	@ (8001c44 <MX_GPIO_Init+0x104>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b2f      	ldr	r3, [pc, #188]	@ (8001c44 <MX_GPIO_Init+0x104>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a2e      	ldr	r2, [pc, #184]	@ (8001c44 <MX_GPIO_Init+0x104>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <MX_GPIO_Init+0x104>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9c:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <MX_GPIO_Init+0x104>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a28      	ldr	r2, [pc, #160]	@ (8001c44 <MX_GPIO_Init+0x104>)
 8001ba2:	f043 0308 	orr.w	r3, r3, #8
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b26      	ldr	r3, [pc, #152]	@ (8001c44 <MX_GPIO_Init+0x104>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bba:	4823      	ldr	r0, [pc, #140]	@ (8001c48 <MX_GPIO_Init+0x108>)
 8001bbc:	f001 fc1f 	bl	80033fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	4821      	ldr	r0, [pc, #132]	@ (8001c4c <MX_GPIO_Init+0x10c>)
 8001bc6:	f001 fc1a 	bl	80033fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	4619      	mov	r1, r3
 8001be2:	4819      	ldr	r0, [pc, #100]	@ (8001c48 <MX_GPIO_Init+0x108>)
 8001be4:	f001 fa70 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001be8:	2310      	movs	r3, #16
 8001bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4813      	ldr	r0, [pc, #76]	@ (8001c4c <MX_GPIO_Init+0x10c>)
 8001c00:	f001 fa62 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT2_Pin BT1_Pin */
  GPIO_InitStruct.Pin = BT2_Pin|BT1_Pin;
 8001c04:	2318      	movs	r3, #24
 8001c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <MX_GPIO_Init+0x110>)
 8001c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4619      	mov	r1, r3
 8001c16:	480f      	ldr	r0, [pc, #60]	@ (8001c54 <MX_GPIO_Init+0x114>)
 8001c18:	f001 fa56 	bl	80030c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2009      	movs	r0, #9
 8001c22:	f000 ff78 	bl	8002b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c26:	2009      	movs	r0, #9
 8001c28:	f000 ff91 	bl	8002b4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	200a      	movs	r0, #10
 8001c32:	f000 ff70 	bl	8002b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c36:	200a      	movs	r0, #10
 8001c38:	f000 ff89 	bl	8002b4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40011000 	.word	0x40011000
 8001c4c:	40010800 	.word	0x40010800
 8001c50:	10110000 	.word	0x10110000
 8001c54:	40010c00 	.word	0x40010c00

08001c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5c:	b672      	cpsid	i
}
 8001c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <Error_Handler+0x8>

08001c64 <SW_SPI_init>:
GPIO_TypeDef *CS_PORT;
uint16_t      CS_PIN;


static void SW_SPI_init(void) //khoi tao vao ra cho GPIO
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;            // cho MOSI la out
        GPIO_InitStruct.Pin = MOSI_PIN;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <SW_SPI_init+0x80>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	603b      	str	r3, [r7, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2302      	movs	r3, #2
 8001c76:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(MOSI_PORT, &GPIO_InitStruct);
 8001c78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <SW_SPI_init+0x84>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	463a      	mov	r2, r7
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f001 fa21 	bl	80030c8 <HAL_GPIO_Init>
	
        GPIO_InitStruct.Pin = CS_PIN;              // cho CS la out
 8001c86:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <SW_SPI_init+0x88>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	603b      	str	r3, [r7, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2302      	movs	r3, #2
 8001c92:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(CS_PORT, &GPIO_InitStruct);
 8001c94:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <SW_SPI_init+0x8c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	463a      	mov	r2, r7
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 fa13 	bl	80030c8 <HAL_GPIO_Init>
	
        GPIO_InitStruct.Pin = SCK_PIN;              // cho SCK la out
 8001ca2:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <SW_SPI_init+0x90>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	603b      	str	r3, [r7, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2302      	movs	r3, #2
 8001cae:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(SCK_PORT, &GPIO_InitStruct);
 8001cb0:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <SW_SPI_init+0x94>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	463a      	mov	r2, r7
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 fa05 	bl	80030c8 <HAL_GPIO_Init>
                
        GPIO_InitStruct.Pin = MISO_PIN;           //cho MISO la in
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <SW_SPI_init+0x98>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	603b      	str	r3, [r7, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
        HAL_GPIO_Init(MISO_PORT, &GPIO_InitStruct);
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <SW_SPI_init+0x9c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	463a      	mov	r2, r7
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 f9f7 	bl	80030c8 <HAL_GPIO_Init>
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000608 	.word	0x20000608
 8001ce8:	20000604 	.word	0x20000604
 8001cec:	20000620 	.word	0x20000620
 8001cf0:	2000061c 	.word	0x2000061c
 8001cf4:	20000618 	.word	0x20000618
 8001cf8:	20000614 	.word	0x20000614
 8001cfc:	20000610 	.word	0x20000610
 8001d00:	2000060c 	.word	0x2000060c

08001d04 <spi>:
unsigned char spi(unsigned char byte)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
	unsigned char rv=0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
	for(int i=0;i<8;i++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	e03d      	b.n	8001d94 <spi+0x90>
	{
		if((byte & (0x80 >>i)) != 0)HAL_GPIO_WritePin(MOSI_PORT,MOSI_PIN,GPIO_PIN_SET); 
 8001d18:	79fa      	ldrb	r2, [r7, #7]
 8001d1a:	2180      	movs	r1, #128	@ 0x80
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	fa41 f303 	asr.w	r3, r1, r3
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <spi+0x36>
 8001d28:	4b1e      	ldr	r3, [pc, #120]	@ (8001da4 <spi+0xa0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8001da8 <spi+0xa4>)
 8001d2e:	8811      	ldrh	r1, [r2, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	4618      	mov	r0, r3
 8001d34:	f001 fb63 	bl	80033fe <HAL_GPIO_WritePin>
 8001d38:	e007      	b.n	8001d4a <spi+0x46>
		else HAL_GPIO_WritePin(MOSI_PORT,MOSI_PIN,GPIO_PIN_RESET); 
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <spi+0xa0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001da8 <spi+0xa4>)
 8001d40:	8811      	ldrh	r1, [r2, #0]
 8001d42:	2200      	movs	r2, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f001 fb5a 	bl	80033fe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCK_PORT,SCK_PIN,GPIO_PIN_SET);      
 8001d4a:	4b18      	ldr	r3, [pc, #96]	@ (8001dac <spi+0xa8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a18      	ldr	r2, [pc, #96]	@ (8001db0 <spi+0xac>)
 8001d50:	8811      	ldrh	r1, [r2, #0]
 8001d52:	2201      	movs	r2, #1
 8001d54:	4618      	mov	r0, r3
 8001d56:	f001 fb52 	bl	80033fe <HAL_GPIO_WritePin>
		rv<<=1;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
		if(HAL_GPIO_ReadPin(MISO_PORT,MISO_PIN) != 0)rv|=0x01;
 8001d60:	4b14      	ldr	r3, [pc, #80]	@ (8001db4 <spi+0xb0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a14      	ldr	r2, [pc, #80]	@ (8001db8 <spi+0xb4>)
 8001d66:	8812      	ldrh	r2, [r2, #0]
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f001 fb30 	bl	80033d0 <HAL_GPIO_ReadPin>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <spi+0x7a>
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(SCK_PORT,SCK_PIN,GPIO_PIN_RESET);      
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <spi+0xa8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a0b      	ldr	r2, [pc, #44]	@ (8001db0 <spi+0xac>)
 8001d84:	8811      	ldrh	r1, [r2, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 fb38 	bl	80033fe <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3301      	adds	r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b07      	cmp	r3, #7
 8001d98:	ddbe      	ble.n	8001d18 <spi+0x14>
	}
	return rv;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000604 	.word	0x20000604
 8001da8:	20000608 	.word	0x20000608
 8001dac:	20000614 	.word	0x20000614
 8001db0:	20000618 	.word	0x20000618
 8001db4:	2000060c 	.word	0x2000060c
 8001db8:	20000610 	.word	0x20000610

08001dbc <spi_transmit>:
unsigned char spi_transmit(unsigned char data)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
	uint8_t datRV[1];
	datRV[0] = spi(data);
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff9b 	bl	8001d04 <spi>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	733b      	strb	r3, [r7, #12]
	return datRV[0];
 8001dd2:	7b3b      	ldrb	r3, [r7, #12]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <RFID_write>:
///////////////////////////////////////////////////////////////////////////////
void RFID_write(unsigned char reg, unsigned char data)
{ 
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	460a      	mov	r2, r1
 8001de6:	71fb      	strb	r3, [r7, #7]
 8001de8:	4613      	mov	r3, r2
 8001dea:	71bb      	strb	r3, [r7, #6]
	MFRC522_CS_EN;
 8001dec:	4b10      	ldr	r3, [pc, #64]	@ (8001e30 <RFID_write+0x54>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a10      	ldr	r2, [pc, #64]	@ (8001e34 <RFID_write+0x58>)
 8001df2:	8811      	ldrh	r1, [r2, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 fb01 	bl	80033fe <HAL_GPIO_WritePin>
	spi_transmit((reg<<1)&0x7E);
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ffd7 	bl	8001dbc <spi_transmit>
	spi_transmit(data); 
 8001e0e:	79bb      	ldrb	r3, [r7, #6]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ffd3 	bl	8001dbc <spi_transmit>
	MFRC522_CS_DIS;
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <RFID_write+0x54>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a06      	ldr	r2, [pc, #24]	@ (8001e34 <RFID_write+0x58>)
 8001e1c:	8811      	ldrh	r1, [r2, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4618      	mov	r0, r3
 8001e22:	f001 faec 	bl	80033fe <HAL_GPIO_WritePin>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000061c 	.word	0x2000061c
 8001e34:	20000620 	.word	0x20000620

08001e38 <RFID_read>:
///////////////////////////////////////////////////////////////////////////////
unsigned char RFID_read(unsigned char reg)
        {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
        unsigned char data; 
        MFRC522_CS_EN;
 8001e42:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <RFID_read+0x5c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a14      	ldr	r2, [pc, #80]	@ (8001e98 <RFID_read+0x60>)
 8001e48:	8811      	ldrh	r1, [r2, #0]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f001 fad6 	bl	80033fe <HAL_GPIO_WritePin>
        spi_transmit(((reg<<1)&0x7E)|0x80);
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001e5e:	b25b      	sxtb	r3, r3
 8001e60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e64:	b25b      	sxtb	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ffa7 	bl	8001dbc <spi_transmit>
        data = spi_transmit(0x00); 
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff ffa4 	bl	8001dbc <spi_transmit>
 8001e74:	4603      	mov	r3, r0
 8001e76:	73fb      	strb	r3, [r7, #15]
        MFRC522_CS_DIS;
 8001e78:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <RFID_read+0x5c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a06      	ldr	r2, [pc, #24]	@ (8001e98 <RFID_read+0x60>)
 8001e7e:	8811      	ldrh	r1, [r2, #0]
 8001e80:	2201      	movs	r2, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 fabb 	bl	80033fe <HAL_GPIO_WritePin>
        return data;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
        } 
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000061c 	.word	0x2000061c
 8001e98:	20000620 	.word	0x20000620

08001e9c <SetBitMask>:
///////////////////////////////////////////////////////////////////////////////
void SetBitMask(unsigned char reg,unsigned char mask)  
        {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	71bb      	strb	r3, [r7, #6]
        unsigned char tmp = 0x0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]
        tmp = RFID_read(reg);
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ffc0 	bl	8001e38 <RFID_read>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	73fb      	strb	r3, [r7, #15]
        RFID_write(reg,tmp | mask);  
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	79bb      	ldrb	r3, [r7, #6]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff87 	bl	8001ddc <RFID_write>
        }
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <ClearBitMask>:
///////////////////////////////////////////////////////////////////////////////
void ClearBitMask(unsigned char reg,unsigned char mask)  
        {
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	460a      	mov	r2, r1
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	71bb      	strb	r3, [r7, #6]
        unsigned char tmp = 0x0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
        tmp = RFID_read(reg);
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ffa3 	bl	8001e38 <RFID_read>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	73fb      	strb	r3, [r7, #15]
        RFID_write(reg, tmp & ~mask);  
 8001ef6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	b25a      	sxtb	r2, r3
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4013      	ands	r3, r2
 8001f04:	b25b      	sxtb	r3, r3
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff65 	bl	8001ddc <RFID_write>
        } 
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <MFRC522_ComMF522>:
unsigned char MFRC522_ComMF522(unsigned char  Command, 
                               unsigned char  *pInData, 
                               unsigned char  InLenByte,
                               unsigned char  *pOutData, 
                               unsigned int *pOutLenBit)
        {
 8001f1a:	b590      	push	{r4, r7, lr}
 8001f1c:	b089      	sub	sp, #36	@ 0x24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	4603      	mov	r3, r0
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	73bb      	strb	r3, [r7, #14]
        unsigned char status = 2;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	77fb      	strb	r3, [r7, #31]
        unsigned char irqEn   = 0x00;
 8001f30:	2300      	movs	r3, #0
 8001f32:	77bb      	strb	r3, [r7, #30]
        unsigned char waitFor = 0x00;
 8001f34:	2300      	movs	r3, #0
 8001f36:	777b      	strb	r3, [r7, #29]
        unsigned char lastBits;
        unsigned char n;
        unsigned int i;
        switch (Command)
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d006      	beq.n	8001f4c <MFRC522_ComMF522+0x32>
 8001f3e:	2b0e      	cmp	r3, #14
 8001f40:	d109      	bne.n	8001f56 <MFRC522_ComMF522+0x3c>
                {
                case 0x0E: irqEn   = 0x12; waitFor = 0x10; break;
 8001f42:	2312      	movs	r3, #18
 8001f44:	77bb      	strb	r3, [r7, #30]
 8001f46:	2310      	movs	r3, #16
 8001f48:	777b      	strb	r3, [r7, #29]
 8001f4a:	e005      	b.n	8001f58 <MFRC522_ComMF522+0x3e>
                case 0x0C: irqEn   = 0x77; waitFor = 0x30; break;
 8001f4c:	2377      	movs	r3, #119	@ 0x77
 8001f4e:	77bb      	strb	r3, [r7, #30]
 8001f50:	2330      	movs	r3, #48	@ 0x30
 8001f52:	777b      	strb	r3, [r7, #29]
 8001f54:	e000      	b.n	8001f58 <MFRC522_ComMF522+0x3e>
                default:                                   break;
 8001f56:	bf00      	nop
                } 
        RFID_write(0x02,irqEn|0x80);
 8001f58:	7fbb      	ldrb	r3, [r7, #30]
 8001f5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	4619      	mov	r1, r3
 8001f62:	2002      	movs	r0, #2
 8001f64:	f7ff ff3a 	bl	8001ddc <RFID_write>
        ClearBitMask(0x04,0x80);
 8001f68:	2180      	movs	r1, #128	@ 0x80
 8001f6a:	2004      	movs	r0, #4
 8001f6c:	f7ff ffb3 	bl	8001ed6 <ClearBitMask>
        RFID_write(0x01,0x00);
 8001f70:	2100      	movs	r1, #0
 8001f72:	2001      	movs	r0, #1
 8001f74:	f7ff ff32 	bl	8001ddc <RFID_write>
        SetBitMask(0x0A,0x80); 
 8001f78:	2180      	movs	r1, #128	@ 0x80
 8001f7a:	200a      	movs	r0, #10
 8001f7c:	f7ff ff8e 	bl	8001e9c <SetBitMask>
        for (i=0; i<InLenByte; i++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e00a      	b.n	8001f9c <MFRC522_ComMF522+0x82>
                {   
                RFID_write(0x09, pInData[i]);
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	2009      	movs	r0, #9
 8001f92:	f7ff ff23 	bl	8001ddc <RFID_write>
        for (i=0; i<InLenByte; i++)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	7bbb      	ldrb	r3, [r7, #14]
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d3f0      	bcc.n	8001f86 <MFRC522_ComMF522+0x6c>
                }
        RFID_write(0x01, Command);
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7ff ff17 	bl	8001ddc <RFID_write>
        if (Command == 0x0C)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d103      	bne.n	8001fbc <MFRC522_ComMF522+0xa2>
                {    
                SetBitMask(0x0D,0x80);  
 8001fb4:	2180      	movs	r1, #128	@ 0x80
 8001fb6:	200d      	movs	r0, #13
 8001fb8:	f7ff ff70 	bl	8001e9c <SetBitMask>
                }
        i = 600; 
 8001fbc:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001fc0:	61bb      	str	r3, [r7, #24]
        do 
                {
                n = RFID_read(0x04);
 8001fc2:	2004      	movs	r0, #4
 8001fc4:	f7ff ff38 	bl	8001e38 <RFID_read>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	773b      	strb	r3, [r7, #28]
                i--;
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	61bb      	str	r3, [r7, #24]
                }
        while ((i!=0) && !(n&0x01) && !(n&waitFor));
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <MFRC522_ComMF522+0xd4>
 8001fd8:	7f3b      	ldrb	r3, [r7, #28]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <MFRC522_ComMF522+0xd4>
 8001fe2:	7f3a      	ldrb	r2, [r7, #28]
 8001fe4:	7f7b      	ldrb	r3, [r7, #29]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0e9      	beq.n	8001fc2 <MFRC522_ComMF522+0xa8>
        ClearBitMask(0x0D,0x80); 
 8001fee:	2180      	movs	r1, #128	@ 0x80
 8001ff0:	200d      	movs	r0, #13
 8001ff2:	f7ff ff70 	bl	8001ed6 <ClearBitMask>
        if (i!=0)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d052      	beq.n	80020a2 <MFRC522_ComMF522+0x188>
                {    
                if(!(RFID_read(0x06)&0x1B))
 8001ffc:	2006      	movs	r0, #6
 8001ffe:	f7ff ff1b 	bl	8001e38 <RFID_read>
 8002002:	4603      	mov	r3, r0
 8002004:	f003 031b 	and.w	r3, r3, #27
 8002008:	2b00      	cmp	r3, #0
 800200a:	d148      	bne.n	800209e <MFRC522_ComMF522+0x184>
                        {
                        status = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	77fb      	strb	r3, [r7, #31]
                        if (n & irqEn & 0x01)
 8002010:	7f3a      	ldrb	r2, [r7, #28]
 8002012:	7fbb      	ldrb	r3, [r7, #30]
 8002014:	4013      	ands	r3, r2
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MFRC522_ComMF522+0x10a>
                                {   
                                status = 1;   
 8002020:	2301      	movs	r3, #1
 8002022:	77fb      	strb	r3, [r7, #31]
                                }
                        if (Command == 0x0C)
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d13b      	bne.n	80020a2 <MFRC522_ComMF522+0x188>
                                {
                                n = RFID_read(0x0A);
 800202a:	200a      	movs	r0, #10
 800202c:	f7ff ff04 	bl	8001e38 <RFID_read>
 8002030:	4603      	mov	r3, r0
 8002032:	773b      	strb	r3, [r7, #28]
                                lastBits = RFID_read(0x0C) & 0x07;
 8002034:	200c      	movs	r0, #12
 8002036:	f7ff feff 	bl	8001e38 <RFID_read>
 800203a:	4603      	mov	r3, r0
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	75fb      	strb	r3, [r7, #23]
                                if (lastBits)
 8002042:	7dfb      	ldrb	r3, [r7, #23]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <MFRC522_ComMF522+0x140>
                                        {   
                                        *pOutLenBit = (n-1)*8 + lastBits;  
 8002048:	7f3b      	ldrb	r3, [r7, #28]
 800204a:	3b01      	subs	r3, #1
 800204c:	00da      	lsls	r2, r3, #3
 800204e:	7dfb      	ldrb	r3, [r7, #23]
 8002050:	4413      	add	r3, r2
 8002052:	461a      	mov	r2, r3
 8002054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	e004      	b.n	8002064 <MFRC522_ComMF522+0x14a>
                                        }
                                else
                                        {   
                                        *pOutLenBit = n*8;   
 800205a:	7f3b      	ldrb	r3, [r7, #28]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	461a      	mov	r2, r3
 8002060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002062:	601a      	str	r2, [r3, #0]
                                        }
                                if (n == 0)
 8002064:	7f3b      	ldrb	r3, [r7, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <MFRC522_ComMF522+0x154>
                                        {   
                                        n = 1;    
 800206a:	2301      	movs	r3, #1
 800206c:	773b      	strb	r3, [r7, #28]
                                        }
                                        if (n > MAXRLEN)
 800206e:	7f3b      	ldrb	r3, [r7, #28]
 8002070:	2b12      	cmp	r3, #18
 8002072:	d901      	bls.n	8002078 <MFRC522_ComMF522+0x15e>
                                        {   
                                        n = MAXRLEN;   
 8002074:	2312      	movs	r3, #18
 8002076:	773b      	strb	r3, [r7, #28]
                                        }
                                for (i=0; i<n; i++)
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	e00a      	b.n	8002094 <MFRC522_ComMF522+0x17a>
                                        {   
                                        pOutData[i] = RFID_read(0x09);    
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	18d4      	adds	r4, r2, r3
 8002084:	2009      	movs	r0, #9
 8002086:	f7ff fed7 	bl	8001e38 <RFID_read>
 800208a:	4603      	mov	r3, r0
 800208c:	7023      	strb	r3, [r4, #0]
                                for (i=0; i<n; i++)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	3301      	adds	r3, #1
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	7f3b      	ldrb	r3, [r7, #28]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	429a      	cmp	r2, r3
 800209a:	d3f0      	bcc.n	800207e <MFRC522_ComMF522+0x164>
 800209c:	e001      	b.n	80020a2 <MFRC522_ComMF522+0x188>
                                        }
                                }
                        }
                else
                        {   
                        status = 2;   
 800209e:	2302      	movs	r3, #2
 80020a0:	77fb      	strb	r3, [r7, #31]
                        }      
                }
        SetBitMask(0x0C,0x80);      
 80020a2:	2180      	movs	r1, #128	@ 0x80
 80020a4:	200c      	movs	r0, #12
 80020a6:	f7ff fef9 	bl	8001e9c <SetBitMask>
        RFID_write(0x01,0x00); 
 80020aa:	2100      	movs	r1, #0
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7ff fe95 	bl	8001ddc <RFID_write>
        return status;
 80020b2:	7ffb      	ldrb	r3, [r7, #31]
        }
 80020b4:	4618      	mov	r0, r3
 80020b6:	3724      	adds	r7, #36	@ 0x24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd90      	pop	{r4, r7, pc}

080020bc <MFRC522_Request>:
///////////////////////////////////////////////////////////////////////////////
unsigned char MFRC522_Request(unsigned char req_code,unsigned char *pTagType)
        {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	@ 0x30
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
        unsigned char status=2;  
 80020c8:	2302      	movs	r3, #2
 80020ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        unsigned int  Length;
        unsigned char Buffer[MAXRLEN];  
        ClearBitMask(0x08,0x08);
 80020ce:	2108      	movs	r1, #8
 80020d0:	2008      	movs	r0, #8
 80020d2:	f7ff ff00 	bl	8001ed6 <ClearBitMask>
        RFID_write(0x0D,0x07);
 80020d6:	2107      	movs	r1, #7
 80020d8:	200d      	movs	r0, #13
 80020da:	f7ff fe7f 	bl	8001ddc <RFID_write>
        SetBitMask(0x14,0x03); 
 80020de:	2103      	movs	r1, #3
 80020e0:	2014      	movs	r0, #20
 80020e2:	f7ff fedb 	bl	8001e9c <SetBitMask>
        Buffer[0] = req_code;
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	733b      	strb	r3, [r7, #12]
        status = MFRC522_ComMF522(0x0C,Buffer,1,Buffer,&Length);
 80020ea:	f107 020c 	add.w	r2, r7, #12
 80020ee:	f107 010c 	add.w	r1, r7, #12
 80020f2:	f107 0320 	add.w	r3, r7, #32
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	2201      	movs	r2, #1
 80020fc:	200c      	movs	r0, #12
 80020fe:	f7ff ff0c 	bl	8001f1a <MFRC522_ComMF522>
 8002102:	4603      	mov	r3, r0
 8002104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((status == 0) && (Length == 0x10))
 8002108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <MFRC522_Request+0x6a>
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	2b10      	cmp	r3, #16
 8002114:	d107      	bne.n	8002126 <MFRC522_Request+0x6a>
                {    
                *pTagType     = Buffer[0];
 8002116:	7b3a      	ldrb	r2, [r7, #12]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	701a      	strb	r2, [r3, #0]
                *(pTagType+1) = Buffer[1];
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	7b7a      	ldrb	r2, [r7, #13]
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	e002      	b.n	800212c <MFRC522_Request+0x70>
                }
        else
                {   
                status = 2;   
 8002126:	2302      	movs	r3, #2
 8002128:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
        return status;
 800212c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
        }  
 8002130:	4618      	mov	r0, r3
 8002132:	3728      	adds	r7, #40	@ 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <MFRC522_Anticoll>:
/////////////////////////////////////////////////////////////////////////////// 
unsigned char MFRC522_Anticoll(unsigned char *pSnr)
        {
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	@ 0x30
 800213c:	af02      	add	r7, sp, #8
 800213e:	6078      	str	r0, [r7, #4]
        unsigned char status;
        unsigned char i,snr_check=0;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        unsigned int  Length;
        unsigned char Buffer[MAXRLEN]; 
        ClearBitMask(0x08,0x08);
 8002146:	2108      	movs	r1, #8
 8002148:	2008      	movs	r0, #8
 800214a:	f7ff fec4 	bl	8001ed6 <ClearBitMask>
        RFID_write(0x0D,0x00);
 800214e:	2100      	movs	r1, #0
 8002150:	200d      	movs	r0, #13
 8002152:	f7ff fe43 	bl	8001ddc <RFID_write>
        ClearBitMask(0x0E,0x80); 
 8002156:	2180      	movs	r1, #128	@ 0x80
 8002158:	200e      	movs	r0, #14
 800215a:	f7ff febc 	bl	8001ed6 <ClearBitMask>
        Buffer[0] = 0x93;
 800215e:	2393      	movs	r3, #147	@ 0x93
 8002160:	733b      	strb	r3, [r7, #12]
        Buffer[1] = 0x20; 
 8002162:	2320      	movs	r3, #32
 8002164:	737b      	strb	r3, [r7, #13]
        status = MFRC522_ComMF522(0x0C,Buffer,2,Buffer,&Length); 
 8002166:	f107 020c 	add.w	r2, r7, #12
 800216a:	f107 010c 	add.w	r1, r7, #12
 800216e:	f107 0320 	add.w	r3, r7, #32
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	2202      	movs	r2, #2
 8002178:	200c      	movs	r0, #12
 800217a:	f7ff fece 	bl	8001f1a <MFRC522_ComMF522>
 800217e:	4603      	mov	r3, r0
 8002180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status == 0)
 8002184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002188:	2b00      	cmp	r3, #0
 800218a:	d12f      	bne.n	80021ec <MFRC522_Anticoll+0xb4>
                {
                for (i=0; i<5; i++)
 800218c:	2300      	movs	r3, #0
 800218e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002192:	e01a      	b.n	80021ca <MFRC522_Anticoll+0x92>
                        {   
                        *(pSnr+i)  = Buffer[i];
 8002194:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002198:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	440b      	add	r3, r1
 80021a0:	3228      	adds	r2, #40	@ 0x28
 80021a2:	443a      	add	r2, r7
 80021a4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80021a8:	701a      	strb	r2, [r3, #0]
                        snr_check ^= Buffer[i];
 80021aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80021ae:	3328      	adds	r3, #40	@ 0x28
 80021b0:	443b      	add	r3, r7
 80021b2:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 80021b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80021ba:	4053      	eors	r3, r2
 80021bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                for (i=0; i<5; i++)
 80021c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80021c4:	3301      	adds	r3, #1
 80021c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80021ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d9e0      	bls.n	8002194 <MFRC522_Anticoll+0x5c>
                        }
                if (snr_check != Buffer[i])
 80021d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80021d6:	3328      	adds	r3, #40	@ 0x28
 80021d8:	443b      	add	r3, r7
 80021da:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80021de:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d002      	beq.n	80021ec <MFRC522_Anticoll+0xb4>
                        {   
                        status = 2;    
 80021e6:	2302      	movs	r3, #2
 80021e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                        }
                } 
        SetBitMask(0x0E,0x80);
 80021ec:	2180      	movs	r1, #128	@ 0x80
 80021ee:	200e      	movs	r0, #14
 80021f0:	f7ff fe54 	bl	8001e9c <SetBitMask>
        return status;
 80021f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
        }
 80021f8:	4618      	mov	r0, r3
 80021fa:	3728      	adds	r7, #40	@ 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <CalulateCRC>:
///////////////////////////////////////////////////////////////////////////////
void CalulateCRC(unsigned char *pIndata,unsigned char len,unsigned char *pOutData)
        {
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	460b      	mov	r3, r1
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	72fb      	strb	r3, [r7, #11]
        unsigned char i,n;
        ClearBitMask(0x05,0x04);
 800220e:	2104      	movs	r1, #4
 8002210:	2005      	movs	r0, #5
 8002212:	f7ff fe60 	bl	8001ed6 <ClearBitMask>
        RFID_write(0x01,0x00);
 8002216:	2100      	movs	r1, #0
 8002218:	2001      	movs	r0, #1
 800221a:	f7ff fddf 	bl	8001ddc <RFID_write>
        SetBitMask(0x0A,0x80);
 800221e:	2180      	movs	r1, #128	@ 0x80
 8002220:	200a      	movs	r0, #10
 8002222:	f7ff fe3b 	bl	8001e9c <SetBitMask>
        for (i=0; i<len; i++)
 8002226:	2300      	movs	r3, #0
 8002228:	75fb      	strb	r3, [r7, #23]
 800222a:	e00a      	b.n	8002242 <CalulateCRC+0x42>
                {   
                RFID_write(0x09, *(pIndata+i));   
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4413      	add	r3, r2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	2009      	movs	r0, #9
 8002238:	f7ff fdd0 	bl	8001ddc <RFID_write>
        for (i=0; i<len; i++)
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	3301      	adds	r3, #1
 8002240:	75fb      	strb	r3, [r7, #23]
 8002242:	7dfa      	ldrb	r2, [r7, #23]
 8002244:	7afb      	ldrb	r3, [r7, #11]
 8002246:	429a      	cmp	r2, r3
 8002248:	d3f0      	bcc.n	800222c <CalulateCRC+0x2c>
                }
        RFID_write(0x01, 0x03);
 800224a:	2103      	movs	r1, #3
 800224c:	2001      	movs	r0, #1
 800224e:	f7ff fdc5 	bl	8001ddc <RFID_write>
        i = 0xFF;
 8002252:	23ff      	movs	r3, #255	@ 0xff
 8002254:	75fb      	strb	r3, [r7, #23]
        do 
                {
                n = RFID_read(0x05);
 8002256:	2005      	movs	r0, #5
 8002258:	f7ff fdee 	bl	8001e38 <RFID_read>
 800225c:	4603      	mov	r3, r0
 800225e:	75bb      	strb	r3, [r7, #22]
                i--;
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	3b01      	subs	r3, #1
 8002264:	75fb      	strb	r3, [r7, #23]
                }
        while ((i!=0) && !(n&0x04));
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <CalulateCRC+0x76>
 800226c:	7dbb      	ldrb	r3, [r7, #22]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ef      	beq.n	8002256 <CalulateCRC+0x56>
        pOutData[0] = RFID_read(0x22);
 8002276:	2022      	movs	r0, #34	@ 0x22
 8002278:	f7ff fdde 	bl	8001e38 <RFID_read>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	701a      	strb	r2, [r3, #0]
        pOutData[1] = RFID_read(0x21);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	1c5c      	adds	r4, r3, #1
 8002288:	2021      	movs	r0, #33	@ 0x21
 800228a:	f7ff fdd5 	bl	8001e38 <RFID_read>
 800228e:	4603      	mov	r3, r0
 8002290:	7023      	strb	r3, [r4, #0]
        }
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}

0800229a <MFRC522_Halt>:
///////////////////////////////////////////////////////////////////////////////
unsigned char MFRC522_Halt(void)
        { 
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
        unsigned char Buffer[MAXRLEN];  
        Buffer[0] = 0x50;
 80022a0:	2350      	movs	r3, #80	@ 0x50
 80022a2:	713b      	strb	r3, [r7, #4]
        Buffer[1] = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	717b      	strb	r3, [r7, #5]
        CalulateCRC(Buffer,2,&Buffer[2]);  
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	1c9a      	adds	r2, r3, #2
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2102      	movs	r1, #2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ffa5 	bl	8002200 <CalulateCRC>
        return 0; 
 80022b6:	2300      	movs	r3, #0
        } 
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <MFRC522_AntennaOn>:
///////////////////////////////////////////////////////////////////////////////
void MFRC522_AntennaOn(void)
        {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
        unsigned char i;
        i = RFID_read(0x14);
 80022c6:	2014      	movs	r0, #20
 80022c8:	f7ff fdb6 	bl	8001e38 <RFID_read>
 80022cc:	4603      	mov	r3, r0
 80022ce:	71fb      	strb	r3, [r7, #7]
        if (!(i & 0x03))
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <MFRC522_AntennaOn+0x22>
                {
                SetBitMask(0x14, 0x03);
 80022da:	2103      	movs	r1, #3
 80022dc:	2014      	movs	r0, #20
 80022de:	f7ff fddd 	bl	8001e9c <SetBitMask>
                }
        }
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <MFRC522_AntennaOff>:
///////////////////////////////////////////////////////////////////////////////
void MFRC522_AntennaOff(void)
        {
 80022ea:	b580      	push	{r7, lr}
 80022ec:	af00      	add	r7, sp, #0
        ClearBitMask(0x14, 0x03);
 80022ee:	2103      	movs	r1, #3
 80022f0:	2014      	movs	r0, #20
 80022f2:	f7ff fdf0 	bl	8001ed6 <ClearBitMask>
        } 
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}

080022fa <MFRC522_Reset>:
void MFRC522_Reset(void)
        { 
 80022fa:	b580      	push	{r7, lr}
 80022fc:	af00      	add	r7, sp, #0
//        HAL_Delay (1);
//        MFRC522_RST_EN;
//        HAL_Delay (1);
//        MFRC522_RST_DIS;
//        HAL_Delay (1);
        RFID_write( 0x01, 0x0F ); 
 80022fe:	210f      	movs	r1, #15
 8002300:	2001      	movs	r0, #1
 8002302:	f7ff fd6b 	bl	8001ddc <RFID_write>
        HAL_Delay (1);
 8002306:	2001      	movs	r0, #1
 8002308:	f000 fb0a 	bl	8002920 <HAL_Delay>
        } 				
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}

08002310 <MFRC522_init>:
unsigned char MFRC522_init(
GPIO_TypeDef *_MO_PORT,uint16_t _MO_pin,   //nap vao 4 chan dieu khien
GPIO_TypeDef *_MI_PORT,uint16_t _MI_pin,
GPIO_TypeDef *_SCK_PORT,uint16_t _SCK_pin,
GPIO_TypeDef *_CS_PORT ,uint16_t _CS_pin)
{       
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	461a      	mov	r2, r3
 800231c:	460b      	mov	r3, r1
 800231e:	817b      	strh	r3, [r7, #10]
 8002320:	4613      	mov	r3, r2
 8002322:	813b      	strh	r3, [r7, #8]
	      MOSI_PORT=_MO_PORT;
 8002324:	4a25      	ldr	r2, [pc, #148]	@ (80023bc <MFRC522_init+0xac>)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6013      	str	r3, [r2, #0]
				MISO_PORT=_MI_PORT;
 800232a:	4a25      	ldr	r2, [pc, #148]	@ (80023c0 <MFRC522_init+0xb0>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6013      	str	r3, [r2, #0]
				SCK_PORT=_SCK_PORT;
 8002330:	4a24      	ldr	r2, [pc, #144]	@ (80023c4 <MFRC522_init+0xb4>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	6013      	str	r3, [r2, #0]
				CS_PORT=_CS_PORT;
 8002336:	4a24      	ldr	r2, [pc, #144]	@ (80023c8 <MFRC522_init+0xb8>)
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	6013      	str	r3, [r2, #0]
	   
	      MOSI_PIN = _MO_pin;
 800233c:	4a23      	ldr	r2, [pc, #140]	@ (80023cc <MFRC522_init+0xbc>)
 800233e:	897b      	ldrh	r3, [r7, #10]
 8002340:	8013      	strh	r3, [r2, #0]
	      MISO_PIN = _MI_pin;
 8002342:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <MFRC522_init+0xc0>)
 8002344:	893b      	ldrh	r3, [r7, #8]
 8002346:	8013      	strh	r3, [r2, #0]
	      SCK_PIN = _SCK_pin;
 8002348:	4a22      	ldr	r2, [pc, #136]	@ (80023d4 <MFRC522_init+0xc4>)
 800234a:	8bbb      	ldrh	r3, [r7, #28]
 800234c:	8013      	strh	r3, [r2, #0]
	      CS_PIN = _CS_pin;
 800234e:	4a22      	ldr	r2, [pc, #136]	@ (80023d8 <MFRC522_init+0xc8>)
 8002350:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002352:	8013      	strh	r3, [r2, #0]
	
        SW_SPI_init();					
 8002354:	f7ff fc86 	bl	8001c64 <SW_SPI_init>
        MFRC522_CS_DIS;
 8002358:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <MFRC522_init+0xb8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1e      	ldr	r2, [pc, #120]	@ (80023d8 <MFRC522_init+0xc8>)
 800235e:	8811      	ldrh	r1, [r2, #0]
 8002360:	2201      	movs	r2, #1
 8002362:	4618      	mov	r0, r3
 8002364:	f001 f84b 	bl	80033fe <HAL_GPIO_WritePin>
				MFRC522_Reset(); 
 8002368:	f7ff ffc7 	bl	80022fa <MFRC522_Reset>
        HAL_Delay(1); 
 800236c:	2001      	movs	r0, #1
 800236e:	f000 fad7 	bl	8002920 <HAL_Delay>
        RFID_write(0x11,0x3D);        
 8002372:	213d      	movs	r1, #61	@ 0x3d
 8002374:	2011      	movs	r0, #17
 8002376:	f7ff fd31 	bl	8001ddc <RFID_write>
        RFID_write(0x2D,30);           
 800237a:	211e      	movs	r1, #30
 800237c:	202d      	movs	r0, #45	@ 0x2d
 800237e:	f7ff fd2d 	bl	8001ddc <RFID_write>
        RFID_write(0x2C,0);
 8002382:	2100      	movs	r1, #0
 8002384:	202c      	movs	r0, #44	@ 0x2c
 8002386:	f7ff fd29 	bl	8001ddc <RFID_write>
        RFID_write(0x2A,0x8D);
 800238a:	218d      	movs	r1, #141	@ 0x8d
 800238c:	202a      	movs	r0, #42	@ 0x2a
 800238e:	f7ff fd25 	bl	8001ddc <RFID_write>
        RFID_write(0x2B,0x3E);
 8002392:	213e      	movs	r1, #62	@ 0x3e
 8002394:	202b      	movs	r0, #43	@ 0x2b
 8002396:	f7ff fd21 	bl	8001ddc <RFID_write>
        RFID_write(0x15,0x40); 
 800239a:	2140      	movs	r1, #64	@ 0x40
 800239c:	2015      	movs	r0, #21
 800239e:	f7ff fd1d 	bl	8001ddc <RFID_write>
        MFRC522_AntennaOff(); 
 80023a2:	f7ff ffa2 	bl	80022ea <MFRC522_AntennaOff>
        MFRC522_AntennaOn();  
 80023a6:	f7ff ff8b 	bl	80022c0 <MFRC522_AntennaOn>
        HAL_Delay(200); 
 80023aa:	20c8      	movs	r0, #200	@ 0xc8
 80023ac:	f000 fab8 	bl	8002920 <HAL_Delay>
        return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000604 	.word	0x20000604
 80023c0:	2000060c 	.word	0x2000060c
 80023c4:	20000614 	.word	0x20000614
 80023c8:	2000061c 	.word	0x2000061c
 80023cc:	20000608 	.word	0x20000608
 80023d0:	20000610 	.word	0x20000610
 80023d4:	20000618 	.word	0x20000618
 80023d8:	20000620 	.word	0x20000620

080023dc <isCard>:
///////////////////////////////////////////////////////////////////////////////
unsigned char isCard(void) 
        {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
        unsigned char status;
        unsigned char id[16];
        status = MFRC522_Request(0x52, id); 
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	2052      	movs	r0, #82	@ 0x52
 80023e8:	f7ff fe68 	bl	80020bc <MFRC522_Request>
 80023ec:	4603      	mov	r3, r0
 80023ee:	75fb      	strb	r3, [r7, #23]
        if(status == 0) 
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <isCard+0x1e>
                {
                return 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <isCard+0x20>
                } 
        else  
                { 
                return 0; 
 80023fa:	2300      	movs	r3, #0
                }
        }  
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <readCardSerial>:
///////////////////////////////////////////////////////////////////////////////
unsigned char readCardSerial(uint8_t *id)
{ 
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	unsigned char status;
	unsigned char str[16]; 
	status = MFRC522_Anticoll(str);
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fe91 	bl	8002138 <MFRC522_Anticoll>
 8002416:	4603      	mov	r3, r0
 8002418:	77fb      	strb	r3, [r7, #31]
	memcpy(id, str, 5); 
 800241a:	f107 030c 	add.w	r3, r7, #12
 800241e:	2205      	movs	r2, #5
 8002420:	4619      	mov	r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f003 fa26 	bl	8005874 <memcpy>
	if (status == 0) 
 8002428:	7ffb      	ldrb	r3, [r7, #31]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <readCardSerial+0x2e>
					{ 
						return 1; 
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <readCardSerial+0x30>
					} 
	else 
					{ 
						return 0; 
 8002432:	2300      	movs	r3, #0
					}
} 
 8002434:	4618      	mov	r0, r3
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002442:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <HAL_MspInit+0x5c>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	4a14      	ldr	r2, [pc, #80]	@ (8002498 <HAL_MspInit+0x5c>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6193      	str	r3, [r2, #24]
 800244e:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <HAL_MspInit+0x5c>)
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b0f      	ldr	r3, [pc, #60]	@ (8002498 <HAL_MspInit+0x5c>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4a0e      	ldr	r2, [pc, #56]	@ (8002498 <HAL_MspInit+0x5c>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002464:	61d3      	str	r3, [r2, #28]
 8002466:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <HAL_MspInit+0x5c>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002472:	4b0a      	ldr	r3, [pc, #40]	@ (800249c <HAL_MspInit+0x60>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	4a04      	ldr	r2, [pc, #16]	@ (800249c <HAL_MspInit+0x60>)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	40021000 	.word	0x40021000
 800249c:	40010000 	.word	0x40010000

080024a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002528 <HAL_SPI_MspInit+0x88>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d12f      	bne.n	8002520 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024c0:	4b1a      	ldr	r3, [pc, #104]	@ (800252c <HAL_SPI_MspInit+0x8c>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a19      	ldr	r2, [pc, #100]	@ (800252c <HAL_SPI_MspInit+0x8c>)
 80024c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b17      	ldr	r3, [pc, #92]	@ (800252c <HAL_SPI_MspInit+0x8c>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	4b14      	ldr	r3, [pc, #80]	@ (800252c <HAL_SPI_MspInit+0x8c>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4a13      	ldr	r2, [pc, #76]	@ (800252c <HAL_SPI_MspInit+0x8c>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	6193      	str	r3, [r2, #24]
 80024e4:	4b11      	ldr	r3, [pc, #68]	@ (800252c <HAL_SPI_MspInit+0x8c>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 80024f0:	23a0      	movs	r3, #160	@ 0xa0
 80024f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	4619      	mov	r1, r3
 8002502:	480b      	ldr	r0, [pc, #44]	@ (8002530 <HAL_SPI_MspInit+0x90>)
 8002504:	f000 fde0 	bl	80030c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 8002508:	2340      	movs	r3, #64	@ 0x40
 800250a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	4619      	mov	r1, r3
 800251a:	4805      	ldr	r0, [pc, #20]	@ (8002530 <HAL_SPI_MspInit+0x90>)
 800251c:	f000 fdd4 	bl	80030c8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002520:	bf00      	nop
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40013000 	.word	0x40013000
 800252c:	40021000 	.word	0x40021000
 8002530:	40010800 	.word	0x40010800

08002534 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002544:	d133      	bne.n	80025ae <HAL_TIM_PWM_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002546:	4b1c      	ldr	r3, [pc, #112]	@ (80025b8 <HAL_TIM_PWM_MspInit+0x84>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	4a1b      	ldr	r2, [pc, #108]	@ (80025b8 <HAL_TIM_PWM_MspInit+0x84>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	61d3      	str	r3, [r2, #28]
 8002552:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <HAL_TIM_PWM_MspInit+0x84>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800255e:	4b17      	ldr	r3, [pc, #92]	@ (80025bc <HAL_TIM_PWM_MspInit+0x88>)
 8002560:	4a17      	ldr	r2, [pc, #92]	@ (80025c0 <HAL_TIM_PWM_MspInit+0x8c>)
 8002562:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002564:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <HAL_TIM_PWM_MspInit+0x88>)
 8002566:	2210      	movs	r2, #16
 8002568:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800256a:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <HAL_TIM_PWM_MspInit+0x88>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002570:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <HAL_TIM_PWM_MspInit+0x88>)
 8002572:	2280      	movs	r2, #128	@ 0x80
 8002574:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002576:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <HAL_TIM_PWM_MspInit+0x88>)
 8002578:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800257c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800257e:	4b0f      	ldr	r3, [pc, #60]	@ (80025bc <HAL_TIM_PWM_MspInit+0x88>)
 8002580:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002584:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002586:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <HAL_TIM_PWM_MspInit+0x88>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800258c:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <HAL_TIM_PWM_MspInit+0x88>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002592:	480a      	ldr	r0, [pc, #40]	@ (80025bc <HAL_TIM_PWM_MspInit+0x88>)
 8002594:	f000 faf6 	bl	8002b84 <HAL_DMA_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 800259e:	f7ff fb5b 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a05      	ldr	r2, [pc, #20]	@ (80025bc <HAL_TIM_PWM_MspInit+0x88>)
 80025a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80025a8:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <HAL_TIM_PWM_MspInit+0x88>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	20000104 	.word	0x20000104
 80025c0:	40020058 	.word	0x40020058

080025c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e2:	d117      	bne.n	8002614 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e4:	4b0d      	ldr	r3, [pc, #52]	@ (800261c <HAL_TIM_MspPostInit+0x58>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a0c      	ldr	r2, [pc, #48]	@ (800261c <HAL_TIM_MspPostInit+0x58>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <HAL_TIM_MspPostInit+0x58>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025fc:	2301      	movs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2302      	movs	r3, #2
 8002606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	f107 0310 	add.w	r3, r7, #16
 800260c:	4619      	mov	r1, r3
 800260e:	4804      	ldr	r0, [pc, #16]	@ (8002620 <HAL_TIM_MspPostInit+0x5c>)
 8002610:	f000 fd5a 	bl	80030c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002614:	bf00      	nop
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	40010800 	.word	0x40010800

08002624 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	@ 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0318 	add.w	r3, r7, #24
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a40      	ldr	r2, [pc, #256]	@ (8002740 <HAL_UART_MspInit+0x11c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d13a      	bne.n	80026ba <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002644:	4b3f      	ldr	r3, [pc, #252]	@ (8002744 <HAL_UART_MspInit+0x120>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	4a3e      	ldr	r2, [pc, #248]	@ (8002744 <HAL_UART_MspInit+0x120>)
 800264a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800264e:	6193      	str	r3, [r2, #24]
 8002650:	4b3c      	ldr	r3, [pc, #240]	@ (8002744 <HAL_UART_MspInit+0x120>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265c:	4b39      	ldr	r3, [pc, #228]	@ (8002744 <HAL_UART_MspInit+0x120>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	4a38      	ldr	r2, [pc, #224]	@ (8002744 <HAL_UART_MspInit+0x120>)
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	6193      	str	r3, [r2, #24]
 8002668:	4b36      	ldr	r3, [pc, #216]	@ (8002744 <HAL_UART_MspInit+0x120>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 0318 	add.w	r3, r7, #24
 8002686:	4619      	mov	r1, r3
 8002688:	482f      	ldr	r0, [pc, #188]	@ (8002748 <HAL_UART_MspInit+0x124>)
 800268a:	f000 fd1d 	bl	80030c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800268e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	f107 0318 	add.w	r3, r7, #24
 80026a0:	4619      	mov	r1, r3
 80026a2:	4829      	ldr	r0, [pc, #164]	@ (8002748 <HAL_UART_MspInit+0x124>)
 80026a4:	f000 fd10 	bl	80030c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	2025      	movs	r0, #37	@ 0x25
 80026ae:	f000 fa32 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026b2:	2025      	movs	r0, #37	@ 0x25
 80026b4:	f000 fa4b 	bl	8002b4e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80026b8:	e03e      	b.n	8002738 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a23      	ldr	r2, [pc, #140]	@ (800274c <HAL_UART_MspInit+0x128>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d139      	bne.n	8002738 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002744 <HAL_UART_MspInit+0x120>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002744 <HAL_UART_MspInit+0x120>)
 80026ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ce:	61d3      	str	r3, [r2, #28]
 80026d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002744 <HAL_UART_MspInit+0x120>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026dc:	4b19      	ldr	r3, [pc, #100]	@ (8002744 <HAL_UART_MspInit+0x120>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a18      	ldr	r2, [pc, #96]	@ (8002744 <HAL_UART_MspInit+0x120>)
 80026e2:	f043 0308 	orr.w	r3, r3, #8
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <HAL_UART_MspInit+0x120>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f107 0318 	add.w	r3, r7, #24
 8002706:	4619      	mov	r1, r3
 8002708:	4811      	ldr	r0, [pc, #68]	@ (8002750 <HAL_UART_MspInit+0x12c>)
 800270a:	f000 fcdd 	bl	80030c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800270e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271c:	f107 0318 	add.w	r3, r7, #24
 8002720:	4619      	mov	r1, r3
 8002722:	480b      	ldr	r0, [pc, #44]	@ (8002750 <HAL_UART_MspInit+0x12c>)
 8002724:	f000 fcd0 	bl	80030c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002728:	2200      	movs	r2, #0
 800272a:	2100      	movs	r1, #0
 800272c:	2027      	movs	r0, #39	@ 0x27
 800272e:	f000 f9f2 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002732:	2027      	movs	r0, #39	@ 0x27
 8002734:	f000 fa0b 	bl	8002b4e <HAL_NVIC_EnableIRQ>
}
 8002738:	bf00      	nop
 800273a:	3728      	adds	r7, #40	@ 0x28
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40013800 	.word	0x40013800
 8002744:	40021000 	.word	0x40021000
 8002748:	40010800 	.word	0x40010800
 800274c:	40004800 	.word	0x40004800
 8002750:	40010c00 	.word	0x40010c00

08002754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <NMI_Handler+0x4>

0800275c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <HardFault_Handler+0x4>

08002764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <MemManage_Handler+0x4>

0800276c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <BusFault_Handler+0x4>

08002774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <UsageFault_Handler+0x4>

0800277c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a4:	f000 f8a0 	bl	80028e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT2_Pin);
 80027b0:	2008      	movs	r0, #8
 80027b2:	f000 fe3d 	bl	8003430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}

080027ba <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT1_Pin);
 80027be:	2010      	movs	r0, #16
 80027c0:	f000 fe36 	bl	8003430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80027cc:	4802      	ldr	r0, [pc, #8]	@ (80027d8 <DMA1_Channel5_IRQHandler+0x10>)
 80027ce:	f000 fb47 	bl	8002e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000104 	.word	0x20000104

080027dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027e0:	4802      	ldr	r0, [pc, #8]	@ (80027ec <USART1_IRQHandler+0x10>)
 80027e2:	f002 fab1 	bl	8004d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000148 	.word	0x20000148

080027f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027f4:	4802      	ldr	r0, [pc, #8]	@ (8002800 <USART3_IRQHandler+0x10>)
 80027f6:	f002 faa7 	bl	8004d48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000190 	.word	0x20000190

08002804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002810:	f7ff fff8 	bl	8002804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002814:	480b      	ldr	r0, [pc, #44]	@ (8002844 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002816:	490c      	ldr	r1, [pc, #48]	@ (8002848 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002818:	4a0c      	ldr	r2, [pc, #48]	@ (800284c <LoopFillZerobss+0x16>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800281c:	e002      	b.n	8002824 <LoopCopyDataInit>

0800281e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002822:	3304      	adds	r3, #4

08002824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002828:	d3f9      	bcc.n	800281e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282a:	4a09      	ldr	r2, [pc, #36]	@ (8002850 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800282c:	4c09      	ldr	r4, [pc, #36]	@ (8002854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002830:	e001      	b.n	8002836 <LoopFillZerobss>

08002832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002834:	3204      	adds	r2, #4

08002836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002838:	d3fb      	bcc.n	8002832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800283a:	f002 fff7 	bl	800582c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800283e:	f7fe fcaf 	bl	80011a0 <main>
  bx lr
 8002842:	4770      	bx	lr
  ldr r0, =_sdata
 8002844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002848:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 800284c:	08006b30 	.word	0x08006b30
  ldr r2, =_sbss
 8002850:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8002854:	20000628 	.word	0x20000628

08002858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002858:	e7fe      	b.n	8002858 <ADC1_2_IRQHandler>
	...

0800285c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002860:	4b08      	ldr	r3, [pc, #32]	@ (8002884 <HAL_Init+0x28>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a07      	ldr	r2, [pc, #28]	@ (8002884 <HAL_Init+0x28>)
 8002866:	f043 0310 	orr.w	r3, r3, #16
 800286a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800286c:	2003      	movs	r0, #3
 800286e:	f000 f947 	bl	8002b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002872:	200f      	movs	r0, #15
 8002874:	f000 f808 	bl	8002888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002878:	f7ff fde0 	bl	800243c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40022000 	.word	0x40022000

08002888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002890:	4b12      	ldr	r3, [pc, #72]	@ (80028dc <HAL_InitTick+0x54>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <HAL_InitTick+0x58>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800289e:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f95f 	bl	8002b6a <HAL_SYSTICK_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00e      	b.n	80028d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b0f      	cmp	r3, #15
 80028ba:	d80a      	bhi.n	80028d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028bc:	2200      	movs	r2, #0
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	f000 f927 	bl	8002b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c8:	4a06      	ldr	r2, [pc, #24]	@ (80028e4 <HAL_InitTick+0x5c>)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	2000003c 	.word	0x2000003c
 80028e0:	20000044 	.word	0x20000044
 80028e4:	20000040 	.word	0x20000040

080028e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <HAL_IncTick+0x1c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <HAL_IncTick+0x20>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	4a03      	ldr	r2, [pc, #12]	@ (8002908 <HAL_IncTick+0x20>)
 80028fa:	6013      	str	r3, [r2, #0]
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	20000044 	.word	0x20000044
 8002908:	20000624 	.word	0x20000624

0800290c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return uwTick;
 8002910:	4b02      	ldr	r3, [pc, #8]	@ (800291c <HAL_GetTick+0x10>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	20000624 	.word	0x20000624

08002920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff fff0 	bl	800290c <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d005      	beq.n	8002946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800293a:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <HAL_Delay+0x44>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002946:	bf00      	nop
 8002948:	f7ff ffe0 	bl	800290c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	429a      	cmp	r2, r3
 8002956:	d8f7      	bhi.n	8002948 <HAL_Delay+0x28>
  {
  }
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000044 	.word	0x20000044

08002968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299a:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	60d3      	str	r3, [r2, #12]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <__NVIC_GetPriorityGrouping+0x18>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	db0b      	blt.n	80029f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4906      	ldr	r1, [pc, #24]	@ (8002a00 <__NVIC_EnableIRQ+0x34>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2001      	movs	r0, #1
 80029ee:	fa00 f202 	lsl.w	r2, r0, r2
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100

08002a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	db0a      	blt.n	8002a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	490c      	ldr	r1, [pc, #48]	@ (8002a50 <__NVIC_SetPriority+0x4c>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	440b      	add	r3, r1
 8002a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a2c:	e00a      	b.n	8002a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4908      	ldr	r1, [pc, #32]	@ (8002a54 <__NVIC_SetPriority+0x50>)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	3b04      	subs	r3, #4
 8002a3c:	0112      	lsls	r2, r2, #4
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	440b      	add	r3, r1
 8002a42:	761a      	strb	r2, [r3, #24]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000e100 	.word	0xe000e100
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	@ 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f1c3 0307 	rsb	r3, r3, #7
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	bf28      	it	cs
 8002a76:	2304      	movcs	r3, #4
 8002a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d902      	bls.n	8002a88 <NVIC_EncodePriority+0x30>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3b03      	subs	r3, #3
 8002a86:	e000      	b.n	8002a8a <NVIC_EncodePriority+0x32>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	43d9      	mvns	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	4313      	orrs	r3, r2
         );
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3724      	adds	r7, #36	@ 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002acc:	d301      	bcc.n	8002ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00f      	b.n	8002af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <SysTick_Config+0x40>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ada:	210f      	movs	r1, #15
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae0:	f7ff ff90 	bl	8002a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <SysTick_Config+0x40>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aea:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <SysTick_Config+0x40>)
 8002aec:	2207      	movs	r2, #7
 8002aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	e000e010 	.word	0xe000e010

08002b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ff2d 	bl	8002968 <__NVIC_SetPriorityGrouping>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b28:	f7ff ff42 	bl	80029b0 <__NVIC_GetPriorityGrouping>
 8002b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	6978      	ldr	r0, [r7, #20]
 8002b34:	f7ff ff90 	bl	8002a58 <NVIC_EncodePriority>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff5f 	bl	8002a04 <__NVIC_SetPriority>
}
 8002b46:	bf00      	nop
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff35 	bl	80029cc <__NVIC_EnableIRQ>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ffa2 	bl	8002abc <SysTick_Config>
 8002b78:	4603      	mov	r3, r0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e043      	b.n	8002c22 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b22      	ldr	r3, [pc, #136]	@ (8002c2c <HAL_DMA_Init+0xa8>)
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a22      	ldr	r2, [pc, #136]	@ (8002c30 <HAL_DMA_Init+0xac>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	009a      	lsls	r2, r3, #2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c34 <HAL_DMA_Init+0xb0>)
 8002bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002bce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002bd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	bffdfff8 	.word	0xbffdfff8
 8002c30:	cccccccd 	.word	0xcccccccd
 8002c34:	40020000 	.word	0x40020000

08002c38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_DMA_Start_IT+0x20>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e04b      	b.n	8002cf0 <HAL_DMA_Start_IT+0xb8>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d13a      	bne.n	8002ce2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f9eb 	bl	800306c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 020e 	orr.w	r2, r2, #14
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e00f      	b.n	8002cd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0204 	bic.w	r2, r2, #4
 8002cbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 020a 	orr.w	r2, r2, #10
 8002cce:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e005      	b.n	8002cee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
 8002cec:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d008      	beq.n	8002d22 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2204      	movs	r2, #4
 8002d14:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e020      	b.n	8002d64 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 020e 	bic.w	r2, r2, #14
 8002d30:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
	...

08002d70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d005      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	e051      	b.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 020e 	bic.w	r2, r2, #14
 8002da2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a22      	ldr	r2, [pc, #136]	@ (8002e44 <HAL_DMA_Abort_IT+0xd4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d029      	beq.n	8002e12 <HAL_DMA_Abort_IT+0xa2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a21      	ldr	r2, [pc, #132]	@ (8002e48 <HAL_DMA_Abort_IT+0xd8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x9e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002e4c <HAL_DMA_Abort_IT+0xdc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01a      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x98>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e50 <HAL_DMA_Abort_IT+0xe0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d012      	beq.n	8002e02 <HAL_DMA_Abort_IT+0x92>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <HAL_DMA_Abort_IT+0xe4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00a      	beq.n	8002dfc <HAL_DMA_Abort_IT+0x8c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1b      	ldr	r2, [pc, #108]	@ (8002e58 <HAL_DMA_Abort_IT+0xe8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d102      	bne.n	8002df6 <HAL_DMA_Abort_IT+0x86>
 8002df0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002df4:	e00e      	b.n	8002e14 <HAL_DMA_Abort_IT+0xa4>
 8002df6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dfa:	e00b      	b.n	8002e14 <HAL_DMA_Abort_IT+0xa4>
 8002dfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e00:	e008      	b.n	8002e14 <HAL_DMA_Abort_IT+0xa4>
 8002e02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e06:	e005      	b.n	8002e14 <HAL_DMA_Abort_IT+0xa4>
 8002e08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e0c:	e002      	b.n	8002e14 <HAL_DMA_Abort_IT+0xa4>
 8002e0e:	2310      	movs	r3, #16
 8002e10:	e000      	b.n	8002e14 <HAL_DMA_Abort_IT+0xa4>
 8002e12:	2301      	movs	r3, #1
 8002e14:	4a11      	ldr	r2, [pc, #68]	@ (8002e5c <HAL_DMA_Abort_IT+0xec>)
 8002e16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3
    } 
  }
  return status;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40020008 	.word	0x40020008
 8002e48:	4002001c 	.word	0x4002001c
 8002e4c:	40020030 	.word	0x40020030
 8002e50:	40020044 	.word	0x40020044
 8002e54:	40020058 	.word	0x40020058
 8002e58:	4002006c 	.word	0x4002006c
 8002e5c:	40020000 	.word	0x40020000

08002e60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d04f      	beq.n	8002f28 <HAL_DMA_IRQHandler+0xc8>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d04a      	beq.n	8002f28 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d107      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a66      	ldr	r2, [pc, #408]	@ (8003050 <HAL_DMA_IRQHandler+0x1f0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d029      	beq.n	8002f0e <HAL_DMA_IRQHandler+0xae>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a65      	ldr	r2, [pc, #404]	@ (8003054 <HAL_DMA_IRQHandler+0x1f4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d022      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xaa>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a63      	ldr	r2, [pc, #396]	@ (8003058 <HAL_DMA_IRQHandler+0x1f8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01a      	beq.n	8002f04 <HAL_DMA_IRQHandler+0xa4>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a62      	ldr	r2, [pc, #392]	@ (800305c <HAL_DMA_IRQHandler+0x1fc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d012      	beq.n	8002efe <HAL_DMA_IRQHandler+0x9e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a60      	ldr	r2, [pc, #384]	@ (8003060 <HAL_DMA_IRQHandler+0x200>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x98>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a5f      	ldr	r2, [pc, #380]	@ (8003064 <HAL_DMA_IRQHandler+0x204>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d102      	bne.n	8002ef2 <HAL_DMA_IRQHandler+0x92>
 8002eec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ef0:	e00e      	b.n	8002f10 <HAL_DMA_IRQHandler+0xb0>
 8002ef2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ef6:	e00b      	b.n	8002f10 <HAL_DMA_IRQHandler+0xb0>
 8002ef8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002efc:	e008      	b.n	8002f10 <HAL_DMA_IRQHandler+0xb0>
 8002efe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f02:	e005      	b.n	8002f10 <HAL_DMA_IRQHandler+0xb0>
 8002f04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f08:	e002      	b.n	8002f10 <HAL_DMA_IRQHandler+0xb0>
 8002f0a:	2340      	movs	r3, #64	@ 0x40
 8002f0c:	e000      	b.n	8002f10 <HAL_DMA_IRQHandler+0xb0>
 8002f0e:	2304      	movs	r3, #4
 8002f10:	4a55      	ldr	r2, [pc, #340]	@ (8003068 <HAL_DMA_IRQHandler+0x208>)
 8002f12:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8094 	beq.w	8003046 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f26:	e08e      	b.n	8003046 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d056      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x186>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d051      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 020a 	bic.w	r2, r2, #10
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a38      	ldr	r2, [pc, #224]	@ (8003050 <HAL_DMA_IRQHandler+0x1f0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d029      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x166>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a37      	ldr	r2, [pc, #220]	@ (8003054 <HAL_DMA_IRQHandler+0x1f4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d022      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x162>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a35      	ldr	r2, [pc, #212]	@ (8003058 <HAL_DMA_IRQHandler+0x1f8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01a      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x15c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a34      	ldr	r2, [pc, #208]	@ (800305c <HAL_DMA_IRQHandler+0x1fc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d012      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x156>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a32      	ldr	r2, [pc, #200]	@ (8003060 <HAL_DMA_IRQHandler+0x200>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00a      	beq.n	8002fb0 <HAL_DMA_IRQHandler+0x150>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a31      	ldr	r2, [pc, #196]	@ (8003064 <HAL_DMA_IRQHandler+0x204>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d102      	bne.n	8002faa <HAL_DMA_IRQHandler+0x14a>
 8002fa4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002fa8:	e00e      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x168>
 8002faa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fae:	e00b      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x168>
 8002fb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fb4:	e008      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x168>
 8002fb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fba:	e005      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x168>
 8002fbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fc0:	e002      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x168>
 8002fc2:	2320      	movs	r3, #32
 8002fc4:	e000      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x168>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	4a27      	ldr	r2, [pc, #156]	@ (8003068 <HAL_DMA_IRQHandler+0x208>)
 8002fca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d034      	beq.n	8003046 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fe4:	e02f      	b.n	8003046 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	2208      	movs	r2, #8
 8002fec:	409a      	lsls	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d028      	beq.n	8003048 <HAL_DMA_IRQHandler+0x1e8>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d023      	beq.n	8003048 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 020e 	bic.w	r2, r2, #14
 800300e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003018:	2101      	movs	r1, #1
 800301a:	fa01 f202 	lsl.w	r2, r1, r2
 800301e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	2b00      	cmp	r3, #0
 800303c:	d004      	beq.n	8003048 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4798      	blx	r3
    }
  }
  return;
 8003046:	bf00      	nop
 8003048:	bf00      	nop
}
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40020008 	.word	0x40020008
 8003054:	4002001c 	.word	0x4002001c
 8003058:	40020030 	.word	0x40020030
 800305c:	40020044 	.word	0x40020044
 8003060:	40020058 	.word	0x40020058
 8003064:	4002006c 	.word	0x4002006c
 8003068:	40020000 	.word	0x40020000

0800306c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003082:	2101      	movs	r1, #1
 8003084:	fa01 f202 	lsl.w	r2, r1, r2
 8003088:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b10      	cmp	r3, #16
 8003098:	d108      	bne.n	80030ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030aa:	e007      	b.n	80030bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	60da      	str	r2, [r3, #12]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b08b      	sub	sp, #44	@ 0x2c
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030d6:	2300      	movs	r3, #0
 80030d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030da:	e169      	b.n	80033b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030dc:	2201      	movs	r2, #1
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	f040 8158 	bne.w	80033aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a9a      	ldr	r2, [pc, #616]	@ (8003368 <HAL_GPIO_Init+0x2a0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d05e      	beq.n	80031c2 <HAL_GPIO_Init+0xfa>
 8003104:	4a98      	ldr	r2, [pc, #608]	@ (8003368 <HAL_GPIO_Init+0x2a0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d875      	bhi.n	80031f6 <HAL_GPIO_Init+0x12e>
 800310a:	4a98      	ldr	r2, [pc, #608]	@ (800336c <HAL_GPIO_Init+0x2a4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d058      	beq.n	80031c2 <HAL_GPIO_Init+0xfa>
 8003110:	4a96      	ldr	r2, [pc, #600]	@ (800336c <HAL_GPIO_Init+0x2a4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d86f      	bhi.n	80031f6 <HAL_GPIO_Init+0x12e>
 8003116:	4a96      	ldr	r2, [pc, #600]	@ (8003370 <HAL_GPIO_Init+0x2a8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d052      	beq.n	80031c2 <HAL_GPIO_Init+0xfa>
 800311c:	4a94      	ldr	r2, [pc, #592]	@ (8003370 <HAL_GPIO_Init+0x2a8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d869      	bhi.n	80031f6 <HAL_GPIO_Init+0x12e>
 8003122:	4a94      	ldr	r2, [pc, #592]	@ (8003374 <HAL_GPIO_Init+0x2ac>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d04c      	beq.n	80031c2 <HAL_GPIO_Init+0xfa>
 8003128:	4a92      	ldr	r2, [pc, #584]	@ (8003374 <HAL_GPIO_Init+0x2ac>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d863      	bhi.n	80031f6 <HAL_GPIO_Init+0x12e>
 800312e:	4a92      	ldr	r2, [pc, #584]	@ (8003378 <HAL_GPIO_Init+0x2b0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d046      	beq.n	80031c2 <HAL_GPIO_Init+0xfa>
 8003134:	4a90      	ldr	r2, [pc, #576]	@ (8003378 <HAL_GPIO_Init+0x2b0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d85d      	bhi.n	80031f6 <HAL_GPIO_Init+0x12e>
 800313a:	2b12      	cmp	r3, #18
 800313c:	d82a      	bhi.n	8003194 <HAL_GPIO_Init+0xcc>
 800313e:	2b12      	cmp	r3, #18
 8003140:	d859      	bhi.n	80031f6 <HAL_GPIO_Init+0x12e>
 8003142:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <HAL_GPIO_Init+0x80>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	080031c3 	.word	0x080031c3
 800314c:	0800319d 	.word	0x0800319d
 8003150:	080031af 	.word	0x080031af
 8003154:	080031f1 	.word	0x080031f1
 8003158:	080031f7 	.word	0x080031f7
 800315c:	080031f7 	.word	0x080031f7
 8003160:	080031f7 	.word	0x080031f7
 8003164:	080031f7 	.word	0x080031f7
 8003168:	080031f7 	.word	0x080031f7
 800316c:	080031f7 	.word	0x080031f7
 8003170:	080031f7 	.word	0x080031f7
 8003174:	080031f7 	.word	0x080031f7
 8003178:	080031f7 	.word	0x080031f7
 800317c:	080031f7 	.word	0x080031f7
 8003180:	080031f7 	.word	0x080031f7
 8003184:	080031f7 	.word	0x080031f7
 8003188:	080031f7 	.word	0x080031f7
 800318c:	080031a5 	.word	0x080031a5
 8003190:	080031b9 	.word	0x080031b9
 8003194:	4a79      	ldr	r2, [pc, #484]	@ (800337c <HAL_GPIO_Init+0x2b4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800319a:	e02c      	b.n	80031f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	623b      	str	r3, [r7, #32]
          break;
 80031a2:	e029      	b.n	80031f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	3304      	adds	r3, #4
 80031aa:	623b      	str	r3, [r7, #32]
          break;
 80031ac:	e024      	b.n	80031f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	3308      	adds	r3, #8
 80031b4:	623b      	str	r3, [r7, #32]
          break;
 80031b6:	e01f      	b.n	80031f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	330c      	adds	r3, #12
 80031be:	623b      	str	r3, [r7, #32]
          break;
 80031c0:	e01a      	b.n	80031f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031ca:	2304      	movs	r3, #4
 80031cc:	623b      	str	r3, [r7, #32]
          break;
 80031ce:	e013      	b.n	80031f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d105      	bne.n	80031e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031d8:	2308      	movs	r3, #8
 80031da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	611a      	str	r2, [r3, #16]
          break;
 80031e2:	e009      	b.n	80031f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031e4:	2308      	movs	r3, #8
 80031e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	615a      	str	r2, [r3, #20]
          break;
 80031ee:	e003      	b.n	80031f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031f0:	2300      	movs	r3, #0
 80031f2:	623b      	str	r3, [r7, #32]
          break;
 80031f4:	e000      	b.n	80031f8 <HAL_GPIO_Init+0x130>
          break;
 80031f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2bff      	cmp	r3, #255	@ 0xff
 80031fc:	d801      	bhi.n	8003202 <HAL_GPIO_Init+0x13a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	e001      	b.n	8003206 <HAL_GPIO_Init+0x13e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3304      	adds	r3, #4
 8003206:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2bff      	cmp	r3, #255	@ 0xff
 800320c:	d802      	bhi.n	8003214 <HAL_GPIO_Init+0x14c>
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	e002      	b.n	800321a <HAL_GPIO_Init+0x152>
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	3b08      	subs	r3, #8
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	210f      	movs	r1, #15
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	401a      	ands	r2, r3
 800322c:	6a39      	ldr	r1, [r7, #32]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	431a      	orrs	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 80b1 	beq.w	80033aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003248:	4b4d      	ldr	r3, [pc, #308]	@ (8003380 <HAL_GPIO_Init+0x2b8>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	4a4c      	ldr	r2, [pc, #304]	@ (8003380 <HAL_GPIO_Init+0x2b8>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6193      	str	r3, [r2, #24]
 8003254:	4b4a      	ldr	r3, [pc, #296]	@ (8003380 <HAL_GPIO_Init+0x2b8>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003260:	4a48      	ldr	r2, [pc, #288]	@ (8003384 <HAL_GPIO_Init+0x2bc>)
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	3302      	adds	r3, #2
 8003268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800326c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	220f      	movs	r2, #15
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a40      	ldr	r2, [pc, #256]	@ (8003388 <HAL_GPIO_Init+0x2c0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <HAL_GPIO_Init+0x1ec>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a3f      	ldr	r2, [pc, #252]	@ (800338c <HAL_GPIO_Init+0x2c4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00d      	beq.n	80032b0 <HAL_GPIO_Init+0x1e8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3e      	ldr	r2, [pc, #248]	@ (8003390 <HAL_GPIO_Init+0x2c8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <HAL_GPIO_Init+0x1e4>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3d      	ldr	r2, [pc, #244]	@ (8003394 <HAL_GPIO_Init+0x2cc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d101      	bne.n	80032a8 <HAL_GPIO_Init+0x1e0>
 80032a4:	2303      	movs	r3, #3
 80032a6:	e006      	b.n	80032b6 <HAL_GPIO_Init+0x1ee>
 80032a8:	2304      	movs	r3, #4
 80032aa:	e004      	b.n	80032b6 <HAL_GPIO_Init+0x1ee>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e002      	b.n	80032b6 <HAL_GPIO_Init+0x1ee>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_GPIO_Init+0x1ee>
 80032b4:	2300      	movs	r3, #0
 80032b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b8:	f002 0203 	and.w	r2, r2, #3
 80032bc:	0092      	lsls	r2, r2, #2
 80032be:	4093      	lsls	r3, r2
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032c6:	492f      	ldr	r1, [pc, #188]	@ (8003384 <HAL_GPIO_Init+0x2bc>)
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	3302      	adds	r3, #2
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d006      	beq.n	80032ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	492c      	ldr	r1, [pc, #176]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]
 80032ec:	e006      	b.n	80032fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	4928      	ldr	r1, [pc, #160]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d006      	beq.n	8003316 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003308:	4b23      	ldr	r3, [pc, #140]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	4922      	ldr	r1, [pc, #136]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	60cb      	str	r3, [r1, #12]
 8003314:	e006      	b.n	8003324 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003316:	4b20      	ldr	r3, [pc, #128]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	43db      	mvns	r3, r3
 800331e:	491e      	ldr	r1, [pc, #120]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 8003320:	4013      	ands	r3, r2
 8003322:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d006      	beq.n	800333e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003330:	4b19      	ldr	r3, [pc, #100]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	4918      	ldr	r1, [pc, #96]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]
 800333c:	e006      	b.n	800334c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800333e:	4b16      	ldr	r3, [pc, #88]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	43db      	mvns	r3, r3
 8003346:	4914      	ldr	r1, [pc, #80]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 8003348:	4013      	ands	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d021      	beq.n	800339c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003358:	4b0f      	ldr	r3, [pc, #60]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	490e      	ldr	r1, [pc, #56]	@ (8003398 <HAL_GPIO_Init+0x2d0>)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	e021      	b.n	80033aa <HAL_GPIO_Init+0x2e2>
 8003366:	bf00      	nop
 8003368:	10320000 	.word	0x10320000
 800336c:	10310000 	.word	0x10310000
 8003370:	10220000 	.word	0x10220000
 8003374:	10210000 	.word	0x10210000
 8003378:	10120000 	.word	0x10120000
 800337c:	10110000 	.word	0x10110000
 8003380:	40021000 	.word	0x40021000
 8003384:	40010000 	.word	0x40010000
 8003388:	40010800 	.word	0x40010800
 800338c:	40010c00 	.word	0x40010c00
 8003390:	40011000 	.word	0x40011000
 8003394:	40011400 	.word	0x40011400
 8003398:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_GPIO_Init+0x304>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	4909      	ldr	r1, [pc, #36]	@ (80033cc <HAL_GPIO_Init+0x304>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ac:	3301      	adds	r3, #1
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f47f ae8e 	bne.w	80030dc <HAL_GPIO_Init+0x14>
  }
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	372c      	adds	r7, #44	@ 0x2c
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	40010400 	.word	0x40010400

080033d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
 80033ec:	e001      	b.n	80033f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	807b      	strh	r3, [r7, #2]
 800340a:	4613      	mov	r3, r2
 800340c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800340e:	787b      	ldrb	r3, [r7, #1]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003414:	887a      	ldrh	r2, [r7, #2]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800341a:	e003      	b.n	8003424 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800341c:	887b      	ldrh	r3, [r7, #2]
 800341e:	041a      	lsls	r2, r3, #16
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	611a      	str	r2, [r3, #16]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
	...

08003430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800343a:	4b08      	ldr	r3, [pc, #32]	@ (800345c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003446:	4a05      	ldr	r2, [pc, #20]	@ (800345c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f806 	bl	8003460 <HAL_GPIO_EXTI_Callback>
  }
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40010400 	.word	0x40010400

08003460 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e272      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8087 	beq.w	80035a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003494:	4b92      	ldr	r3, [pc, #584]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b04      	cmp	r3, #4
 800349e:	d00c      	beq.n	80034ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034a0:	4b8f      	ldr	r3, [pc, #572]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d112      	bne.n	80034d2 <HAL_RCC_OscConfig+0x5e>
 80034ac:	4b8c      	ldr	r3, [pc, #560]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b8:	d10b      	bne.n	80034d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ba:	4b89      	ldr	r3, [pc, #548]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d06c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x12c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d168      	bne.n	80035a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e24c      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034da:	d106      	bne.n	80034ea <HAL_RCC_OscConfig+0x76>
 80034dc:	4b80      	ldr	r3, [pc, #512]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a7f      	ldr	r2, [pc, #508]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	e02e      	b.n	8003548 <HAL_RCC_OscConfig+0xd4>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0x98>
 80034f2:	4b7b      	ldr	r3, [pc, #492]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a7a      	ldr	r2, [pc, #488]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b78      	ldr	r3, [pc, #480]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a77      	ldr	r2, [pc, #476]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003504:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e01d      	b.n	8003548 <HAL_RCC_OscConfig+0xd4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0xbc>
 8003516:	4b72      	ldr	r3, [pc, #456]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a71      	ldr	r2, [pc, #452]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800351c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4b6f      	ldr	r3, [pc, #444]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6e      	ldr	r2, [pc, #440]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e00b      	b.n	8003548 <HAL_RCC_OscConfig+0xd4>
 8003530:	4b6b      	ldr	r3, [pc, #428]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a6a      	ldr	r2, [pc, #424]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4b68      	ldr	r3, [pc, #416]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a67      	ldr	r2, [pc, #412]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003546:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d013      	beq.n	8003578 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7ff f9dc 	bl	800290c <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003558:	f7ff f9d8 	bl	800290c <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	@ 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e200      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b5d      	ldr	r3, [pc, #372]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0xe4>
 8003576:	e014      	b.n	80035a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7ff f9c8 	bl	800290c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7ff f9c4 	bl	800290c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	@ 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1ec      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	4b53      	ldr	r3, [pc, #332]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x10c>
 800359e:	e000      	b.n	80035a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d063      	beq.n	8003676 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ae:	4b4c      	ldr	r3, [pc, #304]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035ba:	4b49      	ldr	r3, [pc, #292]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d11c      	bne.n	8003600 <HAL_RCC_OscConfig+0x18c>
 80035c6:	4b46      	ldr	r3, [pc, #280]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d116      	bne.n	8003600 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	4b43      	ldr	r3, [pc, #268]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x176>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1c0      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	4b3d      	ldr	r3, [pc, #244]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4939      	ldr	r1, [pc, #228]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	e03a      	b.n	8003676 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003608:	4b36      	ldr	r3, [pc, #216]	@ (80036e4 <HAL_RCC_OscConfig+0x270>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7ff f97d 	bl	800290c <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003616:	f7ff f979 	bl	800290c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1a1      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003628:	4b2d      	ldr	r3, [pc, #180]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b2a      	ldr	r3, [pc, #168]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4927      	ldr	r1, [pc, #156]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e015      	b.n	8003676 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364a:	4b26      	ldr	r3, [pc, #152]	@ (80036e4 <HAL_RCC_OscConfig+0x270>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7ff f95c 	bl	800290c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003658:	f7ff f958 	bl	800290c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e180      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	4b1d      	ldr	r3, [pc, #116]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d03a      	beq.n	80036f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d019      	beq.n	80036be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368a:	4b17      	ldr	r3, [pc, #92]	@ (80036e8 <HAL_RCC_OscConfig+0x274>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003690:	f7ff f93c 	bl	800290c <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003698:	f7ff f938 	bl	800290c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e160      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036b6:	2001      	movs	r0, #1
 80036b8:	f000 face 	bl	8003c58 <RCC_Delay>
 80036bc:	e01c      	b.n	80036f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036be:	4b0a      	ldr	r3, [pc, #40]	@ (80036e8 <HAL_RCC_OscConfig+0x274>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c4:	f7ff f922 	bl	800290c <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ca:	e00f      	b.n	80036ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036cc:	f7ff f91e 	bl	800290c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d908      	bls.n	80036ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e146      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	42420000 	.word	0x42420000
 80036e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	4b92      	ldr	r3, [pc, #584]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e9      	bne.n	80036cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80a6 	beq.w	8003852 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370a:	4b8b      	ldr	r3, [pc, #556]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10d      	bne.n	8003732 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003716:	4b88      	ldr	r3, [pc, #544]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	4a87      	ldr	r2, [pc, #540]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003720:	61d3      	str	r3, [r2, #28]
 8003722:	4b85      	ldr	r3, [pc, #532]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372e:	2301      	movs	r3, #1
 8003730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003732:	4b82      	ldr	r3, [pc, #520]	@ (800393c <HAL_RCC_OscConfig+0x4c8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d118      	bne.n	8003770 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373e:	4b7f      	ldr	r3, [pc, #508]	@ (800393c <HAL_RCC_OscConfig+0x4c8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7e      	ldr	r2, [pc, #504]	@ (800393c <HAL_RCC_OscConfig+0x4c8>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374a:	f7ff f8df 	bl	800290c <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003752:	f7ff f8db 	bl	800290c <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b64      	cmp	r3, #100	@ 0x64
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e103      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003764:	4b75      	ldr	r3, [pc, #468]	@ (800393c <HAL_RCC_OscConfig+0x4c8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x312>
 8003778:	4b6f      	ldr	r3, [pc, #444]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4a6e      	ldr	r2, [pc, #440]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6213      	str	r3, [r2, #32]
 8003784:	e02d      	b.n	80037e2 <HAL_RCC_OscConfig+0x36e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x334>
 800378e:	4b6a      	ldr	r3, [pc, #424]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4a69      	ldr	r2, [pc, #420]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	6213      	str	r3, [r2, #32]
 800379a:	4b67      	ldr	r3, [pc, #412]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	4a66      	ldr	r2, [pc, #408]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	6213      	str	r3, [r2, #32]
 80037a6:	e01c      	b.n	80037e2 <HAL_RCC_OscConfig+0x36e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d10c      	bne.n	80037ca <HAL_RCC_OscConfig+0x356>
 80037b0:	4b61      	ldr	r3, [pc, #388]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4a60      	ldr	r2, [pc, #384]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	f043 0304 	orr.w	r3, r3, #4
 80037ba:	6213      	str	r3, [r2, #32]
 80037bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6213      	str	r3, [r2, #32]
 80037c8:	e00b      	b.n	80037e2 <HAL_RCC_OscConfig+0x36e>
 80037ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6213      	str	r3, [r2, #32]
 80037d6:	4b58      	ldr	r3, [pc, #352]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4a57      	ldr	r2, [pc, #348]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	f023 0304 	bic.w	r3, r3, #4
 80037e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d015      	beq.n	8003816 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ea:	f7ff f88f 	bl	800290c <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7ff f88b 	bl	800290c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e0b1      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003808:	4b4b      	ldr	r3, [pc, #300]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ee      	beq.n	80037f2 <HAL_RCC_OscConfig+0x37e>
 8003814:	e014      	b.n	8003840 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003816:	f7ff f879 	bl	800290c <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7ff f875 	bl	800290c <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e09b      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003834:	4b40      	ldr	r3, [pc, #256]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ee      	bne.n	800381e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d105      	bne.n	8003852 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003846:	4b3c      	ldr	r3, [pc, #240]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	4a3b      	ldr	r2, [pc, #236]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003850:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8087 	beq.w	800396a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800385c:	4b36      	ldr	r3, [pc, #216]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d061      	beq.n	800392c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d146      	bne.n	80038fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003870:	4b33      	ldr	r3, [pc, #204]	@ (8003940 <HAL_RCC_OscConfig+0x4cc>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003876:	f7ff f849 	bl	800290c <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387e:	f7ff f845 	bl	800290c <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e06d      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003890:	4b29      	ldr	r3, [pc, #164]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f0      	bne.n	800387e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a4:	d108      	bne.n	80038b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038a6:	4b24      	ldr	r3, [pc, #144]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	4921      	ldr	r1, [pc, #132]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a19      	ldr	r1, [r3, #32]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	430b      	orrs	r3, r1
 80038ca:	491b      	ldr	r1, [pc, #108]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003940 <HAL_RCC_OscConfig+0x4cc>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7ff f819 	bl	800290c <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038de:	f7ff f815 	bl	800290c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e03d      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f0:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x46a>
 80038fc:	e035      	b.n	800396a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fe:	4b10      	ldr	r3, [pc, #64]	@ (8003940 <HAL_RCC_OscConfig+0x4cc>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7ff f802 	bl	800290c <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390c:	f7fe fffe 	bl	800290c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e026      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391e:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x498>
 800392a:	e01e      	b.n	800396a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e019      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
 8003938:	40021000 	.word	0x40021000
 800393c:	40007000 	.word	0x40007000
 8003940:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003944:	4b0b      	ldr	r3, [pc, #44]	@ (8003974 <HAL_RCC_OscConfig+0x500>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	429a      	cmp	r2, r3
 8003956:	d106      	bne.n	8003966 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d001      	beq.n	800396a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000

08003978 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0d0      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d910      	bls.n	80039bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b67      	ldr	r3, [pc, #412]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 0207 	bic.w	r2, r3, #7
 80039a2:	4965      	ldr	r1, [pc, #404]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b63      	ldr	r3, [pc, #396]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0b8      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d020      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d4:	4b59      	ldr	r3, [pc, #356]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a58      	ldr	r2, [pc, #352]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039ec:	4b53      	ldr	r3, [pc, #332]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a52      	ldr	r2, [pc, #328]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80039f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f8:	4b50      	ldr	r3, [pc, #320]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	494d      	ldr	r1, [pc, #308]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d040      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	4b47      	ldr	r3, [pc, #284]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d115      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e07f      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a36:	4b41      	ldr	r3, [pc, #260]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e073      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	4b3d      	ldr	r3, [pc, #244]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e06b      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a56:	4b39      	ldr	r3, [pc, #228]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4936      	ldr	r1, [pc, #216]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a68:	f7fe ff50 	bl	800290c <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7fe ff4c 	bl	800290c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e053      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	4b2d      	ldr	r3, [pc, #180]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 020c 	and.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1eb      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a98:	4b27      	ldr	r3, [pc, #156]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d210      	bcs.n	8003ac8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b24      	ldr	r3, [pc, #144]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	4922      	ldr	r1, [pc, #136]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b20      	ldr	r3, [pc, #128]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e032      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad4:	4b19      	ldr	r3, [pc, #100]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4916      	ldr	r1, [pc, #88]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003af2:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	490e      	ldr	r1, [pc, #56]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b06:	f000 f821 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	490a      	ldr	r1, [pc, #40]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003b18:	5ccb      	ldrb	r3, [r1, r3]
 8003b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1e:	4a09      	ldr	r2, [pc, #36]	@ (8003b44 <HAL_RCC_ClockConfig+0x1cc>)
 8003b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b22:	4b09      	ldr	r3, [pc, #36]	@ (8003b48 <HAL_RCC_ClockConfig+0x1d0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe feae 	bl	8002888 <HAL_InitTick>

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40022000 	.word	0x40022000
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	08006920 	.word	0x08006920
 8003b44:	2000003c 	.word	0x2000003c
 8003b48:	20000040 	.word	0x20000040

08003b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	2300      	movs	r3, #0
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b66:	4b1e      	ldr	r3, [pc, #120]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d002      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x30>
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x36>
 8003b7a:	e027      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b7c:	4b19      	ldr	r3, [pc, #100]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b7e:	613b      	str	r3, [r7, #16]
      break;
 8003b80:	e027      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	0c9b      	lsrs	r3, r3, #18
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	4a17      	ldr	r2, [pc, #92]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b8c:	5cd3      	ldrb	r3, [r2, r3]
 8003b8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d010      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b9a:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	0c5b      	lsrs	r3, r3, #17
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	4a11      	ldr	r2, [pc, #68]	@ (8003bec <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ba6:	5cd3      	ldrb	r3, [r2, r3]
 8003ba8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a0d      	ldr	r2, [pc, #52]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bae:	fb03 f202 	mul.w	r2, r3, r2
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	e004      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	613b      	str	r3, [r7, #16]
      break;
 8003bca:	e002      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bce:	613b      	str	r3, [r7, #16]
      break;
 8003bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd2:	693b      	ldr	r3, [r7, #16]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	007a1200 	.word	0x007a1200
 8003be8:	08006938 	.word	0x08006938
 8003bec:	08006948 	.word	0x08006948
 8003bf0:	003d0900 	.word	0x003d0900

08003bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b02      	ldr	r3, [pc, #8]	@ (8003c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	2000003c 	.word	0x2000003c

08003c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c0c:	f7ff fff2 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	4903      	ldr	r1, [pc, #12]	@ (8003c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c1e:	5ccb      	ldrb	r3, [r1, r3]
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	08006930 	.word	0x08006930

08003c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c34:	f7ff ffde 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b05      	ldr	r3, [pc, #20]	@ (8003c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	0adb      	lsrs	r3, r3, #11
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4903      	ldr	r1, [pc, #12]	@ (8003c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000
 8003c54:	08006930 	.word	0x08006930

08003c58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c60:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <RCC_Delay+0x34>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0a      	ldr	r2, [pc, #40]	@ (8003c90 <RCC_Delay+0x38>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	0a5b      	lsrs	r3, r3, #9
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c74:	bf00      	nop
  }
  while (Delay --);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1e5a      	subs	r2, r3, #1
 8003c7a:	60fa      	str	r2, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f9      	bne.n	8003c74 <RCC_Delay+0x1c>
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	2000003c 	.word	0x2000003c
 8003c90:	10624dd3 	.word	0x10624dd3

08003c94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e076      	b.n	8003d94 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d108      	bne.n	8003cc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cb6:	d009      	beq.n	8003ccc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	61da      	str	r2, [r3, #28]
 8003cbe:	e005      	b.n	8003ccc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fe fbda 	bl	80024a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d50:	ea42 0103 	orr.w	r1, r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	0c1a      	lsrs	r2, r3, #16
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f002 0204 	and.w	r2, r2, #4
 8003d72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e041      	b.n	8003e32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fe fbb6 	bl	8002534 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	f000 fc3c 	bl	8004658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e022      	b.n	8003eae <HAL_TIM_PWM_Start_DMA+0x72>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d109      	bne.n	8003e82 <HAL_TIM_PWM_Start_DMA+0x46>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	bf0c      	ite	eq
 8003e7a:	2301      	moveq	r3, #1
 8003e7c:	2300      	movne	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	e015      	b.n	8003eae <HAL_TIM_PWM_Start_DMA+0x72>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d109      	bne.n	8003e9c <HAL_TIM_PWM_Start_DMA+0x60>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	e008      	b.n	8003eae <HAL_TIM_PWM_Start_DMA+0x72>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e153      	b.n	800415e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <HAL_TIM_PWM_Start_DMA+0x94>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	e022      	b.n	8003f16 <HAL_TIM_PWM_Start_DMA+0xda>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d109      	bne.n	8003eea <HAL_TIM_PWM_Start_DMA+0xae>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	bf0c      	ite	eq
 8003ee2:	2301      	moveq	r3, #1
 8003ee4:	2300      	movne	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	e015      	b.n	8003f16 <HAL_TIM_PWM_Start_DMA+0xda>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d109      	bne.n	8003f04 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	e008      	b.n	8003f16 <HAL_TIM_PWM_Start_DMA+0xda>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	bf0c      	ite	eq
 8003f10:	2301      	moveq	r3, #1
 8003f12:	2300      	movne	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d024      	beq.n	8003f64 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_TIM_PWM_Start_DMA+0xea>
 8003f20:	887b      	ldrh	r3, [r7, #2]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e119      	b.n	800415e <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d104      	bne.n	8003f3a <HAL_TIM_PWM_Start_DMA+0xfe>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f38:	e016      	b.n	8003f68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d104      	bne.n	8003f4a <HAL_TIM_PWM_Start_DMA+0x10e>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f48:	e00e      	b.n	8003f68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d104      	bne.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x11e>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f58:	e006      	b.n	8003f68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f62:	e001      	b.n	8003f68 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0fa      	b.n	800415e <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	f200 80ae 	bhi.w	80040cc <HAL_TIM_PWM_Start_DMA+0x290>
 8003f70:	a201      	add	r2, pc, #4	@ (adr r2, 8003f78 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003fad 	.word	0x08003fad
 8003f7c:	080040cd 	.word	0x080040cd
 8003f80:	080040cd 	.word	0x080040cd
 8003f84:	080040cd 	.word	0x080040cd
 8003f88:	08003ff5 	.word	0x08003ff5
 8003f8c:	080040cd 	.word	0x080040cd
 8003f90:	080040cd 	.word	0x080040cd
 8003f94:	080040cd 	.word	0x080040cd
 8003f98:	0800403d 	.word	0x0800403d
 8003f9c:	080040cd 	.word	0x080040cd
 8003fa0:	080040cd 	.word	0x080040cd
 8003fa4:	080040cd 	.word	0x080040cd
 8003fa8:	08004085 	.word	0x08004085
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	4a6d      	ldr	r2, [pc, #436]	@ (8004168 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003fb2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	4a6c      	ldr	r2, [pc, #432]	@ (800416c <HAL_TIM_PWM_Start_DMA+0x330>)
 8003fba:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	4a6b      	ldr	r2, [pc, #428]	@ (8004170 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3334      	adds	r3, #52	@ 0x34
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	887b      	ldrh	r3, [r7, #2]
 8003fd4:	f7fe fe30 	bl	8002c38 <HAL_DMA_Start_IT>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e0bd      	b.n	800415e <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff0:	60da      	str	r2, [r3, #12]
      break;
 8003ff2:	e06e      	b.n	80040d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff8:	4a5b      	ldr	r2, [pc, #364]	@ (8004168 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003ffa:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004000:	4a5a      	ldr	r2, [pc, #360]	@ (800416c <HAL_TIM_PWM_Start_DMA+0x330>)
 8004002:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004008:	4a59      	ldr	r2, [pc, #356]	@ (8004170 <HAL_TIM_PWM_Start_DMA+0x334>)
 800400a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3338      	adds	r3, #56	@ 0x38
 8004018:	461a      	mov	r2, r3
 800401a:	887b      	ldrh	r3, [r7, #2]
 800401c:	f7fe fe0c 	bl	8002c38 <HAL_DMA_Start_IT>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e099      	b.n	800415e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004038:	60da      	str	r2, [r3, #12]
      break;
 800403a:	e04a      	b.n	80040d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004040:	4a49      	ldr	r2, [pc, #292]	@ (8004168 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004042:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	4a48      	ldr	r2, [pc, #288]	@ (800416c <HAL_TIM_PWM_Start_DMA+0x330>)
 800404a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	4a47      	ldr	r2, [pc, #284]	@ (8004170 <HAL_TIM_PWM_Start_DMA+0x334>)
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	333c      	adds	r3, #60	@ 0x3c
 8004060:	461a      	mov	r2, r3
 8004062:	887b      	ldrh	r3, [r7, #2]
 8004064:	f7fe fde8 	bl	8002c38 <HAL_DMA_Start_IT>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e075      	b.n	800415e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004080:	60da      	str	r2, [r3, #12]
      break;
 8004082:	e026      	b.n	80040d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004088:	4a37      	ldr	r2, [pc, #220]	@ (8004168 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800408a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004090:	4a36      	ldr	r2, [pc, #216]	@ (800416c <HAL_TIM_PWM_Start_DMA+0x330>)
 8004092:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004098:	4a35      	ldr	r2, [pc, #212]	@ (8004170 <HAL_TIM_PWM_Start_DMA+0x334>)
 800409a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3340      	adds	r3, #64	@ 0x40
 80040a8:	461a      	mov	r2, r3
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	f7fe fdc4 	bl	8002c38 <HAL_DMA_Start_IT>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e051      	b.n	800415e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040c8:	60da      	str	r2, [r3, #12]
      break;
 80040ca:	e002      	b.n	80040d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	75fb      	strb	r3, [r7, #23]
      break;
 80040d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d141      	bne.n	800415c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2201      	movs	r2, #1
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fcaf 	bl	8004a44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a22      	ldr	r2, [pc, #136]	@ (8004174 <HAL_TIM_PWM_Start_DMA+0x338>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d107      	bne.n	8004100 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1b      	ldr	r2, [pc, #108]	@ (8004174 <HAL_TIM_PWM_Start_DMA+0x338>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00e      	beq.n	8004128 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004112:	d009      	beq.n	8004128 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a17      	ldr	r2, [pc, #92]	@ (8004178 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a16      	ldr	r2, [pc, #88]	@ (800417c <HAL_TIM_PWM_Start_DMA+0x340>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d111      	bne.n	800414c <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b06      	cmp	r3, #6
 8004138:	d010      	beq.n	800415c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0201 	orr.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414a:	e007      	b.n	800415c <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800415c:	7dfb      	ldrb	r3, [r7, #23]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	08004547 	.word	0x08004547
 800416c:	080045ef 	.word	0x080045ef
 8004170:	080044b5 	.word	0x080044b5
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40000400 	.word	0x40000400
 800417c:	40000800 	.word	0x40000800

08004180 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b0c      	cmp	r3, #12
 8004192:	d855      	bhi.n	8004240 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004194:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041d1 	.word	0x080041d1
 80041a0:	08004241 	.word	0x08004241
 80041a4:	08004241 	.word	0x08004241
 80041a8:	08004241 	.word	0x08004241
 80041ac:	080041ed 	.word	0x080041ed
 80041b0:	08004241 	.word	0x08004241
 80041b4:	08004241 	.word	0x08004241
 80041b8:	08004241 	.word	0x08004241
 80041bc:	08004209 	.word	0x08004209
 80041c0:	08004241 	.word	0x08004241
 80041c4:	08004241 	.word	0x08004241
 80041c8:	08004241 	.word	0x08004241
 80041cc:	08004225 	.word	0x08004225
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80041de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe fdc3 	bl	8002d70 <HAL_DMA_Abort_IT>
      break;
 80041ea:	e02c      	b.n	8004246 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe fdb5 	bl	8002d70 <HAL_DMA_Abort_IT>
      break;
 8004206:	e01e      	b.n	8004246 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004216:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe fda7 	bl	8002d70 <HAL_DMA_Abort_IT>
      break;
 8004222:	e010      	b.n	8004246 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004232:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fd99 	bl	8002d70 <HAL_DMA_Abort_IT>
      break;
 800423e:	e002      	b.n	8004246 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
      break;
 8004244:	bf00      	nop
  }

  if (status == HAL_OK)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d157      	bne.n	80042fc <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2200      	movs	r2, #0
 8004252:	6839      	ldr	r1, [r7, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fbf5 	bl	8004a44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2a      	ldr	r2, [pc, #168]	@ (8004308 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d117      	bne.n	8004294 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10f      	bne.n	8004294 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6a1a      	ldr	r2, [r3, #32]
 800427a:	f240 4344 	movw	r3, #1092	@ 0x444
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d107      	bne.n	8004294 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004292:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10f      	bne.n	80042c4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6a1a      	ldr	r2, [r3, #32]
 80042aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d107      	bne.n	80042c4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d104      	bne.n	80042d4 <HAL_TIM_PWM_Stop_DMA+0x154>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d2:	e013      	b.n	80042fc <HAL_TIM_PWM_Stop_DMA+0x17c>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d104      	bne.n	80042e4 <HAL_TIM_PWM_Stop_DMA+0x164>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042e2:	e00b      	b.n	80042fc <HAL_TIM_PWM_Stop_DMA+0x17c>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d104      	bne.n	80042f4 <HAL_TIM_PWM_Stop_DMA+0x174>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042f2:	e003      	b.n	80042fc <HAL_TIM_PWM_Stop_DMA+0x17c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40012c00 	.word	0x40012c00

0800430c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004326:	2302      	movs	r3, #2
 8004328:	e0ae      	b.n	8004488 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b0c      	cmp	r3, #12
 8004336:	f200 809f 	bhi.w	8004478 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800433a:	a201      	add	r2, pc, #4	@ (adr r2, 8004340 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800433c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004340:	08004375 	.word	0x08004375
 8004344:	08004479 	.word	0x08004479
 8004348:	08004479 	.word	0x08004479
 800434c:	08004479 	.word	0x08004479
 8004350:	080043b5 	.word	0x080043b5
 8004354:	08004479 	.word	0x08004479
 8004358:	08004479 	.word	0x08004479
 800435c:	08004479 	.word	0x08004479
 8004360:	080043f7 	.word	0x080043f7
 8004364:	08004479 	.word	0x08004479
 8004368:	08004479 	.word	0x08004479
 800436c:	08004479 	.word	0x08004479
 8004370:	08004437 	.word	0x08004437
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f9da 	bl	8004734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0208 	orr.w	r2, r2, #8
 800438e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0204 	bic.w	r2, r2, #4
 800439e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6999      	ldr	r1, [r3, #24]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	619a      	str	r2, [r3, #24]
      break;
 80043b2:	e064      	b.n	800447e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fa20 	bl	8004800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699a      	ldr	r2, [r3, #24]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6999      	ldr	r1, [r3, #24]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	021a      	lsls	r2, r3, #8
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	619a      	str	r2, [r3, #24]
      break;
 80043f4:	e043      	b.n	800447e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fa69 	bl	80048d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0208 	orr.w	r2, r2, #8
 8004410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0204 	bic.w	r2, r2, #4
 8004420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69d9      	ldr	r1, [r3, #28]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	61da      	str	r2, [r3, #28]
      break;
 8004434:	e023      	b.n	800447e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fab3 	bl	80049a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69d9      	ldr	r1, [r3, #28]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	021a      	lsls	r2, r3, #8
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	61da      	str	r2, [r3, #28]
      break;
 8004476:	e002      	b.n	800447e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	75fb      	strb	r3, [r7, #23]
      break;
 800447c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004486:	7dfb      	ldrb	r3, [r7, #23]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d107      	bne.n	80044dc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044da:	e02a      	b.n	8004532 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d107      	bne.n	80044f6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2202      	movs	r2, #2
 80044ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044f4:	e01d      	b.n	8004532 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d107      	bne.n	8004510 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2204      	movs	r2, #4
 8004504:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800450e:	e010      	b.n	8004532 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	429a      	cmp	r2, r3
 8004518:	d107      	bne.n	800452a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2208      	movs	r2, #8
 800451e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004528:	e003      	b.n	8004532 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7ff ffb5 	bl	80044a2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	771a      	strb	r2, [r3, #28]
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	429a      	cmp	r2, r3
 800455c:	d10b      	bne.n	8004576 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d136      	bne.n	80045da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004574:	e031      	b.n	80045da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d10b      	bne.n	8004598 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2202      	movs	r2, #2
 8004584:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d125      	bne.n	80045da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004596:	e020      	b.n	80045da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d10b      	bne.n	80045ba <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2204      	movs	r2, #4
 80045a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d114      	bne.n	80045da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045b8:	e00f      	b.n	80045da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d10a      	bne.n	80045da <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2208      	movs	r2, #8
 80045c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d103      	bne.n	80045da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7fc fcce 	bl	8000f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	771a      	strb	r2, [r3, #28]
}
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	429a      	cmp	r2, r3
 8004604:	d103      	bne.n	800460e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	771a      	strb	r2, [r3, #28]
 800460c:	e019      	b.n	8004642 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	429a      	cmp	r2, r3
 8004616:	d103      	bne.n	8004620 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2202      	movs	r2, #2
 800461c:	771a      	strb	r2, [r3, #28]
 800461e:	e010      	b.n	8004642 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	429a      	cmp	r2, r3
 8004628:	d103      	bne.n	8004632 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2204      	movs	r2, #4
 800462e:	771a      	strb	r2, [r3, #28]
 8004630:	e007      	b.n	8004642 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	d102      	bne.n	8004642 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2208      	movs	r2, #8
 8004640:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7ff ff24 	bl	8004490 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	771a      	strb	r2, [r3, #28]
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a2f      	ldr	r2, [pc, #188]	@ (8004728 <TIM_Base_SetConfig+0xd0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00b      	beq.n	8004688 <TIM_Base_SetConfig+0x30>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004676:	d007      	beq.n	8004688 <TIM_Base_SetConfig+0x30>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a2c      	ldr	r2, [pc, #176]	@ (800472c <TIM_Base_SetConfig+0xd4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_Base_SetConfig+0x30>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a2b      	ldr	r2, [pc, #172]	@ (8004730 <TIM_Base_SetConfig+0xd8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d108      	bne.n	800469a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a22      	ldr	r2, [pc, #136]	@ (8004728 <TIM_Base_SetConfig+0xd0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00b      	beq.n	80046ba <TIM_Base_SetConfig+0x62>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a8:	d007      	beq.n	80046ba <TIM_Base_SetConfig+0x62>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a1f      	ldr	r2, [pc, #124]	@ (800472c <TIM_Base_SetConfig+0xd4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_Base_SetConfig+0x62>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004730 <TIM_Base_SetConfig+0xd8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d108      	bne.n	80046cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004728 <TIM_Base_SetConfig+0xd0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d103      	bne.n	8004700 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f023 0201 	bic.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	611a      	str	r2, [r3, #16]
  }
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40000400 	.word	0x40000400
 8004730:	40000800 	.word	0x40000800

08004734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f023 0201 	bic.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0303 	bic.w	r3, r3, #3
 800476a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 0302 	bic.w	r3, r3, #2
 800477c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a1c      	ldr	r2, [pc, #112]	@ (80047fc <TIM_OC1_SetConfig+0xc8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10c      	bne.n	80047aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0308 	bic.w	r3, r3, #8
 8004796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f023 0304 	bic.w	r3, r3, #4
 80047a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a13      	ldr	r2, [pc, #76]	@ (80047fc <TIM_OC1_SetConfig+0xc8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d111      	bne.n	80047d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	621a      	str	r2, [r3, #32]
}
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40012c00 	.word	0x40012c00

08004800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	f023 0210 	bic.w	r2, r3, #16
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800482e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f023 0320 	bic.w	r3, r3, #32
 800484a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a1d      	ldr	r2, [pc, #116]	@ (80048d0 <TIM_OC2_SetConfig+0xd0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d10d      	bne.n	800487c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800487a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a14      	ldr	r2, [pc, #80]	@ (80048d0 <TIM_OC2_SetConfig+0xd0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d113      	bne.n	80048ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800488a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004892:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr
 80048d0:	40012c00 	.word	0x40012c00

080048d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0303 	bic.w	r3, r3, #3
 800490a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800491c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a1d      	ldr	r2, [pc, #116]	@ (80049a4 <TIM_OC3_SetConfig+0xd0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d10d      	bne.n	800494e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800494c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a14      	ldr	r2, [pc, #80]	@ (80049a4 <TIM_OC3_SetConfig+0xd0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d113      	bne.n	800497e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800495c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	621a      	str	r2, [r3, #32]
}
 8004998:	bf00      	nop
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40012c00 	.word	0x40012c00

080049a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	031b      	lsls	r3, r3, #12
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0f      	ldr	r2, [pc, #60]	@ (8004a40 <TIM_OC4_SetConfig+0x98>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d109      	bne.n	8004a1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	019b      	lsls	r3, r3, #6
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	40012c00 	.word	0x40012c00

08004a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2201      	movs	r2, #1
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a1a      	ldr	r2, [r3, #32]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	401a      	ands	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a1a      	ldr	r2, [r3, #32]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	621a      	str	r2, [r3, #32]
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e046      	b.n	8004b32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a16      	ldr	r2, [pc, #88]	@ (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00e      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af0:	d009      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a12      	ldr	r2, [pc, #72]	@ (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d004      	beq.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a10      	ldr	r2, [pc, #64]	@ (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d10c      	bne.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr
 8004b3c:	40012c00 	.word	0x40012c00
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40000800 	.word	0x40000800

08004b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e042      	b.n	8004be0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd fd58 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2224      	movs	r2, #36	@ 0x24
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fdb7 	bl	8005700 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08a      	sub	sp, #40	@ 0x28
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d175      	bne.n	8004cf4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_UART_Transmit+0x2c>
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e06e      	b.n	8004cf6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2221      	movs	r2, #33	@ 0x21
 8004c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c26:	f7fd fe71 	bl	800290c <HAL_GetTick>
 8004c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	88fa      	ldrh	r2, [r7, #6]
 8004c30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	88fa      	ldrh	r2, [r7, #6]
 8004c36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c40:	d108      	bne.n	8004c54 <HAL_UART_Transmit+0x6c>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d104      	bne.n	8004c54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	e003      	b.n	8004c5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c5c:	e02e      	b.n	8004cbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	2180      	movs	r1, #128	@ 0x80
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fb1c 	bl	80052a6 <UART_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e03a      	b.n	8004cf6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10b      	bne.n	8004c9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	3302      	adds	r3, #2
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	e007      	b.n	8004cae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	781a      	ldrb	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	3301      	adds	r3, #1
 8004cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1cb      	bne.n	8004c5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2140      	movs	r1, #64	@ 0x40
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fae8 	bl	80052a6 <UART_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e006      	b.n	8004cf6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e000      	b.n	8004cf6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
  }
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d112      	bne.n	8004d3e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_UART_Receive_IT+0x26>
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e00b      	b.n	8004d40 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	461a      	mov	r2, r3
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 fb0f 	bl	8005358 <UART_Start_Receive_IT>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	e000      	b.n	8004d40 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d3e:	2302      	movs	r3, #2
  }
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b0ba      	sub	sp, #232	@ 0xe8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10f      	bne.n	8004dae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <HAL_UART_IRQHandler+0x66>
 8004d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fbec 	bl	8005584 <UART_Receive_IT>
      return;
 8004dac:	e25b      	b.n	8005266 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 80de 	beq.w	8004f74 <HAL_UART_IRQHandler+0x22c>
 8004db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 80d1 	beq.w	8004f74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00b      	beq.n	8004df6 <HAL_UART_IRQHandler+0xae>
 8004dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dee:	f043 0201 	orr.w	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00b      	beq.n	8004e1a <HAL_UART_IRQHandler+0xd2>
 8004e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e12:	f043 0202 	orr.w	r2, r3, #2
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00b      	beq.n	8004e3e <HAL_UART_IRQHandler+0xf6>
 8004e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	f043 0204 	orr.w	r2, r3, #4
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d011      	beq.n	8004e6e <HAL_UART_IRQHandler+0x126>
 8004e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d105      	bne.n	8004e62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e66:	f043 0208 	orr.w	r2, r3, #8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 81f2 	beq.w	800525c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <HAL_UART_IRQHandler+0x14e>
 8004e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fb77 	bl	8005584 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bf14      	ite	ne
 8004ea4:	2301      	movne	r3, #1
 8004ea6:	2300      	moveq	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d103      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x17a>
 8004eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d04f      	beq.n	8004f62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fa81 	bl	80053ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d041      	beq.n	8004f5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3314      	adds	r3, #20
 8004edc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3314      	adds	r3, #20
 8004efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1d9      	bne.n	8004ed6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d013      	beq.n	8004f52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8005128 <HAL_UART_IRQHandler+0x3e0>)
 8004f30:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fd ff1a 	bl	8002d70 <HAL_DMA_Abort_IT>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d016      	beq.n	8004f70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f50:	e00e      	b.n	8004f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f993 	bl	800527e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	e00a      	b.n	8004f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f98f 	bl	800527e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	e006      	b.n	8004f70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f98b 	bl	800527e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f6e:	e175      	b.n	800525c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f70:	bf00      	nop
    return;
 8004f72:	e173      	b.n	800525c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	f040 814f 	bne.w	800521c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 8148 	beq.w	800521c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8141 	beq.w	800521c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 80b6 	beq.w	800512c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8145 	beq.w	8005260 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	f080 813e 	bcs.w	8005260 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	f000 8088 	beq.w	8005108 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800500e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005012:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005016:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005024:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005028:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005030:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800503c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1d9      	bne.n	8004ff8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3314      	adds	r3, #20
 800504a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005054:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3314      	adds	r3, #20
 8005064:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005068:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800506c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005070:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800507a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e1      	bne.n	8005044 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3314      	adds	r3, #20
 8005086:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800508a:	e853 3f00 	ldrex	r3, [r3]
 800508e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005096:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3314      	adds	r3, #20
 80050a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e3      	bne.n	8005080 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	330c      	adds	r3, #12
 80050cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050d8:	f023 0310 	bic.w	r3, r3, #16
 80050dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	330c      	adds	r3, #12
 80050e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80050ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e3      	bne.n	80050c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005102:	4618      	mov	r0, r3
 8005104:	f7fd fdf8 	bl	8002cf8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005116:	b29b      	uxth	r3, r3
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	b29b      	uxth	r3, r3
 800511c:	4619      	mov	r1, r3
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f8b6 	bl	8005290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005124:	e09c      	b.n	8005260 <HAL_UART_IRQHandler+0x518>
 8005126:	bf00      	nop
 8005128:	0800548f 	.word	0x0800548f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005134:	b29b      	uxth	r3, r3
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 808e 	beq.w	8005264 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8089 	beq.w	8005264 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	330c      	adds	r3, #12
 8005158:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005164:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005168:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005176:	647a      	str	r2, [r7, #68]	@ 0x44
 8005178:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800517c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e3      	bne.n	8005152 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3314      	adds	r3, #20
 8005190:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	623b      	str	r3, [r7, #32]
   return(result);
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3314      	adds	r3, #20
 80051aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80051b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e3      	bne.n	800518a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	330c      	adds	r3, #12
 80051d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0310 	bic.w	r3, r3, #16
 80051e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	330c      	adds	r3, #12
 80051f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051f4:	61fa      	str	r2, [r7, #28]
 80051f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	69b9      	ldr	r1, [r7, #24]
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	617b      	str	r3, [r7, #20]
   return(result);
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e3      	bne.n	80051d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800520e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f83b 	bl	8005290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800521a:	e023      	b.n	8005264 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800521c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005224:	2b00      	cmp	r3, #0
 8005226:	d009      	beq.n	800523c <HAL_UART_IRQHandler+0x4f4>
 8005228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800522c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f93e 	bl	80054b6 <UART_Transmit_IT>
    return;
 800523a:	e014      	b.n	8005266 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800523c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00e      	beq.n	8005266 <HAL_UART_IRQHandler+0x51e>
 8005248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800524c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f97d 	bl	8005554 <UART_EndTransmit_IT>
    return;
 800525a:	e004      	b.n	8005266 <HAL_UART_IRQHandler+0x51e>
    return;
 800525c:	bf00      	nop
 800525e:	e002      	b.n	8005266 <HAL_UART_IRQHandler+0x51e>
      return;
 8005260:	bf00      	nop
 8005262:	e000      	b.n	8005266 <HAL_UART_IRQHandler+0x51e>
      return;
 8005264:	bf00      	nop
  }
}
 8005266:	37e8      	adds	r7, #232	@ 0xe8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr

0800527e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr

08005290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b086      	sub	sp, #24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	4613      	mov	r3, r2
 80052b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b6:	e03b      	b.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	d037      	beq.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c0:	f7fd fb24 	bl	800290c <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	6a3a      	ldr	r2, [r7, #32]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e03a      	b.n	8005350 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d023      	beq.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b80      	cmp	r3, #128	@ 0x80
 80052ec:	d020      	beq.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b40      	cmp	r3, #64	@ 0x40
 80052f2:	d01d      	beq.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d116      	bne.n	8005330 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 f856 	bl	80053ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2208      	movs	r2, #8
 8005322:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e00f      	b.n	8005350 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4013      	ands	r3, r2
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	429a      	cmp	r2, r3
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	429a      	cmp	r2, r3
 800534c:	d0b4      	beq.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	88fa      	ldrh	r2, [r7, #6]
 8005376:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2222      	movs	r2, #34	@ 0x22
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d007      	beq.n	800539e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800539c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0201 	orr.w	r2, r2, #1
 80053ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0220 	orr.w	r2, r2, #32
 80053bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr

080053ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b095      	sub	sp, #84	@ 0x54
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80053f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e5      	bne.n	80053d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3314      	adds	r3, #20
 800540c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	61fb      	str	r3, [r7, #28]
   return(result);
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005428:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800542c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e5      	bne.n	8005406 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543e:	2b01      	cmp	r3, #1
 8005440:	d119      	bne.n	8005476 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	330c      	adds	r3, #12
 8005448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	60bb      	str	r3, [r7, #8]
   return(result);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 0310 	bic.w	r3, r3, #16
 8005458:	647b      	str	r3, [r7, #68]	@ 0x44
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005462:	61ba      	str	r2, [r7, #24]
 8005464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6979      	ldr	r1, [r7, #20]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	613b      	str	r3, [r7, #16]
   return(result);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e5      	bne.n	8005442 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005484:	bf00      	nop
 8005486:	3754      	adds	r7, #84	@ 0x54
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff fee8 	bl	800527e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b21      	cmp	r3, #33	@ 0x21
 80054c8:	d13e      	bne.n	8005548 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d2:	d114      	bne.n	80054fe <UART_Transmit_IT+0x48>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d110      	bne.n	80054fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	1c9a      	adds	r2, r3, #2
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	621a      	str	r2, [r3, #32]
 80054fc:	e008      	b.n	8005510 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	1c59      	adds	r1, r3, #1
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6211      	str	r1, [r2, #32]
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29b      	uxth	r3, r3
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4619      	mov	r1, r3
 800551e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10f      	bne.n	8005544 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005532:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005542:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	e000      	b.n	800554a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005548:	2302      	movs	r3, #2
  }
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800556a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff fe79 	bl	800526c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08c      	sub	sp, #48	@ 0x30
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b22      	cmp	r3, #34	@ 0x22
 8005596:	f040 80ae 	bne.w	80056f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a2:	d117      	bne.n	80055d4 <UART_Receive_IT+0x50>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d113      	bne.n	80055d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055cc:	1c9a      	adds	r2, r3, #2
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80055d2:	e026      	b.n	8005622 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e6:	d007      	beq.n	80055f8 <UART_Receive_IT+0x74>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <UART_Receive_IT+0x82>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	e008      	b.n	8005618 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005612:	b2da      	uxtb	r2, r3
 8005614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005616:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29b      	uxth	r3, r3
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4619      	mov	r1, r3
 8005630:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005632:	2b00      	cmp	r3, #0
 8005634:	d15d      	bne.n	80056f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0220 	bic.w	r2, r2, #32
 8005644:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005654:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695a      	ldr	r2, [r3, #20]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005678:	2b01      	cmp	r3, #1
 800567a:	d135      	bne.n	80056e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	330c      	adds	r3, #12
 8005688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	613b      	str	r3, [r7, #16]
   return(result);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f023 0310 	bic.w	r3, r3, #16
 8005698:	627b      	str	r3, [r7, #36]	@ 0x24
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	330c      	adds	r3, #12
 80056a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a2:	623a      	str	r2, [r7, #32]
 80056a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	69f9      	ldr	r1, [r7, #28]
 80056a8:	6a3a      	ldr	r2, [r7, #32]
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e5      	bne.n	8005682 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d10a      	bne.n	80056da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fdd5 	bl	8005290 <HAL_UARTEx_RxEventCallback>
 80056e6:	e002      	b.n	80056ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7fb fd13 	bl	8001114 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e002      	b.n	80056f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3730      	adds	r7, #48	@ 0x30
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800573a:	f023 030c 	bic.w	r3, r3, #12
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	430b      	orrs	r3, r1
 8005746:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a2c      	ldr	r2, [pc, #176]	@ (8005814 <UART_SetConfig+0x114>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d103      	bne.n	8005770 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005768:	f7fe fa62 	bl	8003c30 <HAL_RCC_GetPCLK2Freq>
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	e002      	b.n	8005776 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005770:	f7fe fa4a 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 8005774:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009a      	lsls	r2, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	fbb2 f3f3 	udiv	r3, r2, r3
 800578c:	4a22      	ldr	r2, [pc, #136]	@ (8005818 <UART_SetConfig+0x118>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	0119      	lsls	r1, r3, #4
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009a      	lsls	r2, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005818 <UART_SetConfig+0x118>)
 80057ae:	fba3 0302 	umull	r0, r3, r3, r2
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	2064      	movs	r0, #100	@ 0x64
 80057b6:	fb00 f303 	mul.w	r3, r0, r3
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	3332      	adds	r3, #50	@ 0x32
 80057c0:	4a15      	ldr	r2, [pc, #84]	@ (8005818 <UART_SetConfig+0x118>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057cc:	4419      	add	r1, r3
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009a      	lsls	r2, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <UART_SetConfig+0x118>)
 80057e6:	fba3 0302 	umull	r0, r3, r3, r2
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2064      	movs	r0, #100	@ 0x64
 80057ee:	fb00 f303 	mul.w	r3, r0, r3
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	3332      	adds	r3, #50	@ 0x32
 80057f8:	4a07      	ldr	r2, [pc, #28]	@ (8005818 <UART_SetConfig+0x118>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	f003 020f 	and.w	r2, r3, #15
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	440a      	add	r2, r1
 800580a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40013800 	.word	0x40013800
 8005818:	51eb851f 	.word	0x51eb851f

0800581c <memset>:
 800581c:	4603      	mov	r3, r0
 800581e:	4402      	add	r2, r0
 8005820:	4293      	cmp	r3, r2
 8005822:	d100      	bne.n	8005826 <memset+0xa>
 8005824:	4770      	bx	lr
 8005826:	f803 1b01 	strb.w	r1, [r3], #1
 800582a:	e7f9      	b.n	8005820 <memset+0x4>

0800582c <__libc_init_array>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	2600      	movs	r6, #0
 8005830:	4d0c      	ldr	r5, [pc, #48]	@ (8005864 <__libc_init_array+0x38>)
 8005832:	4c0d      	ldr	r4, [pc, #52]	@ (8005868 <__libc_init_array+0x3c>)
 8005834:	1b64      	subs	r4, r4, r5
 8005836:	10a4      	asrs	r4, r4, #2
 8005838:	42a6      	cmp	r6, r4
 800583a:	d109      	bne.n	8005850 <__libc_init_array+0x24>
 800583c:	f001 f864 	bl	8006908 <_init>
 8005840:	2600      	movs	r6, #0
 8005842:	4d0a      	ldr	r5, [pc, #40]	@ (800586c <__libc_init_array+0x40>)
 8005844:	4c0a      	ldr	r4, [pc, #40]	@ (8005870 <__libc_init_array+0x44>)
 8005846:	1b64      	subs	r4, r4, r5
 8005848:	10a4      	asrs	r4, r4, #2
 800584a:	42a6      	cmp	r6, r4
 800584c:	d105      	bne.n	800585a <__libc_init_array+0x2e>
 800584e:	bd70      	pop	{r4, r5, r6, pc}
 8005850:	f855 3b04 	ldr.w	r3, [r5], #4
 8005854:	4798      	blx	r3
 8005856:	3601      	adds	r6, #1
 8005858:	e7ee      	b.n	8005838 <__libc_init_array+0xc>
 800585a:	f855 3b04 	ldr.w	r3, [r5], #4
 800585e:	4798      	blx	r3
 8005860:	3601      	adds	r6, #1
 8005862:	e7f2      	b.n	800584a <__libc_init_array+0x1e>
 8005864:	08006b28 	.word	0x08006b28
 8005868:	08006b28 	.word	0x08006b28
 800586c:	08006b28 	.word	0x08006b28
 8005870:	08006b2c 	.word	0x08006b2c

08005874 <memcpy>:
 8005874:	440a      	add	r2, r1
 8005876:	4291      	cmp	r1, r2
 8005878:	f100 33ff 	add.w	r3, r0, #4294967295
 800587c:	d100      	bne.n	8005880 <memcpy+0xc>
 800587e:	4770      	bx	lr
 8005880:	b510      	push	{r4, lr}
 8005882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005886:	4291      	cmp	r1, r2
 8005888:	f803 4f01 	strb.w	r4, [r3, #1]!
 800588c:	d1f9      	bne.n	8005882 <memcpy+0xe>
 800588e:	bd10      	pop	{r4, pc}

08005890 <tan>:
 8005890:	b530      	push	{r4, r5, lr}
 8005892:	4d12      	ldr	r5, [pc, #72]	@ (80058dc <tan+0x4c>)
 8005894:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8005898:	42ac      	cmp	r4, r5
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	b087      	sub	sp, #28
 80058a0:	d806      	bhi.n	80058b0 <tan+0x20>
 80058a2:	2301      	movs	r3, #1
 80058a4:	2200      	movs	r2, #0
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	2300      	movs	r3, #0
 80058aa:	f000 f81d 	bl	80058e8 <__kernel_tan>
 80058ae:	e004      	b.n	80058ba <tan+0x2a>
 80058b0:	4d0b      	ldr	r5, [pc, #44]	@ (80058e0 <tan+0x50>)
 80058b2:	42ac      	cmp	r4, r5
 80058b4:	d903      	bls.n	80058be <tan+0x2e>
 80058b6:	f7fa fc4f 	bl	8000158 <__aeabi_dsub>
 80058ba:	b007      	add	sp, #28
 80058bc:	bd30      	pop	{r4, r5, pc}
 80058be:	aa02      	add	r2, sp, #8
 80058c0:	f000 fa12 	bl	8005ce8 <__ieee754_rem_pio2>
 80058c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058c8:	0040      	lsls	r0, r0, #1
 80058ca:	f000 0002 	and.w	r0, r0, #2
 80058ce:	f1c0 0001 	rsb	r0, r0, #1
 80058d2:	9000      	str	r0, [sp, #0]
 80058d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058d8:	e7e7      	b.n	80058aa <tan+0x1a>
 80058da:	bf00      	nop
 80058dc:	3fe921fb 	.word	0x3fe921fb
 80058e0:	7fefffff 	.word	0x7fefffff
 80058e4:	00000000 	.word	0x00000000

080058e8 <__kernel_tan>:
 80058e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ec:	4699      	mov	r9, r3
 80058ee:	4b34      	ldr	r3, [pc, #208]	@ (80059c0 <__kernel_tan+0xd8>)
 80058f0:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80058f4:	b089      	sub	sp, #36	@ 0x24
 80058f6:	429e      	cmp	r6, r3
 80058f8:	4682      	mov	sl, r0
 80058fa:	468b      	mov	fp, r1
 80058fc:	4690      	mov	r8, r2
 80058fe:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8005900:	9102      	str	r1, [sp, #8]
 8005902:	d863      	bhi.n	80059cc <__kernel_tan+0xe4>
 8005904:	f7fb f87a 	bl	80009fc <__aeabi_d2iz>
 8005908:	4605      	mov	r5, r0
 800590a:	2800      	cmp	r0, #0
 800590c:	f040 8084 	bne.w	8005a18 <__kernel_tan+0x130>
 8005910:	4652      	mov	r2, sl
 8005912:	1c7b      	adds	r3, r7, #1
 8005914:	4313      	orrs	r3, r2
 8005916:	4333      	orrs	r3, r6
 8005918:	d110      	bne.n	800593c <__kernel_tan+0x54>
 800591a:	4650      	mov	r0, sl
 800591c:	4659      	mov	r1, fp
 800591e:	f000 fbd9 	bl	80060d4 <fabs>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	2000      	movs	r0, #0
 8005928:	4926      	ldr	r1, [pc, #152]	@ (80059c4 <__kernel_tan+0xdc>)
 800592a:	f7fa fef7 	bl	800071c <__aeabi_ddiv>
 800592e:	4682      	mov	sl, r0
 8005930:	468b      	mov	fp, r1
 8005932:	4650      	mov	r0, sl
 8005934:	4659      	mov	r1, fp
 8005936:	b009      	add	sp, #36	@ 0x24
 8005938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593c:	2f01      	cmp	r7, #1
 800593e:	d0f8      	beq.n	8005932 <__kernel_tan+0x4a>
 8005940:	4642      	mov	r2, r8
 8005942:	464b      	mov	r3, r9
 8005944:	4650      	mov	r0, sl
 8005946:	4659      	mov	r1, fp
 8005948:	f7fa fc08 	bl	800015c <__adddf3>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	460f      	mov	r7, r1
 8005952:	2000      	movs	r0, #0
 8005954:	491c      	ldr	r1, [pc, #112]	@ (80059c8 <__kernel_tan+0xe0>)
 8005956:	f7fa fee1 	bl	800071c <__aeabi_ddiv>
 800595a:	462e      	mov	r6, r5
 800595c:	e9cd 0100 	strd	r0, r1, [sp]
 8005960:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005964:	462c      	mov	r4, r5
 8005966:	4652      	mov	r2, sl
 8005968:	461d      	mov	r5, r3
 800596a:	4630      	mov	r0, r6
 800596c:	465b      	mov	r3, fp
 800596e:	4639      	mov	r1, r7
 8005970:	f7fa fbf2 	bl	8000158 <__aeabi_dsub>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4640      	mov	r0, r8
 800597a:	4649      	mov	r1, r9
 800597c:	f7fa fbec 	bl	8000158 <__aeabi_dsub>
 8005980:	4632      	mov	r2, r6
 8005982:	462b      	mov	r3, r5
 8005984:	f7fa fda0 	bl	80004c8 <__aeabi_dmul>
 8005988:	4632      	mov	r2, r6
 800598a:	4682      	mov	sl, r0
 800598c:	468b      	mov	fp, r1
 800598e:	462b      	mov	r3, r5
 8005990:	4630      	mov	r0, r6
 8005992:	4639      	mov	r1, r7
 8005994:	f7fa fd98 	bl	80004c8 <__aeabi_dmul>
 8005998:	2200      	movs	r2, #0
 800599a:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <__kernel_tan+0xdc>)
 800599c:	f7fa fbde 	bl	800015c <__adddf3>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4650      	mov	r0, sl
 80059a6:	4659      	mov	r1, fp
 80059a8:	f7fa fbd8 	bl	800015c <__adddf3>
 80059ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059b0:	f7fa fd8a 	bl	80004c8 <__aeabi_dmul>
 80059b4:	4622      	mov	r2, r4
 80059b6:	462b      	mov	r3, r5
 80059b8:	f7fa fbd0 	bl	800015c <__adddf3>
 80059bc:	e7b7      	b.n	800592e <__kernel_tan+0x46>
 80059be:	bf00      	nop
 80059c0:	3e2fffff 	.word	0x3e2fffff
 80059c4:	3ff00000 	.word	0x3ff00000
 80059c8:	bff00000 	.word	0xbff00000
 80059cc:	4bc2      	ldr	r3, [pc, #776]	@ (8005cd8 <__kernel_tan+0x3f0>)
 80059ce:	429e      	cmp	r6, r3
 80059d0:	d922      	bls.n	8005a18 <__kernel_tan+0x130>
 80059d2:	9b02      	ldr	r3, [sp, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	da05      	bge.n	80059e4 <__kernel_tan+0xfc>
 80059d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80059dc:	469b      	mov	fp, r3
 80059de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80059e2:	4699      	mov	r9, r3
 80059e4:	a19e      	add	r1, pc, #632	@ (adr r1, 8005c60 <__kernel_tan+0x378>)
 80059e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059ea:	4652      	mov	r2, sl
 80059ec:	465b      	mov	r3, fp
 80059ee:	f7fa fbb3 	bl	8000158 <__aeabi_dsub>
 80059f2:	4604      	mov	r4, r0
 80059f4:	460d      	mov	r5, r1
 80059f6:	a19c      	add	r1, pc, #624	@ (adr r1, 8005c68 <__kernel_tan+0x380>)
 80059f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059fc:	4642      	mov	r2, r8
 80059fe:	464b      	mov	r3, r9
 8005a00:	f7fa fbaa 	bl	8000158 <__aeabi_dsub>
 8005a04:	4622      	mov	r2, r4
 8005a06:	462b      	mov	r3, r5
 8005a08:	f7fa fba8 	bl	800015c <__adddf3>
 8005a0c:	f04f 0800 	mov.w	r8, #0
 8005a10:	4682      	mov	sl, r0
 8005a12:	468b      	mov	fp, r1
 8005a14:	f04f 0900 	mov.w	r9, #0
 8005a18:	4652      	mov	r2, sl
 8005a1a:	465b      	mov	r3, fp
 8005a1c:	4650      	mov	r0, sl
 8005a1e:	4659      	mov	r1, fp
 8005a20:	f7fa fd52 	bl	80004c8 <__aeabi_dmul>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	e9cd 2300 	strd	r2, r3, [sp]
 8005a2c:	f7fa fd4c 	bl	80004c8 <__aeabi_dmul>
 8005a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a34:	4604      	mov	r4, r0
 8005a36:	460d      	mov	r5, r1
 8005a38:	4650      	mov	r0, sl
 8005a3a:	4659      	mov	r1, fp
 8005a3c:	f7fa fd44 	bl	80004c8 <__aeabi_dmul>
 8005a40:	a38b      	add	r3, pc, #556	@ (adr r3, 8005c70 <__kernel_tan+0x388>)
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	4629      	mov	r1, r5
 8005a4e:	f7fa fd3b 	bl	80004c8 <__aeabi_dmul>
 8005a52:	a389      	add	r3, pc, #548	@ (adr r3, 8005c78 <__kernel_tan+0x390>)
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	f7fa fb80 	bl	800015c <__adddf3>
 8005a5c:	4622      	mov	r2, r4
 8005a5e:	462b      	mov	r3, r5
 8005a60:	f7fa fd32 	bl	80004c8 <__aeabi_dmul>
 8005a64:	a386      	add	r3, pc, #536	@ (adr r3, 8005c80 <__kernel_tan+0x398>)
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f7fa fb77 	bl	800015c <__adddf3>
 8005a6e:	4622      	mov	r2, r4
 8005a70:	462b      	mov	r3, r5
 8005a72:	f7fa fd29 	bl	80004c8 <__aeabi_dmul>
 8005a76:	a384      	add	r3, pc, #528	@ (adr r3, 8005c88 <__kernel_tan+0x3a0>)
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa fb6e 	bl	800015c <__adddf3>
 8005a80:	4622      	mov	r2, r4
 8005a82:	462b      	mov	r3, r5
 8005a84:	f7fa fd20 	bl	80004c8 <__aeabi_dmul>
 8005a88:	a381      	add	r3, pc, #516	@ (adr r3, 8005c90 <__kernel_tan+0x3a8>)
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	f7fa fb65 	bl	800015c <__adddf3>
 8005a92:	4622      	mov	r2, r4
 8005a94:	462b      	mov	r3, r5
 8005a96:	f7fa fd17 	bl	80004c8 <__aeabi_dmul>
 8005a9a:	a37f      	add	r3, pc, #508	@ (adr r3, 8005c98 <__kernel_tan+0x3b0>)
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f7fa fb5c 	bl	800015c <__adddf3>
 8005aa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aa8:	f7fa fd0e 	bl	80004c8 <__aeabi_dmul>
 8005aac:	a37c      	add	r3, pc, #496	@ (adr r3, 8005ca0 <__kernel_tan+0x3b8>)
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa fd05 	bl	80004c8 <__aeabi_dmul>
 8005abe:	a37a      	add	r3, pc, #488	@ (adr r3, 8005ca8 <__kernel_tan+0x3c0>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f7fa fb4a 	bl	800015c <__adddf3>
 8005ac8:	4622      	mov	r2, r4
 8005aca:	462b      	mov	r3, r5
 8005acc:	f7fa fcfc 	bl	80004c8 <__aeabi_dmul>
 8005ad0:	a377      	add	r3, pc, #476	@ (adr r3, 8005cb0 <__kernel_tan+0x3c8>)
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	f7fa fb41 	bl	800015c <__adddf3>
 8005ada:	4622      	mov	r2, r4
 8005adc:	462b      	mov	r3, r5
 8005ade:	f7fa fcf3 	bl	80004c8 <__aeabi_dmul>
 8005ae2:	a375      	add	r3, pc, #468	@ (adr r3, 8005cb8 <__kernel_tan+0x3d0>)
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f7fa fb38 	bl	800015c <__adddf3>
 8005aec:	4622      	mov	r2, r4
 8005aee:	462b      	mov	r3, r5
 8005af0:	f7fa fcea 	bl	80004c8 <__aeabi_dmul>
 8005af4:	a372      	add	r3, pc, #456	@ (adr r3, 8005cc0 <__kernel_tan+0x3d8>)
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f7fa fb2f 	bl	800015c <__adddf3>
 8005afe:	4622      	mov	r2, r4
 8005b00:	462b      	mov	r3, r5
 8005b02:	f7fa fce1 	bl	80004c8 <__aeabi_dmul>
 8005b06:	a370      	add	r3, pc, #448	@ (adr r3, 8005cc8 <__kernel_tan+0x3e0>)
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f7fa fb26 	bl	800015c <__adddf3>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b18:	f7fa fb20 	bl	800015c <__adddf3>
 8005b1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b20:	f7fa fcd2 	bl	80004c8 <__aeabi_dmul>
 8005b24:	4642      	mov	r2, r8
 8005b26:	464b      	mov	r3, r9
 8005b28:	f7fa fb18 	bl	800015c <__adddf3>
 8005b2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b30:	f7fa fcca 	bl	80004c8 <__aeabi_dmul>
 8005b34:	4642      	mov	r2, r8
 8005b36:	464b      	mov	r3, r9
 8005b38:	f7fa fb10 	bl	800015c <__adddf3>
 8005b3c:	a364      	add	r3, pc, #400	@ (adr r3, 8005cd0 <__kernel_tan+0x3e8>)
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	4604      	mov	r4, r0
 8005b44:	460d      	mov	r5, r1
 8005b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b4a:	f7fa fcbd 	bl	80004c8 <__aeabi_dmul>
 8005b4e:	4622      	mov	r2, r4
 8005b50:	462b      	mov	r3, r5
 8005b52:	f7fa fb03 	bl	800015c <__adddf3>
 8005b56:	460b      	mov	r3, r1
 8005b58:	e9cd 0100 	strd	r0, r1, [sp]
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	4659      	mov	r1, fp
 8005b60:	4650      	mov	r0, sl
 8005b62:	f7fa fafb 	bl	800015c <__adddf3>
 8005b66:	4b5c      	ldr	r3, [pc, #368]	@ (8005cd8 <__kernel_tan+0x3f0>)
 8005b68:	4604      	mov	r4, r0
 8005b6a:	429e      	cmp	r6, r3
 8005b6c:	460d      	mov	r5, r1
 8005b6e:	d93e      	bls.n	8005bee <__kernel_tan+0x306>
 8005b70:	4638      	mov	r0, r7
 8005b72:	f7fa fc3f 	bl	80003f4 <__aeabi_i2d>
 8005b76:	4622      	mov	r2, r4
 8005b78:	4680      	mov	r8, r0
 8005b7a:	4689      	mov	r9, r1
 8005b7c:	462b      	mov	r3, r5
 8005b7e:	4620      	mov	r0, r4
 8005b80:	4629      	mov	r1, r5
 8005b82:	f7fa fca1 	bl	80004c8 <__aeabi_dmul>
 8005b86:	4642      	mov	r2, r8
 8005b88:	4606      	mov	r6, r0
 8005b8a:	460f      	mov	r7, r1
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	4620      	mov	r0, r4
 8005b90:	4629      	mov	r1, r5
 8005b92:	f7fa fae3 	bl	800015c <__adddf3>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	f7fa fdbd 	bl	800071c <__aeabi_ddiv>
 8005ba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ba6:	f7fa fad7 	bl	8000158 <__aeabi_dsub>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4650      	mov	r0, sl
 8005bb0:	4659      	mov	r1, fp
 8005bb2:	f7fa fad1 	bl	8000158 <__aeabi_dsub>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	f7fa facf 	bl	800015c <__adddf3>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	f7fa fac7 	bl	8000158 <__aeabi_dsub>
 8005bca:	9b02      	ldr	r3, [sp, #8]
 8005bcc:	4604      	mov	r4, r0
 8005bce:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8005bd2:	f00a 0a02 	and.w	sl, sl, #2
 8005bd6:	f1ca 0001 	rsb	r0, sl, #1
 8005bda:	460d      	mov	r5, r1
 8005bdc:	f7fa fc0a 	bl	80003f4 <__aeabi_i2d>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4620      	mov	r0, r4
 8005be6:	4629      	mov	r1, r5
 8005be8:	f7fa fc6e 	bl	80004c8 <__aeabi_dmul>
 8005bec:	e69f      	b.n	800592e <__kernel_tan+0x46>
 8005bee:	2f01      	cmp	r7, #1
 8005bf0:	d033      	beq.n	8005c5a <__kernel_tan+0x372>
 8005bf2:	f04f 0800 	mov.w	r8, #0
 8005bf6:	4689      	mov	r9, r1
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	4937      	ldr	r1, [pc, #220]	@ (8005cdc <__kernel_tan+0x3f4>)
 8005c00:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005c04:	f7fa fd8a 	bl	800071c <__aeabi_ddiv>
 8005c08:	4652      	mov	r2, sl
 8005c0a:	460f      	mov	r7, r1
 8005c0c:	465b      	mov	r3, fp
 8005c0e:	4606      	mov	r6, r0
 8005c10:	460d      	mov	r5, r1
 8005c12:	4640      	mov	r0, r8
 8005c14:	4649      	mov	r1, r9
 8005c16:	f7fa fa9f 	bl	8000158 <__aeabi_dsub>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c22:	f7fa fa99 	bl	8000158 <__aeabi_dsub>
 8005c26:	4642      	mov	r2, r8
 8005c28:	463b      	mov	r3, r7
 8005c2a:	f7fa fc4d 	bl	80004c8 <__aeabi_dmul>
 8005c2e:	4642      	mov	r2, r8
 8005c30:	4682      	mov	sl, r0
 8005c32:	468b      	mov	fp, r1
 8005c34:	463b      	mov	r3, r7
 8005c36:	4640      	mov	r0, r8
 8005c38:	4649      	mov	r1, r9
 8005c3a:	f7fa fc45 	bl	80004c8 <__aeabi_dmul>
 8005c3e:	2200      	movs	r2, #0
 8005c40:	4b27      	ldr	r3, [pc, #156]	@ (8005ce0 <__kernel_tan+0x3f8>)
 8005c42:	f7fa fa8b 	bl	800015c <__adddf3>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	f7fa fa85 	bl	800015c <__adddf3>
 8005c52:	4644      	mov	r4, r8
 8005c54:	4632      	mov	r2, r6
 8005c56:	463b      	mov	r3, r7
 8005c58:	e6aa      	b.n	80059b0 <__kernel_tan+0xc8>
 8005c5a:	4682      	mov	sl, r0
 8005c5c:	468b      	mov	fp, r1
 8005c5e:	e668      	b.n	8005932 <__kernel_tan+0x4a>
 8005c60:	54442d18 	.word	0x54442d18
 8005c64:	3fe921fb 	.word	0x3fe921fb
 8005c68:	33145c07 	.word	0x33145c07
 8005c6c:	3c81a626 	.word	0x3c81a626
 8005c70:	74bf7ad4 	.word	0x74bf7ad4
 8005c74:	3efb2a70 	.word	0x3efb2a70
 8005c78:	32f0a7e9 	.word	0x32f0a7e9
 8005c7c:	3f12b80f 	.word	0x3f12b80f
 8005c80:	1a8d1068 	.word	0x1a8d1068
 8005c84:	3f3026f7 	.word	0x3f3026f7
 8005c88:	fee08315 	.word	0xfee08315
 8005c8c:	3f57dbc8 	.word	0x3f57dbc8
 8005c90:	e96e8493 	.word	0xe96e8493
 8005c94:	3f8226e3 	.word	0x3f8226e3
 8005c98:	1bb341fe 	.word	0x1bb341fe
 8005c9c:	3faba1ba 	.word	0x3faba1ba
 8005ca0:	db605373 	.word	0xdb605373
 8005ca4:	bef375cb 	.word	0xbef375cb
 8005ca8:	a03792a6 	.word	0xa03792a6
 8005cac:	3f147e88 	.word	0x3f147e88
 8005cb0:	f2f26501 	.word	0xf2f26501
 8005cb4:	3f4344d8 	.word	0x3f4344d8
 8005cb8:	c9560328 	.word	0xc9560328
 8005cbc:	3f6d6d22 	.word	0x3f6d6d22
 8005cc0:	8406d637 	.word	0x8406d637
 8005cc4:	3f9664f4 	.word	0x3f9664f4
 8005cc8:	1110fe7a 	.word	0x1110fe7a
 8005ccc:	3fc11111 	.word	0x3fc11111
 8005cd0:	55555563 	.word	0x55555563
 8005cd4:	3fd55555 	.word	0x3fd55555
 8005cd8:	3fe59427 	.word	0x3fe59427
 8005cdc:	bff00000 	.word	0xbff00000
 8005ce0:	3ff00000 	.word	0x3ff00000
 8005ce4:	00000000 	.word	0x00000000

08005ce8 <__ieee754_rem_pio2>:
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	4bc4      	ldr	r3, [pc, #784]	@ (8006000 <__ieee754_rem_pio2+0x318>)
 8005cee:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8005cf2:	b08d      	sub	sp, #52	@ 0x34
 8005cf4:	4598      	cmp	r8, r3
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	460f      	mov	r7, r1
 8005cfa:	4614      	mov	r4, r2
 8005cfc:	9104      	str	r1, [sp, #16]
 8005cfe:	d807      	bhi.n	8005d10 <__ieee754_rem_pio2+0x28>
 8005d00:	e9c2 6700 	strd	r6, r7, [r2]
 8005d04:	2300      	movs	r3, #0
 8005d06:	2200      	movs	r2, #0
 8005d08:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005d0c:	2500      	movs	r5, #0
 8005d0e:	e026      	b.n	8005d5e <__ieee754_rem_pio2+0x76>
 8005d10:	4bbc      	ldr	r3, [pc, #752]	@ (8006004 <__ieee754_rem_pio2+0x31c>)
 8005d12:	4598      	cmp	r8, r3
 8005d14:	d876      	bhi.n	8005e04 <__ieee754_rem_pio2+0x11c>
 8005d16:	9b04      	ldr	r3, [sp, #16]
 8005d18:	4dbb      	ldr	r5, [pc, #748]	@ (8006008 <__ieee754_rem_pio2+0x320>)
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	a3aa      	add	r3, pc, #680	@ (adr r3, 8005fc8 <__ieee754_rem_pio2+0x2e0>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	dd38      	ble.n	8005d96 <__ieee754_rem_pio2+0xae>
 8005d24:	f7fa fa18 	bl	8000158 <__aeabi_dsub>
 8005d28:	45a8      	cmp	r8, r5
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	460f      	mov	r7, r1
 8005d2e:	d01a      	beq.n	8005d66 <__ieee754_rem_pio2+0x7e>
 8005d30:	a3a7      	add	r3, pc, #668	@ (adr r3, 8005fd0 <__ieee754_rem_pio2+0x2e8>)
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	f7fa fa0f 	bl	8000158 <__aeabi_dsub>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4680      	mov	r8, r0
 8005d40:	4689      	mov	r9, r1
 8005d42:	4630      	mov	r0, r6
 8005d44:	4639      	mov	r1, r7
 8005d46:	f7fa fa07 	bl	8000158 <__aeabi_dsub>
 8005d4a:	a3a1      	add	r3, pc, #644	@ (adr r3, 8005fd0 <__ieee754_rem_pio2+0x2e8>)
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f7fa fa02 	bl	8000158 <__aeabi_dsub>
 8005d54:	2501      	movs	r5, #1
 8005d56:	e9c4 8900 	strd	r8, r9, [r4]
 8005d5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d5e:	4628      	mov	r0, r5
 8005d60:	b00d      	add	sp, #52	@ 0x34
 8005d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d66:	a39c      	add	r3, pc, #624	@ (adr r3, 8005fd8 <__ieee754_rem_pio2+0x2f0>)
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f7fa f9f4 	bl	8000158 <__aeabi_dsub>
 8005d70:	a39b      	add	r3, pc, #620	@ (adr r3, 8005fe0 <__ieee754_rem_pio2+0x2f8>)
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	4606      	mov	r6, r0
 8005d78:	460f      	mov	r7, r1
 8005d7a:	f7fa f9ed 	bl	8000158 <__aeabi_dsub>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4680      	mov	r8, r0
 8005d84:	4689      	mov	r9, r1
 8005d86:	4630      	mov	r0, r6
 8005d88:	4639      	mov	r1, r7
 8005d8a:	f7fa f9e5 	bl	8000158 <__aeabi_dsub>
 8005d8e:	a394      	add	r3, pc, #592	@ (adr r3, 8005fe0 <__ieee754_rem_pio2+0x2f8>)
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	e7dc      	b.n	8005d50 <__ieee754_rem_pio2+0x68>
 8005d96:	f7fa f9e1 	bl	800015c <__adddf3>
 8005d9a:	45a8      	cmp	r8, r5
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	460f      	mov	r7, r1
 8005da0:	d018      	beq.n	8005dd4 <__ieee754_rem_pio2+0xec>
 8005da2:	a38b      	add	r3, pc, #556	@ (adr r3, 8005fd0 <__ieee754_rem_pio2+0x2e8>)
 8005da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da8:	f7fa f9d8 	bl	800015c <__adddf3>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4680      	mov	r8, r0
 8005db2:	4689      	mov	r9, r1
 8005db4:	4630      	mov	r0, r6
 8005db6:	4639      	mov	r1, r7
 8005db8:	f7fa f9ce 	bl	8000158 <__aeabi_dsub>
 8005dbc:	a384      	add	r3, pc, #528	@ (adr r3, 8005fd0 <__ieee754_rem_pio2+0x2e8>)
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	f7fa f9cb 	bl	800015c <__adddf3>
 8005dc6:	f04f 35ff 	mov.w	r5, #4294967295
 8005dca:	e9c4 8900 	strd	r8, r9, [r4]
 8005dce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005dd2:	e7c4      	b.n	8005d5e <__ieee754_rem_pio2+0x76>
 8005dd4:	a380      	add	r3, pc, #512	@ (adr r3, 8005fd8 <__ieee754_rem_pio2+0x2f0>)
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f7fa f9bf 	bl	800015c <__adddf3>
 8005dde:	a380      	add	r3, pc, #512	@ (adr r3, 8005fe0 <__ieee754_rem_pio2+0x2f8>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	4606      	mov	r6, r0
 8005de6:	460f      	mov	r7, r1
 8005de8:	f7fa f9b8 	bl	800015c <__adddf3>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4680      	mov	r8, r0
 8005df2:	4689      	mov	r9, r1
 8005df4:	4630      	mov	r0, r6
 8005df6:	4639      	mov	r1, r7
 8005df8:	f7fa f9ae 	bl	8000158 <__aeabi_dsub>
 8005dfc:	a378      	add	r3, pc, #480	@ (adr r3, 8005fe0 <__ieee754_rem_pio2+0x2f8>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	e7de      	b.n	8005dc2 <__ieee754_rem_pio2+0xda>
 8005e04:	4b81      	ldr	r3, [pc, #516]	@ (800600c <__ieee754_rem_pio2+0x324>)
 8005e06:	4598      	cmp	r8, r3
 8005e08:	f200 80cf 	bhi.w	8005faa <__ieee754_rem_pio2+0x2c2>
 8005e0c:	f000 f962 	bl	80060d4 <fabs>
 8005e10:	a375      	add	r3, pc, #468	@ (adr r3, 8005fe8 <__ieee754_rem_pio2+0x300>)
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	4606      	mov	r6, r0
 8005e18:	460f      	mov	r7, r1
 8005e1a:	f7fa fb55 	bl	80004c8 <__aeabi_dmul>
 8005e1e:	2200      	movs	r2, #0
 8005e20:	4b7b      	ldr	r3, [pc, #492]	@ (8006010 <__ieee754_rem_pio2+0x328>)
 8005e22:	f7fa f99b 	bl	800015c <__adddf3>
 8005e26:	f7fa fde9 	bl	80009fc <__aeabi_d2iz>
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	f7fa fae2 	bl	80003f4 <__aeabi_i2d>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e38:	a363      	add	r3, pc, #396	@ (adr r3, 8005fc8 <__ieee754_rem_pio2+0x2e0>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa fb43 	bl	80004c8 <__aeabi_dmul>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4630      	mov	r0, r6
 8005e48:	4639      	mov	r1, r7
 8005e4a:	f7fa f985 	bl	8000158 <__aeabi_dsub>
 8005e4e:	a360      	add	r3, pc, #384	@ (adr r3, 8005fd0 <__ieee754_rem_pio2+0x2e8>)
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	4682      	mov	sl, r0
 8005e56:	468b      	mov	fp, r1
 8005e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e5c:	f7fa fb34 	bl	80004c8 <__aeabi_dmul>
 8005e60:	2d1f      	cmp	r5, #31
 8005e62:	4606      	mov	r6, r0
 8005e64:	460f      	mov	r7, r1
 8005e66:	dc0c      	bgt.n	8005e82 <__ieee754_rem_pio2+0x19a>
 8005e68:	4b6a      	ldr	r3, [pc, #424]	@ (8006014 <__ieee754_rem_pio2+0x32c>)
 8005e6a:	1e6a      	subs	r2, r5, #1
 8005e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e70:	4543      	cmp	r3, r8
 8005e72:	d006      	beq.n	8005e82 <__ieee754_rem_pio2+0x19a>
 8005e74:	4632      	mov	r2, r6
 8005e76:	463b      	mov	r3, r7
 8005e78:	4650      	mov	r0, sl
 8005e7a:	4659      	mov	r1, fp
 8005e7c:	f7fa f96c 	bl	8000158 <__aeabi_dsub>
 8005e80:	e00e      	b.n	8005ea0 <__ieee754_rem_pio2+0x1b8>
 8005e82:	463b      	mov	r3, r7
 8005e84:	4632      	mov	r2, r6
 8005e86:	4650      	mov	r0, sl
 8005e88:	4659      	mov	r1, fp
 8005e8a:	f7fa f965 	bl	8000158 <__aeabi_dsub>
 8005e8e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005e92:	9305      	str	r3, [sp, #20]
 8005e94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005e98:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005e9c:	2b10      	cmp	r3, #16
 8005e9e:	dc02      	bgt.n	8005ea6 <__ieee754_rem_pio2+0x1be>
 8005ea0:	e9c4 0100 	strd	r0, r1, [r4]
 8005ea4:	e039      	b.n	8005f1a <__ieee754_rem_pio2+0x232>
 8005ea6:	a34c      	add	r3, pc, #304	@ (adr r3, 8005fd8 <__ieee754_rem_pio2+0x2f0>)
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eb0:	f7fa fb0a 	bl	80004c8 <__aeabi_dmul>
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	460f      	mov	r7, r1
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	4659      	mov	r1, fp
 8005ec0:	f7fa f94a 	bl	8000158 <__aeabi_dsub>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4680      	mov	r8, r0
 8005eca:	4689      	mov	r9, r1
 8005ecc:	4650      	mov	r0, sl
 8005ece:	4659      	mov	r1, fp
 8005ed0:	f7fa f942 	bl	8000158 <__aeabi_dsub>
 8005ed4:	4632      	mov	r2, r6
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	f7fa f93e 	bl	8000158 <__aeabi_dsub>
 8005edc:	a340      	add	r3, pc, #256	@ (adr r3, 8005fe0 <__ieee754_rem_pio2+0x2f8>)
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	460f      	mov	r7, r1
 8005ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eea:	f7fa faed 	bl	80004c8 <__aeabi_dmul>
 8005eee:	4632      	mov	r2, r6
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	f7fa f931 	bl	8000158 <__aeabi_dsub>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4606      	mov	r6, r0
 8005efc:	460f      	mov	r7, r1
 8005efe:	4640      	mov	r0, r8
 8005f00:	4649      	mov	r1, r9
 8005f02:	f7fa f929 	bl	8000158 <__aeabi_dsub>
 8005f06:	9a05      	ldr	r2, [sp, #20]
 8005f08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b31      	cmp	r3, #49	@ 0x31
 8005f10:	dc20      	bgt.n	8005f54 <__ieee754_rem_pio2+0x26c>
 8005f12:	46c2      	mov	sl, r8
 8005f14:	46cb      	mov	fp, r9
 8005f16:	e9c4 0100 	strd	r0, r1, [r4]
 8005f1a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005f1e:	4650      	mov	r0, sl
 8005f20:	4642      	mov	r2, r8
 8005f22:	464b      	mov	r3, r9
 8005f24:	4659      	mov	r1, fp
 8005f26:	f7fa f917 	bl	8000158 <__aeabi_dsub>
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	f7fa f913 	bl	8000158 <__aeabi_dsub>
 8005f32:	9b04      	ldr	r3, [sp, #16]
 8005f34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f6bf af10 	bge.w	8005d5e <__ieee754_rem_pio2+0x76>
 8005f3e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005f42:	6063      	str	r3, [r4, #4]
 8005f44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f48:	f8c4 8000 	str.w	r8, [r4]
 8005f4c:	60a0      	str	r0, [r4, #8]
 8005f4e:	60e3      	str	r3, [r4, #12]
 8005f50:	426d      	negs	r5, r5
 8005f52:	e704      	b.n	8005d5e <__ieee754_rem_pio2+0x76>
 8005f54:	a326      	add	r3, pc, #152	@ (adr r3, 8005ff0 <__ieee754_rem_pio2+0x308>)
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f5e:	f7fa fab3 	bl	80004c8 <__aeabi_dmul>
 8005f62:	4606      	mov	r6, r0
 8005f64:	460f      	mov	r7, r1
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	f7fa f8f3 	bl	8000158 <__aeabi_dsub>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4682      	mov	sl, r0
 8005f78:	468b      	mov	fp, r1
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	f7fa f8eb 	bl	8000158 <__aeabi_dsub>
 8005f82:	4632      	mov	r2, r6
 8005f84:	463b      	mov	r3, r7
 8005f86:	f7fa f8e7 	bl	8000158 <__aeabi_dsub>
 8005f8a:	a31b      	add	r3, pc, #108	@ (adr r3, 8005ff8 <__ieee754_rem_pio2+0x310>)
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	4606      	mov	r6, r0
 8005f92:	460f      	mov	r7, r1
 8005f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f98:	f7fa fa96 	bl	80004c8 <__aeabi_dmul>
 8005f9c:	4632      	mov	r2, r6
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	f7fa f8da 	bl	8000158 <__aeabi_dsub>
 8005fa4:	4606      	mov	r6, r0
 8005fa6:	460f      	mov	r7, r1
 8005fa8:	e764      	b.n	8005e74 <__ieee754_rem_pio2+0x18c>
 8005faa:	4b1b      	ldr	r3, [pc, #108]	@ (8006018 <__ieee754_rem_pio2+0x330>)
 8005fac:	4598      	cmp	r8, r3
 8005fae:	d935      	bls.n	800601c <__ieee754_rem_pio2+0x334>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	f7fa f8d0 	bl	8000158 <__aeabi_dsub>
 8005fb8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005fbc:	e9c4 0100 	strd	r0, r1, [r4]
 8005fc0:	e6a4      	b.n	8005d0c <__ieee754_rem_pio2+0x24>
 8005fc2:	bf00      	nop
 8005fc4:	f3af 8000 	nop.w
 8005fc8:	54400000 	.word	0x54400000
 8005fcc:	3ff921fb 	.word	0x3ff921fb
 8005fd0:	1a626331 	.word	0x1a626331
 8005fd4:	3dd0b461 	.word	0x3dd0b461
 8005fd8:	1a600000 	.word	0x1a600000
 8005fdc:	3dd0b461 	.word	0x3dd0b461
 8005fe0:	2e037073 	.word	0x2e037073
 8005fe4:	3ba3198a 	.word	0x3ba3198a
 8005fe8:	6dc9c883 	.word	0x6dc9c883
 8005fec:	3fe45f30 	.word	0x3fe45f30
 8005ff0:	2e000000 	.word	0x2e000000
 8005ff4:	3ba3198a 	.word	0x3ba3198a
 8005ff8:	252049c1 	.word	0x252049c1
 8005ffc:	397b839a 	.word	0x397b839a
 8006000:	3fe921fb 	.word	0x3fe921fb
 8006004:	4002d97b 	.word	0x4002d97b
 8006008:	3ff921fb 	.word	0x3ff921fb
 800600c:	413921fb 	.word	0x413921fb
 8006010:	3fe00000 	.word	0x3fe00000
 8006014:	0800694c 	.word	0x0800694c
 8006018:	7fefffff 	.word	0x7fefffff
 800601c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006020:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006024:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006028:	460f      	mov	r7, r1
 800602a:	f7fa fce7 	bl	80009fc <__aeabi_d2iz>
 800602e:	f7fa f9e1 	bl	80003f4 <__aeabi_i2d>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4630      	mov	r0, r6
 8006038:	4639      	mov	r1, r7
 800603a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800603e:	f7fa f88b 	bl	8000158 <__aeabi_dsub>
 8006042:	2200      	movs	r2, #0
 8006044:	4b21      	ldr	r3, [pc, #132]	@ (80060cc <__ieee754_rem_pio2+0x3e4>)
 8006046:	f7fa fa3f 	bl	80004c8 <__aeabi_dmul>
 800604a:	460f      	mov	r7, r1
 800604c:	4606      	mov	r6, r0
 800604e:	f7fa fcd5 	bl	80009fc <__aeabi_d2iz>
 8006052:	f7fa f9cf 	bl	80003f4 <__aeabi_i2d>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4630      	mov	r0, r6
 800605c:	4639      	mov	r1, r7
 800605e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006062:	f7fa f879 	bl	8000158 <__aeabi_dsub>
 8006066:	2200      	movs	r2, #0
 8006068:	4b18      	ldr	r3, [pc, #96]	@ (80060cc <__ieee754_rem_pio2+0x3e4>)
 800606a:	f7fa fa2d 	bl	80004c8 <__aeabi_dmul>
 800606e:	f04f 0803 	mov.w	r8, #3
 8006072:	2600      	movs	r6, #0
 8006074:	2700      	movs	r7, #0
 8006076:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800607a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800607e:	4632      	mov	r2, r6
 8006080:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006084:	463b      	mov	r3, r7
 8006086:	46c2      	mov	sl, r8
 8006088:	f108 38ff 	add.w	r8, r8, #4294967295
 800608c:	f7fa fc84 	bl	8000998 <__aeabi_dcmpeq>
 8006090:	2800      	cmp	r0, #0
 8006092:	d1f4      	bne.n	800607e <__ieee754_rem_pio2+0x396>
 8006094:	4b0e      	ldr	r3, [pc, #56]	@ (80060d0 <__ieee754_rem_pio2+0x3e8>)
 8006096:	462a      	mov	r2, r5
 8006098:	9301      	str	r3, [sp, #4]
 800609a:	2302      	movs	r3, #2
 800609c:	4621      	mov	r1, r4
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	a806      	add	r0, sp, #24
 80060a2:	4653      	mov	r3, sl
 80060a4:	f000 f81a 	bl	80060dc <__kernel_rem_pio2>
 80060a8:	9b04      	ldr	r3, [sp, #16]
 80060aa:	4605      	mov	r5, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f6bf ae56 	bge.w	8005d5e <__ieee754_rem_pio2+0x76>
 80060b2:	e9d4 2100 	ldrd	r2, r1, [r4]
 80060b6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80060ba:	e9c4 2300 	strd	r2, r3, [r4]
 80060be:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80060c2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80060c6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80060ca:	e741      	b.n	8005f50 <__ieee754_rem_pio2+0x268>
 80060cc:	41700000 	.word	0x41700000
 80060d0:	080069cc 	.word	0x080069cc

080060d4 <fabs>:
 80060d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80060d8:	4619      	mov	r1, r3
 80060da:	4770      	bx	lr

080060dc <__kernel_rem_pio2>:
 80060dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80060e4:	9308      	str	r3, [sp, #32]
 80060e6:	9104      	str	r1, [sp, #16]
 80060e8:	4bba      	ldr	r3, [pc, #744]	@ (80063d4 <__kernel_rem_pio2+0x2f8>)
 80060ea:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 80060ec:	f112 0f14 	cmn.w	r2, #20
 80060f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060f4:	bfa8      	it	ge
 80060f6:	1ed4      	subge	r4, r2, #3
 80060f8:	9302      	str	r3, [sp, #8]
 80060fa:	9b08      	ldr	r3, [sp, #32]
 80060fc:	bfb8      	it	lt
 80060fe:	2400      	movlt	r4, #0
 8006100:	f103 33ff 	add.w	r3, r3, #4294967295
 8006104:	9306      	str	r3, [sp, #24]
 8006106:	bfa4      	itt	ge
 8006108:	2318      	movge	r3, #24
 800610a:	fb94 f4f3 	sdivge	r4, r4, r3
 800610e:	f06f 0317 	mvn.w	r3, #23
 8006112:	fb04 3303 	mla	r3, r4, r3, r3
 8006116:	eb03 0a02 	add.w	sl, r3, r2
 800611a:	9a06      	ldr	r2, [sp, #24]
 800611c:	9b02      	ldr	r3, [sp, #8]
 800611e:	1aa7      	subs	r7, r4, r2
 8006120:	eb03 0802 	add.w	r8, r3, r2
 8006124:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8006126:	2500      	movs	r5, #0
 8006128:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800612c:	2200      	movs	r2, #0
 800612e:	2300      	movs	r3, #0
 8006130:	9009      	str	r0, [sp, #36]	@ 0x24
 8006132:	ae20      	add	r6, sp, #128	@ 0x80
 8006134:	4545      	cmp	r5, r8
 8006136:	dd13      	ble.n	8006160 <__kernel_rem_pio2+0x84>
 8006138:	2700      	movs	r7, #0
 800613a:	9a08      	ldr	r2, [sp, #32]
 800613c:	ab20      	add	r3, sp, #128	@ 0x80
 800613e:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8006142:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8006146:	9b02      	ldr	r3, [sp, #8]
 8006148:	429f      	cmp	r7, r3
 800614a:	dc33      	bgt.n	80061b4 <__kernel_rem_pio2+0xd8>
 800614c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800614e:	2200      	movs	r2, #0
 8006150:	f1a3 0908 	sub.w	r9, r3, #8
 8006154:	2300      	movs	r3, #0
 8006156:	46a8      	mov	r8, r5
 8006158:	2600      	movs	r6, #0
 800615a:	e9cd 2300 	strd	r2, r3, [sp]
 800615e:	e01f      	b.n	80061a0 <__kernel_rem_pio2+0xc4>
 8006160:	42ef      	cmn	r7, r5
 8006162:	d40b      	bmi.n	800617c <__kernel_rem_pio2+0xa0>
 8006164:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006168:	e9cd 2300 	strd	r2, r3, [sp]
 800616c:	f7fa f942 	bl	80003f4 <__aeabi_i2d>
 8006170:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006174:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006178:	3501      	adds	r5, #1
 800617a:	e7db      	b.n	8006134 <__kernel_rem_pio2+0x58>
 800617c:	4610      	mov	r0, r2
 800617e:	4619      	mov	r1, r3
 8006180:	e7f8      	b.n	8006174 <__kernel_rem_pio2+0x98>
 8006182:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8006186:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800618a:	f7fa f99d 	bl	80004c8 <__aeabi_dmul>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006196:	f7f9 ffe1 	bl	800015c <__adddf3>
 800619a:	e9cd 0100 	strd	r0, r1, [sp]
 800619e:	3601      	adds	r6, #1
 80061a0:	9b06      	ldr	r3, [sp, #24]
 80061a2:	429e      	cmp	r6, r3
 80061a4:	dded      	ble.n	8006182 <__kernel_rem_pio2+0xa6>
 80061a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061aa:	3701      	adds	r7, #1
 80061ac:	e8eb 2302 	strd	r2, r3, [fp], #8
 80061b0:	3508      	adds	r5, #8
 80061b2:	e7c8      	b.n	8006146 <__kernel_rem_pio2+0x6a>
 80061b4:	9b02      	ldr	r3, [sp, #8]
 80061b6:	aa0c      	add	r2, sp, #48	@ 0x30
 80061b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80061bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061be:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80061c0:	f8dd b008 	ldr.w	fp, [sp, #8]
 80061c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80061c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80061ca:	ab98      	add	r3, sp, #608	@ 0x260
 80061cc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061d0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 80061d4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80061d6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061da:	ae0c      	add	r6, sp, #48	@ 0x30
 80061dc:	4699      	mov	r9, r3
 80061de:	46b0      	mov	r8, r6
 80061e0:	465f      	mov	r7, fp
 80061e2:	9307      	str	r3, [sp, #28]
 80061e4:	2f00      	cmp	r7, #0
 80061e6:	dc71      	bgt.n	80062cc <__kernel_rem_pio2+0x1f0>
 80061e8:	4652      	mov	r2, sl
 80061ea:	4620      	mov	r0, r4
 80061ec:	4629      	mov	r1, r5
 80061ee:	f000 fa97 	bl	8006720 <scalbn>
 80061f2:	2200      	movs	r2, #0
 80061f4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80061f8:	4604      	mov	r4, r0
 80061fa:	460d      	mov	r5, r1
 80061fc:	f7fa f964 	bl	80004c8 <__aeabi_dmul>
 8006200:	f000 fb02 	bl	8006808 <floor>
 8006204:	2200      	movs	r2, #0
 8006206:	4b74      	ldr	r3, [pc, #464]	@ (80063d8 <__kernel_rem_pio2+0x2fc>)
 8006208:	f7fa f95e 	bl	80004c8 <__aeabi_dmul>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4620      	mov	r0, r4
 8006212:	4629      	mov	r1, r5
 8006214:	f7f9 ffa0 	bl	8000158 <__aeabi_dsub>
 8006218:	460d      	mov	r5, r1
 800621a:	4604      	mov	r4, r0
 800621c:	f7fa fbee 	bl	80009fc <__aeabi_d2iz>
 8006220:	9005      	str	r0, [sp, #20]
 8006222:	f7fa f8e7 	bl	80003f4 <__aeabi_i2d>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4620      	mov	r0, r4
 800622c:	4629      	mov	r1, r5
 800622e:	f7f9 ff93 	bl	8000158 <__aeabi_dsub>
 8006232:	f1ba 0f00 	cmp.w	sl, #0
 8006236:	4680      	mov	r8, r0
 8006238:	4689      	mov	r9, r1
 800623a:	dd6d      	ble.n	8006318 <__kernel_rem_pio2+0x23c>
 800623c:	f10b 31ff 	add.w	r1, fp, #4294967295
 8006240:	ab0c      	add	r3, sp, #48	@ 0x30
 8006242:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006246:	9c05      	ldr	r4, [sp, #20]
 8006248:	f1ca 0018 	rsb	r0, sl, #24
 800624c:	fa43 f200 	asr.w	r2, r3, r0
 8006250:	4414      	add	r4, r2
 8006252:	4082      	lsls	r2, r0
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	aa0c      	add	r2, sp, #48	@ 0x30
 8006258:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800625c:	f1ca 0217 	rsb	r2, sl, #23
 8006260:	9405      	str	r4, [sp, #20]
 8006262:	4113      	asrs	r3, r2
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	9b00      	ldr	r3, [sp, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	dd64      	ble.n	8006336 <__kernel_rem_pio2+0x25a>
 800626c:	2200      	movs	r2, #0
 800626e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006272:	4614      	mov	r4, r2
 8006274:	9b05      	ldr	r3, [sp, #20]
 8006276:	3301      	adds	r3, #1
 8006278:	9305      	str	r3, [sp, #20]
 800627a:	4593      	cmp	fp, r2
 800627c:	f300 809d 	bgt.w	80063ba <__kernel_rem_pio2+0x2de>
 8006280:	f1ba 0f00 	cmp.w	sl, #0
 8006284:	dd07      	ble.n	8006296 <__kernel_rem_pio2+0x1ba>
 8006286:	f1ba 0f01 	cmp.w	sl, #1
 800628a:	f000 80b3 	beq.w	80063f4 <__kernel_rem_pio2+0x318>
 800628e:	f1ba 0f02 	cmp.w	sl, #2
 8006292:	f000 80ba 	beq.w	800640a <__kernel_rem_pio2+0x32e>
 8006296:	9b00      	ldr	r3, [sp, #0]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d14c      	bne.n	8006336 <__kernel_rem_pio2+0x25a>
 800629c:	4642      	mov	r2, r8
 800629e:	464b      	mov	r3, r9
 80062a0:	2000      	movs	r0, #0
 80062a2:	494e      	ldr	r1, [pc, #312]	@ (80063dc <__kernel_rem_pio2+0x300>)
 80062a4:	f7f9 ff58 	bl	8000158 <__aeabi_dsub>
 80062a8:	4680      	mov	r8, r0
 80062aa:	4689      	mov	r9, r1
 80062ac:	2c00      	cmp	r4, #0
 80062ae:	d042      	beq.n	8006336 <__kernel_rem_pio2+0x25a>
 80062b0:	4652      	mov	r2, sl
 80062b2:	2000      	movs	r0, #0
 80062b4:	4949      	ldr	r1, [pc, #292]	@ (80063dc <__kernel_rem_pio2+0x300>)
 80062b6:	f000 fa33 	bl	8006720 <scalbn>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4640      	mov	r0, r8
 80062c0:	4649      	mov	r1, r9
 80062c2:	f7f9 ff49 	bl	8000158 <__aeabi_dsub>
 80062c6:	4680      	mov	r8, r0
 80062c8:	4689      	mov	r9, r1
 80062ca:	e034      	b.n	8006336 <__kernel_rem_pio2+0x25a>
 80062cc:	2200      	movs	r2, #0
 80062ce:	4b44      	ldr	r3, [pc, #272]	@ (80063e0 <__kernel_rem_pio2+0x304>)
 80062d0:	4620      	mov	r0, r4
 80062d2:	4629      	mov	r1, r5
 80062d4:	f7fa f8f8 	bl	80004c8 <__aeabi_dmul>
 80062d8:	f7fa fb90 	bl	80009fc <__aeabi_d2iz>
 80062dc:	f7fa f88a 	bl	80003f4 <__aeabi_i2d>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	e9cd 2300 	strd	r2, r3, [sp]
 80062e8:	2200      	movs	r2, #0
 80062ea:	4b3e      	ldr	r3, [pc, #248]	@ (80063e4 <__kernel_rem_pio2+0x308>)
 80062ec:	f7fa f8ec 	bl	80004c8 <__aeabi_dmul>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4620      	mov	r0, r4
 80062f6:	4629      	mov	r1, r5
 80062f8:	f7f9 ff2e 	bl	8000158 <__aeabi_dsub>
 80062fc:	f7fa fb7e 	bl	80009fc <__aeabi_d2iz>
 8006300:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8006304:	f848 0b04 	str.w	r0, [r8], #4
 8006308:	e9dd 0100 	ldrd	r0, r1, [sp]
 800630c:	f7f9 ff26 	bl	800015c <__adddf3>
 8006310:	3f01      	subs	r7, #1
 8006312:	4604      	mov	r4, r0
 8006314:	460d      	mov	r5, r1
 8006316:	e765      	b.n	80061e4 <__kernel_rem_pio2+0x108>
 8006318:	d106      	bne.n	8006328 <__kernel_rem_pio2+0x24c>
 800631a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800631e:	aa0c      	add	r2, sp, #48	@ 0x30
 8006320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006324:	15db      	asrs	r3, r3, #23
 8006326:	e79d      	b.n	8006264 <__kernel_rem_pio2+0x188>
 8006328:	2200      	movs	r2, #0
 800632a:	4b2f      	ldr	r3, [pc, #188]	@ (80063e8 <__kernel_rem_pio2+0x30c>)
 800632c:	f7fa fb52 	bl	80009d4 <__aeabi_dcmpge>
 8006330:	2800      	cmp	r0, #0
 8006332:	d13f      	bne.n	80063b4 <__kernel_rem_pio2+0x2d8>
 8006334:	9000      	str	r0, [sp, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	2300      	movs	r3, #0
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7fa fb2b 	bl	8000998 <__aeabi_dcmpeq>
 8006342:	2800      	cmp	r0, #0
 8006344:	f000 80b0 	beq.w	80064a8 <__kernel_rem_pio2+0x3cc>
 8006348:	2200      	movs	r2, #0
 800634a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800634e:	9902      	ldr	r1, [sp, #8]
 8006350:	428b      	cmp	r3, r1
 8006352:	da62      	bge.n	800641a <__kernel_rem_pio2+0x33e>
 8006354:	2a00      	cmp	r2, #0
 8006356:	d077      	beq.n	8006448 <__kernel_rem_pio2+0x36c>
 8006358:	f10b 3bff 	add.w	fp, fp, #4294967295
 800635c:	ab0c      	add	r3, sp, #48	@ 0x30
 800635e:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006362:	f1aa 0a18 	sub.w	sl, sl, #24
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f6      	beq.n	8006358 <__kernel_rem_pio2+0x27c>
 800636a:	4652      	mov	r2, sl
 800636c:	2000      	movs	r0, #0
 800636e:	491b      	ldr	r1, [pc, #108]	@ (80063dc <__kernel_rem_pio2+0x300>)
 8006370:	f000 f9d6 	bl	8006720 <scalbn>
 8006374:	465d      	mov	r5, fp
 8006376:	4606      	mov	r6, r0
 8006378:	460f      	mov	r7, r1
 800637a:	f04f 0900 	mov.w	r9, #0
 800637e:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006380:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80063e0 <__kernel_rem_pio2+0x304>
 8006384:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8006388:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800638c:	2d00      	cmp	r5, #0
 800638e:	f280 80c1 	bge.w	8006514 <__kernel_rem_pio2+0x438>
 8006392:	465d      	mov	r5, fp
 8006394:	2d00      	cmp	r5, #0
 8006396:	f2c0 80f1 	blt.w	800657c <__kernel_rem_pio2+0x4a0>
 800639a:	4b14      	ldr	r3, [pc, #80]	@ (80063ec <__kernel_rem_pio2+0x310>)
 800639c:	f04f 0900 	mov.w	r9, #0
 80063a0:	9306      	str	r3, [sp, #24]
 80063a2:	ab70      	add	r3, sp, #448	@ 0x1c0
 80063a4:	f04f 0a00 	mov.w	sl, #0
 80063a8:	2700      	movs	r7, #0
 80063aa:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 80063ae:	ebab 0605 	sub.w	r6, fp, r5
 80063b2:	e0d7      	b.n	8006564 <__kernel_rem_pio2+0x488>
 80063b4:	2302      	movs	r3, #2
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	e758      	b.n	800626c <__kernel_rem_pio2+0x190>
 80063ba:	f856 3b04 	ldr.w	r3, [r6], #4
 80063be:	b9bc      	cbnz	r4, 80063f0 <__kernel_rem_pio2+0x314>
 80063c0:	b123      	cbz	r3, 80063cc <__kernel_rem_pio2+0x2f0>
 80063c2:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80063c6:	f846 3c04 	str.w	r3, [r6, #-4]
 80063ca:	2301      	movs	r3, #1
 80063cc:	461c      	mov	r4, r3
 80063ce:	3201      	adds	r2, #1
 80063d0:	e753      	b.n	800627a <__kernel_rem_pio2+0x19e>
 80063d2:	bf00      	nop
 80063d4:	08006b18 	.word	0x08006b18
 80063d8:	40200000 	.word	0x40200000
 80063dc:	3ff00000 	.word	0x3ff00000
 80063e0:	3e700000 	.word	0x3e700000
 80063e4:	41700000 	.word	0x41700000
 80063e8:	3fe00000 	.word	0x3fe00000
 80063ec:	08006ad8 	.word	0x08006ad8
 80063f0:	1acb      	subs	r3, r1, r3
 80063f2:	e7e8      	b.n	80063c6 <__kernel_rem_pio2+0x2ea>
 80063f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80063f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80063fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006402:	a90c      	add	r1, sp, #48	@ 0x30
 8006404:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006408:	e745      	b.n	8006296 <__kernel_rem_pio2+0x1ba>
 800640a:	f10b 32ff 	add.w	r2, fp, #4294967295
 800640e:	ab0c      	add	r3, sp, #48	@ 0x30
 8006410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006414:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006418:	e7f3      	b.n	8006402 <__kernel_rem_pio2+0x326>
 800641a:	a90c      	add	r1, sp, #48	@ 0x30
 800641c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006420:	3b01      	subs	r3, #1
 8006422:	430a      	orrs	r2, r1
 8006424:	e793      	b.n	800634e <__kernel_rem_pio2+0x272>
 8006426:	3401      	adds	r4, #1
 8006428:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800642c:	2a00      	cmp	r2, #0
 800642e:	d0fa      	beq.n	8006426 <__kernel_rem_pio2+0x34a>
 8006430:	9b08      	ldr	r3, [sp, #32]
 8006432:	aa20      	add	r2, sp, #128	@ 0x80
 8006434:	445b      	add	r3, fp
 8006436:	f10b 0801 	add.w	r8, fp, #1
 800643a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800643e:	445c      	add	r4, fp
 8006440:	4544      	cmp	r4, r8
 8006442:	da04      	bge.n	800644e <__kernel_rem_pio2+0x372>
 8006444:	46a3      	mov	fp, r4
 8006446:	e6c0      	b.n	80061ca <__kernel_rem_pio2+0xee>
 8006448:	2401      	movs	r4, #1
 800644a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800644c:	e7ec      	b.n	8006428 <__kernel_rem_pio2+0x34c>
 800644e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006450:	46ab      	mov	fp, r5
 8006452:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006456:	f7f9 ffcd 	bl	80003f4 <__aeabi_i2d>
 800645a:	f04f 0900 	mov.w	r9, #0
 800645e:	2600      	movs	r6, #0
 8006460:	2700      	movs	r7, #0
 8006462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006464:	e9c5 0100 	strd	r0, r1, [r5]
 8006468:	3b08      	subs	r3, #8
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	9b06      	ldr	r3, [sp, #24]
 800646e:	4599      	cmp	r9, r3
 8006470:	dd07      	ble.n	8006482 <__kernel_rem_pio2+0x3a6>
 8006472:	9b07      	ldr	r3, [sp, #28]
 8006474:	f108 0801 	add.w	r8, r8, #1
 8006478:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800647c:	3508      	adds	r5, #8
 800647e:	9307      	str	r3, [sp, #28]
 8006480:	e7de      	b.n	8006440 <__kernel_rem_pio2+0x364>
 8006482:	9900      	ldr	r1, [sp, #0]
 8006484:	f109 0901 	add.w	r9, r9, #1
 8006488:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800648c:	9100      	str	r1, [sp, #0]
 800648e:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8006492:	f7fa f819 	bl	80004c8 <__aeabi_dmul>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4630      	mov	r0, r6
 800649c:	4639      	mov	r1, r7
 800649e:	f7f9 fe5d 	bl	800015c <__adddf3>
 80064a2:	4606      	mov	r6, r0
 80064a4:	460f      	mov	r7, r1
 80064a6:	e7e1      	b.n	800646c <__kernel_rem_pio2+0x390>
 80064a8:	f1ca 0200 	rsb	r2, sl, #0
 80064ac:	4640      	mov	r0, r8
 80064ae:	4649      	mov	r1, r9
 80064b0:	f000 f936 	bl	8006720 <scalbn>
 80064b4:	2200      	movs	r2, #0
 80064b6:	4b97      	ldr	r3, [pc, #604]	@ (8006714 <__kernel_rem_pio2+0x638>)
 80064b8:	4604      	mov	r4, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	f7fa fa8a 	bl	80009d4 <__aeabi_dcmpge>
 80064c0:	b300      	cbz	r0, 8006504 <__kernel_rem_pio2+0x428>
 80064c2:	2200      	movs	r2, #0
 80064c4:	4b94      	ldr	r3, [pc, #592]	@ (8006718 <__kernel_rem_pio2+0x63c>)
 80064c6:	4620      	mov	r0, r4
 80064c8:	4629      	mov	r1, r5
 80064ca:	f7f9 fffd 	bl	80004c8 <__aeabi_dmul>
 80064ce:	f7fa fa95 	bl	80009fc <__aeabi_d2iz>
 80064d2:	4606      	mov	r6, r0
 80064d4:	f7f9 ff8e 	bl	80003f4 <__aeabi_i2d>
 80064d8:	2200      	movs	r2, #0
 80064da:	4b8e      	ldr	r3, [pc, #568]	@ (8006714 <__kernel_rem_pio2+0x638>)
 80064dc:	f7f9 fff4 	bl	80004c8 <__aeabi_dmul>
 80064e0:	460b      	mov	r3, r1
 80064e2:	4602      	mov	r2, r0
 80064e4:	4629      	mov	r1, r5
 80064e6:	4620      	mov	r0, r4
 80064e8:	f7f9 fe36 	bl	8000158 <__aeabi_dsub>
 80064ec:	f7fa fa86 	bl	80009fc <__aeabi_d2iz>
 80064f0:	ab0c      	add	r3, sp, #48	@ 0x30
 80064f2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80064f6:	f10b 0b01 	add.w	fp, fp, #1
 80064fa:	f10a 0a18 	add.w	sl, sl, #24
 80064fe:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8006502:	e732      	b.n	800636a <__kernel_rem_pio2+0x28e>
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	f7fa fa78 	bl	80009fc <__aeabi_d2iz>
 800650c:	ab0c      	add	r3, sp, #48	@ 0x30
 800650e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8006512:	e72a      	b.n	800636a <__kernel_rem_pio2+0x28e>
 8006514:	ab0c      	add	r3, sp, #48	@ 0x30
 8006516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800651a:	f7f9 ff6b 	bl	80003f4 <__aeabi_i2d>
 800651e:	4632      	mov	r2, r6
 8006520:	463b      	mov	r3, r7
 8006522:	f7f9 ffd1 	bl	80004c8 <__aeabi_dmul>
 8006526:	464a      	mov	r2, r9
 8006528:	e868 0102 	strd	r0, r1, [r8], #-8
 800652c:	4653      	mov	r3, sl
 800652e:	4630      	mov	r0, r6
 8006530:	4639      	mov	r1, r7
 8006532:	f7f9 ffc9 	bl	80004c8 <__aeabi_dmul>
 8006536:	3d01      	subs	r5, #1
 8006538:	4606      	mov	r6, r0
 800653a:	460f      	mov	r7, r1
 800653c:	e726      	b.n	800638c <__kernel_rem_pio2+0x2b0>
 800653e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8006542:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006546:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800654a:	f8cd c018 	str.w	ip, [sp, #24]
 800654e:	f7f9 ffbb 	bl	80004c8 <__aeabi_dmul>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4648      	mov	r0, r9
 8006558:	4651      	mov	r1, sl
 800655a:	f7f9 fdff 	bl	800015c <__adddf3>
 800655e:	4681      	mov	r9, r0
 8006560:	468a      	mov	sl, r1
 8006562:	3701      	adds	r7, #1
 8006564:	9b02      	ldr	r3, [sp, #8]
 8006566:	429f      	cmp	r7, r3
 8006568:	dc01      	bgt.n	800656e <__kernel_rem_pio2+0x492>
 800656a:	42b7      	cmp	r7, r6
 800656c:	dde7      	ble.n	800653e <__kernel_rem_pio2+0x462>
 800656e:	ab48      	add	r3, sp, #288	@ 0x120
 8006570:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006574:	e9c6 9a00 	strd	r9, sl, [r6]
 8006578:	3d01      	subs	r5, #1
 800657a:	e70b      	b.n	8006394 <__kernel_rem_pio2+0x2b8>
 800657c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800657e:	2b02      	cmp	r3, #2
 8006580:	dc09      	bgt.n	8006596 <__kernel_rem_pio2+0x4ba>
 8006582:	2b00      	cmp	r3, #0
 8006584:	dc2c      	bgt.n	80065e0 <__kernel_rem_pio2+0x504>
 8006586:	d04e      	beq.n	8006626 <__kernel_rem_pio2+0x54a>
 8006588:	9b05      	ldr	r3, [sp, #20]
 800658a:	f003 0007 	and.w	r0, r3, #7
 800658e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006596:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8006598:	2b03      	cmp	r3, #3
 800659a:	d1f5      	bne.n	8006588 <__kernel_rem_pio2+0x4ac>
 800659c:	ab48      	add	r3, sp, #288	@ 0x120
 800659e:	441c      	add	r4, r3
 80065a0:	4625      	mov	r5, r4
 80065a2:	46da      	mov	sl, fp
 80065a4:	f1ba 0f00 	cmp.w	sl, #0
 80065a8:	dc63      	bgt.n	8006672 <__kernel_rem_pio2+0x596>
 80065aa:	4625      	mov	r5, r4
 80065ac:	46da      	mov	sl, fp
 80065ae:	f1ba 0f01 	cmp.w	sl, #1
 80065b2:	dc7b      	bgt.n	80066ac <__kernel_rem_pio2+0x5d0>
 80065b4:	2000      	movs	r0, #0
 80065b6:	2100      	movs	r1, #0
 80065b8:	f1bb 0f01 	cmp.w	fp, #1
 80065bc:	f300 8093 	bgt.w	80066e6 <__kernel_rem_pio2+0x60a>
 80065c0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80065c4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80065c8:	9b00      	ldr	r3, [sp, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 8092 	bne.w	80066f4 <__kernel_rem_pio2+0x618>
 80065d0:	9b04      	ldr	r3, [sp, #16]
 80065d2:	e9c3 5600 	strd	r5, r6, [r3]
 80065d6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80065da:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80065de:	e7d3      	b.n	8006588 <__kernel_rem_pio2+0x4ac>
 80065e0:	465d      	mov	r5, fp
 80065e2:	2000      	movs	r0, #0
 80065e4:	2100      	movs	r1, #0
 80065e6:	ab48      	add	r3, sp, #288	@ 0x120
 80065e8:	441c      	add	r4, r3
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	da32      	bge.n	8006654 <__kernel_rem_pio2+0x578>
 80065ee:	9b00      	ldr	r3, [sp, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d035      	beq.n	8006660 <__kernel_rem_pio2+0x584>
 80065f4:	4602      	mov	r2, r0
 80065f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80065fa:	9c04      	ldr	r4, [sp, #16]
 80065fc:	2501      	movs	r5, #1
 80065fe:	e9c4 2300 	strd	r2, r3, [r4]
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800660a:	f7f9 fda5 	bl	8000158 <__aeabi_dsub>
 800660e:	ac48      	add	r4, sp, #288	@ 0x120
 8006610:	45ab      	cmp	fp, r5
 8006612:	da28      	bge.n	8006666 <__kernel_rem_pio2+0x58a>
 8006614:	9b00      	ldr	r3, [sp, #0]
 8006616:	b113      	cbz	r3, 800661e <__kernel_rem_pio2+0x542>
 8006618:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800661c:	4619      	mov	r1, r3
 800661e:	9b04      	ldr	r3, [sp, #16]
 8006620:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006624:	e7b0      	b.n	8006588 <__kernel_rem_pio2+0x4ac>
 8006626:	2000      	movs	r0, #0
 8006628:	2100      	movs	r1, #0
 800662a:	ab48      	add	r3, sp, #288	@ 0x120
 800662c:	441c      	add	r4, r3
 800662e:	f1bb 0f00 	cmp.w	fp, #0
 8006632:	da08      	bge.n	8006646 <__kernel_rem_pio2+0x56a>
 8006634:	9b00      	ldr	r3, [sp, #0]
 8006636:	b113      	cbz	r3, 800663e <__kernel_rem_pio2+0x562>
 8006638:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800663c:	4619      	mov	r1, r3
 800663e:	9b04      	ldr	r3, [sp, #16]
 8006640:	e9c3 0100 	strd	r0, r1, [r3]
 8006644:	e7a0      	b.n	8006588 <__kernel_rem_pio2+0x4ac>
 8006646:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800664a:	f7f9 fd87 	bl	800015c <__adddf3>
 800664e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006652:	e7ec      	b.n	800662e <__kernel_rem_pio2+0x552>
 8006654:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8006658:	f7f9 fd80 	bl	800015c <__adddf3>
 800665c:	3d01      	subs	r5, #1
 800665e:	e7c4      	b.n	80065ea <__kernel_rem_pio2+0x50e>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	e7c9      	b.n	80065fa <__kernel_rem_pio2+0x51e>
 8006666:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800666a:	f7f9 fd77 	bl	800015c <__adddf3>
 800666e:	3501      	adds	r5, #1
 8006670:	e7ce      	b.n	8006610 <__kernel_rem_pio2+0x534>
 8006672:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006676:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800667a:	4640      	mov	r0, r8
 800667c:	4649      	mov	r1, r9
 800667e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006682:	f7f9 fd6b 	bl	800015c <__adddf3>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4606      	mov	r6, r0
 800668c:	460f      	mov	r7, r1
 800668e:	4640      	mov	r0, r8
 8006690:	4649      	mov	r1, r9
 8006692:	f7f9 fd61 	bl	8000158 <__aeabi_dsub>
 8006696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800669a:	f7f9 fd5f 	bl	800015c <__adddf3>
 800669e:	e865 0102 	strd	r0, r1, [r5], #-8
 80066a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066a6:	e9c5 6700 	strd	r6, r7, [r5]
 80066aa:	e77b      	b.n	80065a4 <__kernel_rem_pio2+0x4c8>
 80066ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066b0:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 80066b4:	4640      	mov	r0, r8
 80066b6:	4649      	mov	r1, r9
 80066b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066bc:	f7f9 fd4e 	bl	800015c <__adddf3>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4606      	mov	r6, r0
 80066c6:	460f      	mov	r7, r1
 80066c8:	4640      	mov	r0, r8
 80066ca:	4649      	mov	r1, r9
 80066cc:	f7f9 fd44 	bl	8000158 <__aeabi_dsub>
 80066d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066d4:	f7f9 fd42 	bl	800015c <__adddf3>
 80066d8:	e865 0102 	strd	r0, r1, [r5], #-8
 80066dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066e0:	e9c5 6700 	strd	r6, r7, [r5]
 80066e4:	e763      	b.n	80065ae <__kernel_rem_pio2+0x4d2>
 80066e6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80066ea:	f7f9 fd37 	bl	800015c <__adddf3>
 80066ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066f2:	e761      	b.n	80065b8 <__kernel_rem_pio2+0x4dc>
 80066f4:	9b04      	ldr	r3, [sp, #16]
 80066f6:	9a04      	ldr	r2, [sp, #16]
 80066f8:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80066fc:	601d      	str	r5, [r3, #0]
 80066fe:	605c      	str	r4, [r3, #4]
 8006700:	609f      	str	r7, [r3, #8]
 8006702:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8006706:	60d3      	str	r3, [r2, #12]
 8006708:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800670c:	6110      	str	r0, [r2, #16]
 800670e:	6153      	str	r3, [r2, #20]
 8006710:	e73a      	b.n	8006588 <__kernel_rem_pio2+0x4ac>
 8006712:	bf00      	nop
 8006714:	41700000 	.word	0x41700000
 8006718:	3e700000 	.word	0x3e700000
 800671c:	00000000 	.word	0x00000000

08006720 <scalbn>:
 8006720:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006724:	4616      	mov	r6, r2
 8006726:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800672a:	4683      	mov	fp, r0
 800672c:	468c      	mov	ip, r1
 800672e:	460b      	mov	r3, r1
 8006730:	b982      	cbnz	r2, 8006754 <scalbn+0x34>
 8006732:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006736:	4303      	orrs	r3, r0
 8006738:	d035      	beq.n	80067a6 <scalbn+0x86>
 800673a:	4b2d      	ldr	r3, [pc, #180]	@ (80067f0 <scalbn+0xd0>)
 800673c:	2200      	movs	r2, #0
 800673e:	f7f9 fec3 	bl	80004c8 <__aeabi_dmul>
 8006742:	4b2c      	ldr	r3, [pc, #176]	@ (80067f4 <scalbn+0xd4>)
 8006744:	4683      	mov	fp, r0
 8006746:	429e      	cmp	r6, r3
 8006748:	468c      	mov	ip, r1
 800674a:	da0d      	bge.n	8006768 <scalbn+0x48>
 800674c:	a324      	add	r3, pc, #144	@ (adr r3, 80067e0 <scalbn+0xc0>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	e019      	b.n	8006788 <scalbn+0x68>
 8006754:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8006758:	42ba      	cmp	r2, r7
 800675a:	d109      	bne.n	8006770 <scalbn+0x50>
 800675c:	4602      	mov	r2, r0
 800675e:	f7f9 fcfd 	bl	800015c <__adddf3>
 8006762:	4683      	mov	fp, r0
 8006764:	468c      	mov	ip, r1
 8006766:	e01e      	b.n	80067a6 <scalbn+0x86>
 8006768:	460b      	mov	r3, r1
 800676a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800676e:	3a36      	subs	r2, #54	@ 0x36
 8006770:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006774:	428e      	cmp	r6, r1
 8006776:	dd0a      	ble.n	800678e <scalbn+0x6e>
 8006778:	a31b      	add	r3, pc, #108	@ (adr r3, 80067e8 <scalbn+0xc8>)
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	4665      	mov	r5, ip
 8006780:	f363 051e 	bfi	r5, r3, #0, #31
 8006784:	4629      	mov	r1, r5
 8006786:	481c      	ldr	r0, [pc, #112]	@ (80067f8 <scalbn+0xd8>)
 8006788:	f7f9 fe9e 	bl	80004c8 <__aeabi_dmul>
 800678c:	e7e9      	b.n	8006762 <scalbn+0x42>
 800678e:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006792:	4432      	add	r2, r6
 8006794:	428a      	cmp	r2, r1
 8006796:	dcef      	bgt.n	8006778 <scalbn+0x58>
 8006798:	2a00      	cmp	r2, #0
 800679a:	dd08      	ble.n	80067ae <scalbn+0x8e>
 800679c:	f36f 531e 	bfc	r3, #20, #11
 80067a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80067a4:	46ac      	mov	ip, r5
 80067a6:	4658      	mov	r0, fp
 80067a8:	4661      	mov	r1, ip
 80067aa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80067ae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80067b2:	da09      	bge.n	80067c8 <scalbn+0xa8>
 80067b4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80067b8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80067bc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80067c0:	480e      	ldr	r0, [pc, #56]	@ (80067fc <scalbn+0xdc>)
 80067c2:	f041 011f 	orr.w	r1, r1, #31
 80067c6:	e7c1      	b.n	800674c <scalbn+0x2c>
 80067c8:	3236      	adds	r2, #54	@ 0x36
 80067ca:	f36f 531e 	bfc	r3, #20, #11
 80067ce:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80067d2:	4658      	mov	r0, fp
 80067d4:	4629      	mov	r1, r5
 80067d6:	2200      	movs	r2, #0
 80067d8:	4b09      	ldr	r3, [pc, #36]	@ (8006800 <scalbn+0xe0>)
 80067da:	e7d5      	b.n	8006788 <scalbn+0x68>
 80067dc:	f3af 8000 	nop.w
 80067e0:	c2f8f359 	.word	0xc2f8f359
 80067e4:	01a56e1f 	.word	0x01a56e1f
 80067e8:	8800759c 	.word	0x8800759c
 80067ec:	7e37e43c 	.word	0x7e37e43c
 80067f0:	43500000 	.word	0x43500000
 80067f4:	ffff3cb0 	.word	0xffff3cb0
 80067f8:	8800759c 	.word	0x8800759c
 80067fc:	c2f8f359 	.word	0xc2f8f359
 8006800:	3c900000 	.word	0x3c900000
 8006804:	00000000 	.word	0x00000000

08006808 <floor>:
 8006808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800680c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006810:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8006814:	2e13      	cmp	r6, #19
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	460c      	mov	r4, r1
 800681c:	4605      	mov	r5, r0
 800681e:	4680      	mov	r8, r0
 8006820:	dc35      	bgt.n	800688e <floor+0x86>
 8006822:	2e00      	cmp	r6, #0
 8006824:	da17      	bge.n	8006856 <floor+0x4e>
 8006826:	a334      	add	r3, pc, #208	@ (adr r3, 80068f8 <floor+0xf0>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7f9 fc96 	bl	800015c <__adddf3>
 8006830:	2200      	movs	r2, #0
 8006832:	2300      	movs	r3, #0
 8006834:	f7fa f8d8 	bl	80009e8 <__aeabi_dcmpgt>
 8006838:	b150      	cbz	r0, 8006850 <floor+0x48>
 800683a:	2c00      	cmp	r4, #0
 800683c:	da57      	bge.n	80068ee <floor+0xe6>
 800683e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006842:	432c      	orrs	r4, r5
 8006844:	2500      	movs	r5, #0
 8006846:	42ac      	cmp	r4, r5
 8006848:	4c2d      	ldr	r4, [pc, #180]	@ (8006900 <floor+0xf8>)
 800684a:	bf08      	it	eq
 800684c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006850:	4623      	mov	r3, r4
 8006852:	462a      	mov	r2, r5
 8006854:	e024      	b.n	80068a0 <floor+0x98>
 8006856:	4f2b      	ldr	r7, [pc, #172]	@ (8006904 <floor+0xfc>)
 8006858:	4137      	asrs	r7, r6
 800685a:	ea01 0c07 	and.w	ip, r1, r7
 800685e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8006862:	d01d      	beq.n	80068a0 <floor+0x98>
 8006864:	a324      	add	r3, pc, #144	@ (adr r3, 80068f8 <floor+0xf0>)
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f7f9 fc77 	bl	800015c <__adddf3>
 800686e:	2200      	movs	r2, #0
 8006870:	2300      	movs	r3, #0
 8006872:	f7fa f8b9 	bl	80009e8 <__aeabi_dcmpgt>
 8006876:	2800      	cmp	r0, #0
 8006878:	d0ea      	beq.n	8006850 <floor+0x48>
 800687a:	2c00      	cmp	r4, #0
 800687c:	bfbe      	ittt	lt
 800687e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006882:	4133      	asrlt	r3, r6
 8006884:	18e4      	addlt	r4, r4, r3
 8006886:	2500      	movs	r5, #0
 8006888:	ea24 0407 	bic.w	r4, r4, r7
 800688c:	e7e0      	b.n	8006850 <floor+0x48>
 800688e:	2e33      	cmp	r6, #51	@ 0x33
 8006890:	dd0a      	ble.n	80068a8 <floor+0xa0>
 8006892:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006896:	d103      	bne.n	80068a0 <floor+0x98>
 8006898:	f7f9 fc60 	bl	800015c <__adddf3>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4610      	mov	r0, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a8:	f04f 3cff 	mov.w	ip, #4294967295
 80068ac:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80068b0:	fa2c f707 	lsr.w	r7, ip, r7
 80068b4:	4207      	tst	r7, r0
 80068b6:	d0f3      	beq.n	80068a0 <floor+0x98>
 80068b8:	a30f      	add	r3, pc, #60	@ (adr r3, 80068f8 <floor+0xf0>)
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	f7f9 fc4d 	bl	800015c <__adddf3>
 80068c2:	2200      	movs	r2, #0
 80068c4:	2300      	movs	r3, #0
 80068c6:	f7fa f88f 	bl	80009e8 <__aeabi_dcmpgt>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	d0c0      	beq.n	8006850 <floor+0x48>
 80068ce:	2c00      	cmp	r4, #0
 80068d0:	da0a      	bge.n	80068e8 <floor+0xe0>
 80068d2:	2e14      	cmp	r6, #20
 80068d4:	d101      	bne.n	80068da <floor+0xd2>
 80068d6:	3401      	adds	r4, #1
 80068d8:	e006      	b.n	80068e8 <floor+0xe0>
 80068da:	2301      	movs	r3, #1
 80068dc:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80068e0:	40b3      	lsls	r3, r6
 80068e2:	441d      	add	r5, r3
 80068e4:	4545      	cmp	r5, r8
 80068e6:	d3f6      	bcc.n	80068d6 <floor+0xce>
 80068e8:	ea25 0507 	bic.w	r5, r5, r7
 80068ec:	e7b0      	b.n	8006850 <floor+0x48>
 80068ee:	2500      	movs	r5, #0
 80068f0:	462c      	mov	r4, r5
 80068f2:	e7ad      	b.n	8006850 <floor+0x48>
 80068f4:	f3af 8000 	nop.w
 80068f8:	8800759c 	.word	0x8800759c
 80068fc:	7e37e43c 	.word	0x7e37e43c
 8006900:	bff00000 	.word	0xbff00000
 8006904:	000fffff 	.word	0x000fffff

08006908 <_init>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	bf00      	nop
 800690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690e:	bc08      	pop	{r3}
 8006910:	469e      	mov	lr, r3
 8006912:	4770      	bx	lr

08006914 <_fini>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	bf00      	nop
 8006918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691a:	bc08      	pop	{r3}
 800691c:	469e      	mov	lr, r3
 800691e:	4770      	bx	lr
