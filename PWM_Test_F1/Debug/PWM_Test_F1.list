
PWM_Test_F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000931c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08009430  08009430  0000a430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800988c  0800988c  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800988c  0800988c  0000a88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009894  08009894  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009894  08009894  0000a894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009898  08009898  0000a898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800989c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  200001d4  08009a70  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08009a70  0000b5f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d325  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002058  00000000  00000000  00018522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0001a580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a62  00000000  00000000  0001b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189c5  00000000  00000000  0001bd32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e707  00000000  00000000  000346f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cbdb  00000000  00000000  00042dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf9d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ddc  00000000  00000000  000cfa1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d47f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009414 	.word	0x08009414

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08009414 	.word	0x08009414

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <MotorInit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MotorInit(Motor *motor, TIM_HandleTypeDef *htim, uint16_t CH1, uint16_t CH2)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4611      	mov	r1, r2
 80011d4:	461a      	mov	r2, r3
 80011d6:	460b      	mov	r3, r1
 80011d8:	80fb      	strh	r3, [r7, #6]
 80011da:	4613      	mov	r3, r2
 80011dc:	80bb      	strh	r3, [r7, #4]
	motor -> htim = htim;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	601a      	str	r2, [r3, #0]
	motor -> CH1 = CH1;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	88fa      	ldrh	r2, [r7, #6]
 80011e8:	809a      	strh	r2, [r3, #4]
	motor -> CH2 = CH2;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	88ba      	ldrh	r2, [r7, #4]
 80011ee:	80da      	strh	r2, [r3, #6]
	HAL_TIM_PWM_Start(motor -> htim, motor -> CH1);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	889b      	ldrh	r3, [r3, #4]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4610      	mov	r0, r2
 80011fc:	f002 f94a 	bl	8003494 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(motor -> htim, motor -> CH2);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	88db      	ldrh	r3, [r3, #6]
 8001208:	4619      	mov	r1, r3
 800120a:	4610      	mov	r0, r2
 800120c:	f002 f942 	bl	8003494 <HAL_TIM_PWM_Start>
}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <drive>:

void drive(Motor *motor, int16_t speed)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
	if(speed > 0)
 8001224:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001228:	2b00      	cmp	r3, #0
 800122a:	dd4a      	ble.n	80012c2 <drive+0xaa>
	{
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH1, speed);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	889b      	ldrh	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d106      	bne.n	8001242 <drive+0x2a>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800123e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001240:	e01b      	b.n	800127a <drive+0x62>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	2b04      	cmp	r3, #4
 8001248:	d106      	bne.n	8001258 <drive+0x40>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001254:	6393      	str	r3, [r2, #56]	@ 0x38
 8001256:	e010      	b.n	800127a <drive+0x62>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	889b      	ldrh	r3, [r3, #4]
 800125c:	2b08      	cmp	r3, #8
 800125e:	d106      	bne.n	800126e <drive+0x56>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800126a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800126c:	e005      	b.n	800127a <drive+0x62>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001278:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH2, 0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	88db      	ldrh	r3, [r3, #6]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d105      	bne.n	800128e <drive+0x76>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2200      	movs	r2, #0
 800128a:	635a      	str	r2, [r3, #52]	@ 0x34
	else
	{
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH1, 0);
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH2, 0);
	}
}
 800128c:	e0c2      	b.n	8001414 <drive+0x1fc>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH2, 0);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	88db      	ldrh	r3, [r3, #6]
 8001292:	2b04      	cmp	r3, #4
 8001294:	d105      	bne.n	80012a2 <drive+0x8a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	6393      	str	r3, [r2, #56]	@ 0x38
 80012a0:	e0b8      	b.n	8001414 <drive+0x1fc>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	88db      	ldrh	r3, [r3, #6]
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d105      	bne.n	80012b6 <drive+0x9e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2300      	movs	r3, #0
 80012b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80012b4:	e0ae      	b.n	8001414 <drive+0x1fc>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80012c0:	e0a8      	b.n	8001414 <drive+0x1fc>
	else if(speed < 0)
 80012c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	da5d      	bge.n	8001386 <drive+0x16e>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH1, 0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	889b      	ldrh	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d105      	bne.n	80012de <drive+0xc6>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	635a      	str	r2, [r3, #52]	@ 0x34
 80012dc:	e018      	b.n	8001310 <drive+0xf8>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	889b      	ldrh	r3, [r3, #4]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d105      	bne.n	80012f2 <drive+0xda>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2300      	movs	r3, #0
 80012ee:	6393      	str	r3, [r2, #56]	@ 0x38
 80012f0:	e00e      	b.n	8001310 <drive+0xf8>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d105      	bne.n	8001306 <drive+0xee>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001304:	e004      	b.n	8001310 <drive+0xf8>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2300      	movs	r3, #0
 800130e:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH2, abs(speed));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	88db      	ldrh	r3, [r3, #6]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10a      	bne.n	800132e <drive+0x116>
 8001318:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800131c:	2b00      	cmp	r3, #0
 800131e:	bfb8      	it	lt
 8001320:	425b      	neglt	r3, r3
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800132c:	e072      	b.n	8001414 <drive+0x1fc>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH2, abs(speed));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	88db      	ldrh	r3, [r3, #6]
 8001332:	2b04      	cmp	r3, #4
 8001334:	d10b      	bne.n	800134e <drive+0x136>
 8001336:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800133a:	2b00      	cmp	r3, #0
 800133c:	bfb8      	it	lt
 800133e:	425b      	neglt	r3, r3
 8001340:	b299      	uxth	r1, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	460b      	mov	r3, r1
 800134a:	6393      	str	r3, [r2, #56]	@ 0x38
 800134c:	e062      	b.n	8001414 <drive+0x1fc>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	88db      	ldrh	r3, [r3, #6]
 8001352:	2b08      	cmp	r3, #8
 8001354:	d10b      	bne.n	800136e <drive+0x156>
 8001356:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800135a:	2b00      	cmp	r3, #0
 800135c:	bfb8      	it	lt
 800135e:	425b      	neglt	r3, r3
 8001360:	b299      	uxth	r1, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	460b      	mov	r3, r1
 800136a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800136c:	e052      	b.n	8001414 <drive+0x1fc>
 800136e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001372:	2b00      	cmp	r3, #0
 8001374:	bfb8      	it	lt
 8001376:	425b      	neglt	r3, r3
 8001378:	b299      	uxth	r1, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	460b      	mov	r3, r1
 8001382:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001384:	e046      	b.n	8001414 <drive+0x1fc>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH1, 0);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	889b      	ldrh	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d105      	bne.n	800139a <drive+0x182>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2200      	movs	r2, #0
 8001396:	635a      	str	r2, [r3, #52]	@ 0x34
 8001398:	e018      	b.n	80013cc <drive+0x1b4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	889b      	ldrh	r3, [r3, #4]
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d105      	bne.n	80013ae <drive+0x196>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2300      	movs	r3, #0
 80013aa:	6393      	str	r3, [r2, #56]	@ 0x38
 80013ac:	e00e      	b.n	80013cc <drive+0x1b4>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	889b      	ldrh	r3, [r3, #4]
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d105      	bne.n	80013c2 <drive+0x1aa>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2300      	movs	r3, #0
 80013be:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80013c0:	e004      	b.n	80013cc <drive+0x1b4>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH2, 0);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	88db      	ldrh	r3, [r3, #6]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d105      	bne.n	80013e0 <drive+0x1c8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80013de:	e019      	b.n	8001414 <drive+0x1fc>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH2, 0);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	88db      	ldrh	r3, [r3, #6]
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d105      	bne.n	80013f4 <drive+0x1dc>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2300      	movs	r3, #0
 80013f0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80013f2:	e00f      	b.n	8001414 <drive+0x1fc>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH2, 0);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	88db      	ldrh	r3, [r3, #6]
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d105      	bne.n	8001408 <drive+0x1f0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	2300      	movs	r3, #0
 8001404:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001406:	e005      	b.n	8001414 <drive+0x1fc>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->CH2, 0);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2300      	movs	r3, #0
 8001410:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001412:	e7ff      	b.n	8001414 <drive+0x1fc>
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <EncoderInit>:

void EncoderInit(Encoder *enc, TIM_HandleTypeDef *htim, float d, float delta_T, uint16_t CPR)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	603b      	str	r3, [r7, #0]
	enc->htim = htim;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	601a      	str	r2, [r3, #0]
	enc->d = d;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	@ 0x28
	enc->delta_T = delta_T;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	635a      	str	r2, [r3, #52]	@ 0x34
	enc->CPR = CPR;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8b3a      	ldrh	r2, [r7, #24]
 8001442:	871a      	strh	r2, [r3, #56]	@ 0x38
	HAL_TIM_Encoder_Start_IT(enc->htim, TIM_CHANNEL_ALL);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	213c      	movs	r1, #60	@ 0x3c
 800144a:	4618      	mov	r0, r3
 800144c:	f002 f966 	bl	800371c <HAL_TIM_Encoder_Start_IT>
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <EncoderRead>:

void EncoderRead(Encoder *enc)
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	enc -> xung = __HAL_TIM_GET_COUNTER(enc -> htim);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	605a      	str	r2, [r3, #4]
	enc -> xung_x4 += (int16_t) enc -> xung;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6852      	ldr	r2, [r2, #4]
 8001474:	b212      	sxth	r2, r2
 8001476:	441a      	add	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc -> htim, 0);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
	enc -> angle = enc -> xung_x4 * 360 / enc -> CPR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8001496:	fb93 f3f2 	sdiv	r3, r3, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fc1e 	bl	8000cdc <__aeabi_i2f>
 80014a0:	4602      	mov	r2, r0
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	621a      	str	r2, [r3, #32]
	enc -> quang_duong = (enc -> xung_x4 / 4) * enc -> d * M_PI / enc -> CPR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	da00      	bge.n	80014b0 <EncoderRead+0x58>
 80014ae:	3303      	adds	r3, #3
 80014b0:	109b      	asrs	r3, r3, #2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fc12 	bl	8000cdc <__aeabi_i2f>
 80014b8:	4602      	mov	r2, r0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014be:	4619      	mov	r1, r3
 80014c0:	4610      	mov	r0, r2
 80014c2:	f7ff fc5f 	bl	8000d84 <__aeabi_fmul>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe ffad 	bl	8000428 <__aeabi_f2d>
 80014ce:	a348      	add	r3, pc, #288	@ (adr r3, 80015f0 <EncoderRead+0x198>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7ff f800 	bl	80004d8 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4614      	mov	r4, r2
 80014de:	461d      	mov	r5, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ff8d 	bl	8000404 <__aeabi_i2d>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4620      	mov	r0, r4
 80014f0:	4629      	mov	r1, r5
 80014f2:	f7ff f91b 	bl	800072c <__aeabi_ddiv>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fae3 	bl	8000ac8 <__aeabi_d2f>
 8001502:	4602      	mov	r2, r0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	631a      	str	r2, [r3, #48]	@ 0x30
	enc -> real_vel = ((enc -> xung_x4 - enc -> pre_xung_x4)/ enc -> delta_T) / (enc -> CPR)*60/4;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fbe2 	bl	8000cdc <__aeabi_i2f>
 8001518:	4602      	mov	r2, r0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff fce3 	bl	8000eec <__aeabi_fdiv>
 8001526:	4603      	mov	r3, r0
 8001528:	461c      	mov	r4, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fbd4 	bl	8000cdc <__aeabi_i2f>
 8001534:	4603      	mov	r3, r0
 8001536:	4619      	mov	r1, r3
 8001538:	4620      	mov	r0, r4
 800153a:	f7ff fcd7 	bl	8000eec <__aeabi_fdiv>
 800153e:	4603      	mov	r3, r0
 8001540:	4933      	ldr	r1, [pc, #204]	@ (8001610 <EncoderRead+0x1b8>)
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fc1e 	bl	8000d84 <__aeabi_fmul>
 8001548:	4603      	mov	r3, r0
 800154a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fccc 	bl	8000eec <__aeabi_fdiv>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	611a      	str	r2, [r3, #16]
	enc -> fil_vel = 0.854 * enc -> fil_vel + 0.0728 * enc -> real_vel + 0.078 * enc -> pre_vel;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff61 	bl	8000428 <__aeabi_f2d>
 8001566:	a324      	add	r3, pc, #144	@ (adr r3, 80015f8 <EncoderRead+0x1a0>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7fe ffb4 	bl	80004d8 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4614      	mov	r4, r2
 8001576:	461d      	mov	r5, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ff53 	bl	8000428 <__aeabi_f2d>
 8001582:	a31f      	add	r3, pc, #124	@ (adr r3, 8001600 <EncoderRead+0x1a8>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7fe ffa6 	bl	80004d8 <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4620      	mov	r0, r4
 8001592:	4629      	mov	r1, r5
 8001594:	f7fe fdea 	bl	800016c <__adddf3>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4614      	mov	r4, r2
 800159e:	461d      	mov	r5, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ff3f 	bl	8000428 <__aeabi_f2d>
 80015aa:	a317      	add	r3, pc, #92	@ (adr r3, 8001608 <EncoderRead+0x1b0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7fe ff92 	bl	80004d8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4620      	mov	r0, r4
 80015ba:	4629      	mov	r1, r5
 80015bc:	f7fe fdd6 	bl	800016c <__adddf3>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fa7e 	bl	8000ac8 <__aeabi_d2f>
 80015cc:	4602      	mov	r2, r0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	615a      	str	r2, [r3, #20]
	enc -> pre_vel = enc -> real_vel;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	619a      	str	r2, [r3, #24]
	enc -> pre_xung_x4 = enc -> xung_x4;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60da      	str	r2, [r3, #12]
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bdb0      	pop	{r4, r5, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
 80015f0:	54442d18 	.word	0x54442d18
 80015f4:	400921fb 	.word	0x400921fb
 80015f8:	ced91687 	.word	0xced91687
 80015fc:	3feb53f7 	.word	0x3feb53f7
 8001600:	532617c2 	.word	0x532617c2
 8001604:	3fb2a305 	.word	0x3fb2a305
 8001608:	d916872b 	.word	0xd916872b
 800160c:	3fb3f7ce 	.word	0x3fb3f7ce
 8001610:	42700000 	.word	0x42700000

08001614 <PID_setParam>:

void PID_setParam(PID *pid, float kP, float kI, float kD, float deltaT, float above_limit, float below_limit)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
	pid->kP = kP;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	609a      	str	r2, [r3, #8]
	pid->kI = kI;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	60da      	str	r2, [r3, #12]
	pid->kD = kD;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	611a      	str	r2, [r3, #16]
	pid->deltaT = deltaT;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->above_limit = above_limit;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->below_limit = below_limit;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6a3a      	ldr	r2, [r7, #32]
 8001644:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <PID_Cal>:

void PID_Cal(PID *pid, float target, float current)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	pid->err = target - current;
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	68b8      	ldr	r0, [r7, #8]
 8001660:	f7ff fa86 	bl	8000b70 <__aeabi_fsub>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	62da      	str	r2, [r3, #44]	@ 0x2c

//	if(abs(pid->err) < 0.5) pid->err = 0;

	pid->uP = pid->kP * pid->err;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001674:	4619      	mov	r1, r3
 8001676:	4610      	mov	r0, r2
 8001678:	f7ff fb84 	bl	8000d84 <__aeabi_fmul>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	615a      	str	r2, [r3, #20]
	pid->uI = pid->pre_uI + pid->kI * pid->err * pid->deltaT;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	69dc      	ldr	r4, [r3, #28]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001690:	4619      	mov	r1, r3
 8001692:	4610      	mov	r0, r2
 8001694:	f7ff fb76 	bl	8000d84 <__aeabi_fmul>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f7ff fb6e 	bl	8000d84 <__aeabi_fmul>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4619      	mov	r1, r3
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7ff fa61 	bl	8000b74 <__addsf3>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	619a      	str	r2, [r3, #24]
	pid->uI = (pid->uI > pid->above_limit) ? pid->above_limit : (pid->uI < pid->below_limit) ? pid->below_limit : pid->uI;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	699a      	ldr	r2, [r3, #24]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c2:	4619      	mov	r1, r3
 80016c4:	4610      	mov	r0, r2
 80016c6:	f7ff fd19 	bl	80010fc <__aeabi_fcmpgt>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <PID_Cal+0x86>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d4:	e00f      	b.n	80016f6 <PID_Cal+0xa6>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016de:	4619      	mov	r1, r3
 80016e0:	4610      	mov	r0, r2
 80016e2:	f7ff fced 	bl	80010c0 <__aeabi_fcmplt>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <PID_Cal+0xa2>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016f0:	e001      	b.n	80016f6 <PID_Cal+0xa6>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	6193      	str	r3, [r2, #24]

	pid->uD = pid->kD * (pid->err - pid->pre_err) / pid->deltaT;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	691c      	ldr	r4, [r3, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4619      	mov	r1, r3
 8001708:	4610      	mov	r0, r2
 800170a:	f7ff fa31 	bl	8000b70 <__aeabi_fsub>
 800170e:	4603      	mov	r3, r0
 8001710:	4619      	mov	r1, r3
 8001712:	4620      	mov	r0, r4
 8001714:	f7ff fb36 	bl	8000d84 <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001720:	4619      	mov	r1, r3
 8001722:	4610      	mov	r0, r2
 8001724:	f7ff fbe2 	bl	8000eec <__aeabi_fdiv>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	621a      	str	r2, [r3, #32]

	pid->pre_err = pid->err;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->pre_uI = pid->uI;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	61da      	str	r2, [r3, #28]

	pid->u = pid->uP + pid->uI + pid->uD;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4619      	mov	r1, r3
 800174a:	4610      	mov	r0, r2
 800174c:	f7ff fa12 	bl	8000b74 <__addsf3>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4619      	mov	r1, r3
 800175a:	4610      	mov	r0, r2
 800175c:	f7ff fa0a 	bl	8000b74 <__addsf3>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->u = (pid->u > pid->above_limit) ? pid->above_limit : (pid->u < pid->below_limit) ? pid->below_limit : pid->u;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001770:	4619      	mov	r1, r3
 8001772:	4610      	mov	r0, r2
 8001774:	f7ff fcc2 	bl	80010fc <__aeabi_fcmpgt>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <PID_Cal+0x134>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001782:	e00f      	b.n	80017a4 <PID_Cal+0x154>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800178c:	4619      	mov	r1, r3
 800178e:	4610      	mov	r0, r2
 8001790:	f7ff fc96 	bl	80010c0 <__aeabi_fcmplt>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <PID_Cal+0x150>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800179e:	e001      	b.n	80017a4 <PID_Cal+0x154>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd90      	pop	{r4, r7, pc}

080017b0 <LowPassFilter>:
void LowPassFilter(float input, float alpha, float *filtered_value)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
    *filtered_value = alpha * input + (1.0f - alpha) * (*filtered_value);
 80017bc:	68f9      	ldr	r1, [r7, #12]
 80017be:	68b8      	ldr	r0, [r7, #8]
 80017c0:	f7ff fae0 	bl	8000d84 <__aeabi_fmul>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461c      	mov	r4, r3
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80017ce:	f7ff f9cf 	bl	8000b70 <__aeabi_fsub>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4619      	mov	r1, r3
 80017dc:	4610      	mov	r0, r2
 80017de:	f7ff fad1 	bl	8000d84 <__aeabi_fmul>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4619      	mov	r1, r3
 80017e6:	4620      	mov	r0, r4
 80017e8:	f7ff f9c4 	bl	8000b74 <__addsf3>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd90      	pop	{r4, r7, pc}

080017fc <PID_Position>:
	LowPassFilter(pid_speed->u, 0.1f, &pid_speed->u_fil);
	drive(motor, pid_speed->u_fil);
}

void PID_Position(PID *pid_position, PID *pid_speed, Encoder *enc, Motor *motor)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
	PID_Cal(pid_position, enc->target_quang_duong, enc->quang_duong);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	461a      	mov	r2, r3
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff ff1b 	bl	8001650 <PID_Cal>
	LowPassFilter(pid_position->u, 0.03f, &pid_position->u_fil);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3328      	adds	r3, #40	@ 0x28
 8001822:	461a      	mov	r2, r3
 8001824:	4908      	ldr	r1, [pc, #32]	@ (8001848 <PID_Position+0x4c>)
 8001826:	f7ff ffc3 	bl	80017b0 <LowPassFilter>

	drive(motor, pid_position->u_fil);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fc6e 	bl	8001110 <__aeabi_f2iz>
 8001834:	4603      	mov	r3, r0
 8001836:	b21b      	sxth	r3, r3
 8001838:	4619      	mov	r1, r3
 800183a:	6838      	ldr	r0, [r7, #0]
 800183c:	f7ff fcec 	bl	8001218 <drive>
//	enc -> target_vel = pid_position -> u;
//	PID_Speed(pid_speed, enc, motor);
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	3cf5c28f 	.word	0x3cf5c28f
 800184c:	00000000 	.word	0x00000000

08001850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001856:	f000 fd9b 	bl	8002390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185a:	f000 f8ad 	bl	80019b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185e:	f000 fa41 	bl	8001ce4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001862:	f000 f947 	bl	8001af4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001866:	f000 f9bf 	bl	8001be8 <MX_TIM4_Init>
  MX_TIM1_Init();
 800186a:	f000 f8eb 	bl	8001a44 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800186e:	f000 fa0f 	bl	8001c90 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  EncoderInit(&encoder_1, &htim1, 34.0, 0.001, 4096);
 8001872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <main+0x118>)
 800187a:	4a3c      	ldr	r2, [pc, #240]	@ (800196c <main+0x11c>)
 800187c:	493c      	ldr	r1, [pc, #240]	@ (8001970 <main+0x120>)
 800187e:	483d      	ldr	r0, [pc, #244]	@ (8001974 <main+0x124>)
 8001880:	f7ff fdcd 	bl	800141e <EncoderInit>
  EncoderInit(&encoder_2, &htim4, 34.0, 0.001, 4096);
 8001884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4b37      	ldr	r3, [pc, #220]	@ (8001968 <main+0x118>)
 800188c:	4a37      	ldr	r2, [pc, #220]	@ (800196c <main+0x11c>)
 800188e:	493a      	ldr	r1, [pc, #232]	@ (8001978 <main+0x128>)
 8001890:	483a      	ldr	r0, [pc, #232]	@ (800197c <main+0x12c>)
 8001892:	f7ff fdc4 	bl	800141e <EncoderInit>
  MotorInit(&motor_left, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001896:	2304      	movs	r3, #4
 8001898:	2200      	movs	r2, #0
 800189a:	4939      	ldr	r1, [pc, #228]	@ (8001980 <main+0x130>)
 800189c:	4839      	ldr	r0, [pc, #228]	@ (8001984 <main+0x134>)
 800189e:	f7ff fc93 	bl	80011c8 <MotorInit>
  MotorInit(&motor_right, &htim2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80018a2:	230c      	movs	r3, #12
 80018a4:	2208      	movs	r2, #8
 80018a6:	4936      	ldr	r1, [pc, #216]	@ (8001980 <main+0x130>)
 80018a8:	4837      	ldr	r0, [pc, #220]	@ (8001988 <main+0x138>)
 80018aa:	f7ff fc8d 	bl	80011c8 <MotorInit>
//  PID_setParam(&pid_speed_2, 17.5549127919031, 254.606072797274, 0.101939398615924, 0.001, 1000, -1000);
  PID_setParam(&pid_position_2, 202.957367753907, 182.290905755023, 20.0825908954933, 0.001, 1000, -1000);
 80018ae:	4b37      	ldr	r3, [pc, #220]	@ (800198c <main+0x13c>)
 80018b0:	9302      	str	r3, [sp, #8]
 80018b2:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <main+0x140>)
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001968 <main+0x118>)
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	4b36      	ldr	r3, [pc, #216]	@ (8001994 <main+0x144>)
 80018bc:	4a36      	ldr	r2, [pc, #216]	@ (8001998 <main+0x148>)
 80018be:	4937      	ldr	r1, [pc, #220]	@ (800199c <main+0x14c>)
 80018c0:	4837      	ldr	r0, [pc, #220]	@ (80019a0 <main+0x150>)
 80018c2:	f7ff fea7 	bl	8001614 <PID_setParam>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	EncoderRead(&encoder_1);
 80018c6:	482b      	ldr	r0, [pc, #172]	@ (8001974 <main+0x124>)
 80018c8:	f7ff fdc6 	bl	8001458 <EncoderRead>
	EncoderRead(&encoder_2);
 80018cc:	482b      	ldr	r0, [pc, #172]	@ (800197c <main+0x12c>)
 80018ce:	f7ff fdc3 	bl	8001458 <EncoderRead>
	counter+=0.005;
 80018d2:	4b34      	ldr	r3, [pc, #208]	@ (80019a4 <main+0x154>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fda6 	bl	8000428 <__aeabi_f2d>
 80018dc:	a320      	add	r3, pc, #128	@ (adr r3, 8001960 <main+0x110>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fc43 	bl	800016c <__adddf3>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff f8eb 	bl	8000ac8 <__aeabi_d2f>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4a2b      	ldr	r2, [pc, #172]	@ (80019a4 <main+0x154>)
 80018f6:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "%f, %f\n", counter, encoder_2.fil_vel);
 80018f8:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <main+0x154>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fd93 	bl	8000428 <__aeabi_f2d>
 8001902:	4604      	mov	r4, r0
 8001904:	460d      	mov	r5, r1
 8001906:	4b1d      	ldr	r3, [pc, #116]	@ (800197c <main+0x12c>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fd8c 	bl	8000428 <__aeabi_f2d>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	e9cd 2300 	strd	r2, r3, [sp]
 8001918:	4622      	mov	r2, r4
 800191a:	462b      	mov	r3, r5
 800191c:	4922      	ldr	r1, [pc, #136]	@ (80019a8 <main+0x158>)
 800191e:	4823      	ldr	r0, [pc, #140]	@ (80019ac <main+0x15c>)
 8001920:	f004 f946 	bl	8005bb0 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) buffer, sizeof(buffer), HAL_MAX_DELAY);
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
 8001928:	2232      	movs	r2, #50	@ 0x32
 800192a:	4920      	ldr	r1, [pc, #128]	@ (80019ac <main+0x15c>)
 800192c:	4820      	ldr	r0, [pc, #128]	@ (80019b0 <main+0x160>)
 800192e:	f002 fc53 	bl	80041d8 <HAL_UART_Transmit>
	for(uint8_t i = 0; i < sizeof(buffer); i++) buffer[i] = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	e006      	b.n	8001946 <main+0xf6>
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	4a1c      	ldr	r2, [pc, #112]	@ (80019ac <main+0x15c>)
 800193c:	2100      	movs	r1, #0
 800193e:	54d1      	strb	r1, [r2, r3]
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	3301      	adds	r3, #1
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b31      	cmp	r3, #49	@ 0x31
 800194a:	d9f5      	bls.n	8001938 <main+0xe8>
//	PID_Speed(&pid_speed_2, &encoder_2, &motor_left);
	PID_Position(&pid_position_2, &pid_speed_2, &encoder_2, &motor_left);
 800194c:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <main+0x134>)
 800194e:	4a0b      	ldr	r2, [pc, #44]	@ (800197c <main+0x12c>)
 8001950:	4918      	ldr	r1, [pc, #96]	@ (80019b4 <main+0x164>)
 8001952:	4813      	ldr	r0, [pc, #76]	@ (80019a0 <main+0x150>)
 8001954:	f7ff ff52 	bl	80017fc <PID_Position>
  {
 8001958:	e7b5      	b.n	80018c6 <main+0x76>
 800195a:	bf00      	nop
 800195c:	f3af 8000 	nop.w
 8001960:	47ae147b 	.word	0x47ae147b
 8001964:	3f747ae1 	.word	0x3f747ae1
 8001968:	3a83126f 	.word	0x3a83126f
 800196c:	42080000 	.word	0x42080000
 8001970:	200001f0 	.word	0x200001f0
 8001974:	20000360 	.word	0x20000360
 8001978:	20000280 	.word	0x20000280
 800197c:	2000039c 	.word	0x2000039c
 8001980:	20000238 	.word	0x20000238
 8001984:	20000348 	.word	0x20000348
 8001988:	20000354 	.word	0x20000354
 800198c:	c47a0000 	.word	0xc47a0000
 8001990:	447a0000 	.word	0x447a0000
 8001994:	41a0a925 	.word	0x41a0a925
 8001998:	43364a79 	.word	0x43364a79
 800199c:	434af516 	.word	0x434af516
 80019a0:	20000418 	.word	0x20000418
 80019a4:	20000310 	.word	0x20000310
 80019a8:	08009430 	.word	0x08009430
 80019ac:	20000314 	.word	0x20000314
 80019b0:	200002c8 	.word	0x200002c8
 80019b4:	200003d8 	.word	0x200003d8

080019b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b090      	sub	sp, #64	@ 0x40
 80019bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019be:	f107 0318 	add.w	r3, r7, #24
 80019c2:	2228      	movs	r2, #40	@ 0x28
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f004 f957 	bl	8005c7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019da:	2301      	movs	r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ec:	2302      	movs	r3, #2
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80019fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fc:	f107 0318 	add.w	r3, r7, #24
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 f80d 	bl	8002a20 <HAL_RCC_OscConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a0c:	f000 f9aa 	bl	8001d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a10:	230f      	movs	r3, #15
 8001a12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a14:	2302      	movs	r3, #2
 8001a16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 fa7a 	bl	8002f24 <HAL_RCC_ClockConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a36:	f000 f995 	bl	8001d64 <Error_Handler>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3740      	adds	r7, #64	@ 0x40
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	@ 0x30
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	2224      	movs	r2, #36	@ 0x24
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 f911 	bl	8005c7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a60:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <MX_TIM1_Init+0xa8>)
 8001a62:	4a23      	ldr	r2, [pc, #140]	@ (8001af0 <MX_TIM1_Init+0xac>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a66:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <MX_TIM1_Init+0xa8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <MX_TIM1_Init+0xa8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a72:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <MX_TIM1_Init+0xa8>)
 8001a74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <MX_TIM1_Init+0xa8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <MX_TIM1_Init+0xa8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <MX_TIM1_Init+0xa8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a94:	2301      	movs	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480d      	ldr	r0, [pc, #52]	@ (8001aec <MX_TIM1_Init+0xa8>)
 8001ab8:	f001 fd8e 	bl	80035d8 <HAL_TIM_Encoder_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001ac2:	f000 f94f 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4806      	ldr	r0, [pc, #24]	@ (8001aec <MX_TIM1_Init+0xa8>)
 8001ad4:	f002 fac0 	bl	8004058 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001ade:	f000 f941 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	3730      	adds	r7, #48	@ 0x30
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200001f0 	.word	0x200001f0
 8001af0:	40012c00 	.word	0x40012c00

08001af4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b16:	4b33      	ldr	r3, [pc, #204]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001b18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001b1e:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001b20:	2247      	movs	r2, #71	@ 0x47
 8001b22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b24:	4b2f      	ldr	r3, [pc, #188]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001b2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b32:	4b2c      	ldr	r3, [pc, #176]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b38:	4b2a      	ldr	r3, [pc, #168]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b3e:	4829      	ldr	r0, [pc, #164]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001b40:	f001 fc58 	bl	80033f4 <HAL_TIM_PWM_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b4a:	f000 f90b 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b56:	f107 0320 	add.w	r3, r7, #32
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4821      	ldr	r0, [pc, #132]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001b5e:	f002 fa7b 	bl	8004058 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b68:	f000 f8fc 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6c:	2360      	movs	r3, #96	@ 0x60
 8001b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	4818      	ldr	r0, [pc, #96]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001b84:	f001 ff68 	bl	8003a58 <HAL_TIM_PWM_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b8e:	f000 f8e9 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2204      	movs	r2, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4812      	ldr	r0, [pc, #72]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001b9a:	f001 ff5d 	bl	8003a58 <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ba4:	f000 f8de 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2208      	movs	r2, #8
 8001bac:	4619      	mov	r1, r3
 8001bae:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001bb0:	f001 ff52 	bl	8003a58 <HAL_TIM_PWM_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001bba:	f000 f8d3 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	220c      	movs	r2, #12
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001bc6:	f001 ff47 	bl	8003a58 <HAL_TIM_PWM_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001bd0:	f000 f8c8 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bd4:	4803      	ldr	r0, [pc, #12]	@ (8001be4 <MX_TIM2_Init+0xf0>)
 8001bd6:	f000 f997 	bl	8001f08 <HAL_TIM_MspPostInit>

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	@ 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000238 	.word	0x20000238

08001be8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	@ 0x30
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	2224      	movs	r2, #36	@ 0x24
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 f83f 	bl	8005c7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c04:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <MX_TIM4_Init+0xa0>)
 8001c06:	4a21      	ldr	r2, [pc, #132]	@ (8001c8c <MX_TIM4_Init+0xa4>)
 8001c08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c88 <MX_TIM4_Init+0xa0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	@ (8001c88 <MX_TIM4_Init+0xa0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	@ (8001c88 <MX_TIM4_Init+0xa0>)
 8001c18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <MX_TIM4_Init+0xa0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c24:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <MX_TIM4_Init+0xa0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c42:	2301      	movs	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4619      	mov	r1, r3
 8001c54:	480c      	ldr	r0, [pc, #48]	@ (8001c88 <MX_TIM4_Init+0xa0>)
 8001c56:	f001 fcbf 	bl	80035d8 <HAL_TIM_Encoder_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c60:	f000 f880 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	@ (8001c88 <MX_TIM4_Init+0xa0>)
 8001c72:	f002 f9f1 	bl	8004058 <HAL_TIMEx_MasterConfigSynchronization>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c7c:	f000 f872 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	3730      	adds	r7, #48	@ 0x30
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000280 	.word	0x20000280
 8001c8c:	40000800 	.word	0x40000800

08001c90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <MX_USART3_UART_Init+0x50>)
 8001c98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001c9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ca0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cc6:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001cc8:	f002 fa36 	bl	8004138 <HAL_UART_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cd2:	f000 f847 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200002c8 	.word	0x200002c8
 8001ce0:	40004800 	.word	0x40004800

08001ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cea:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <MX_GPIO_Init+0x58>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <MX_GPIO_Init+0x58>)
 8001cf0:	f043 0320 	orr.w	r3, r3, #32
 8001cf4:	6193      	str	r3, [r2, #24]
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <MX_GPIO_Init+0x58>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <MX_GPIO_Init+0x58>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	4a0d      	ldr	r2, [pc, #52]	@ (8001d3c <MX_GPIO_Init+0x58>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6193      	str	r3, [r2, #24]
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <MX_GPIO_Init+0x58>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <MX_GPIO_Init+0x58>)
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	4a07      	ldr	r2, [pc, #28]	@ (8001d3c <MX_GPIO_Init+0x58>)
 8001d20:	f043 0308 	orr.w	r3, r3, #8
 8001d24:	6193      	str	r3, [r2, #24]
 8001d26:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <MX_GPIO_Init+0x58>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001d52:	f000 fb33 	bl	80023bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40000400 	.word	0x40000400

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <Error_Handler+0x8>

08001d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_MspInit+0x5c>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <HAL_MspInit+0x5c>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6193      	str	r3, [r2, #24]
 8001d82:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_MspInit+0x5c>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <HAL_MspInit+0x5c>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a0e      	ldr	r2, [pc, #56]	@ (8001dcc <HAL_MspInit+0x5c>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d98:	61d3      	str	r3, [r2, #28]
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <HAL_MspInit+0x5c>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_MspInit+0x60>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <HAL_MspInit+0x60>)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000

08001dd4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	@ 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0318 	add.w	r3, r7, #24
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a33      	ldr	r2, [pc, #204]	@ (8001ebc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d12d      	bne.n	8001e50 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001df4:	4b32      	ldr	r3, [pc, #200]	@ (8001ec0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4a31      	ldr	r2, [pc, #196]	@ (8001ec0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001dfa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dfe:	6193      	str	r3, [r2, #24]
 8001e00:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6193      	str	r3, [r2, #24]
 8001e18:	4b29      	ldr	r3, [pc, #164]	@ (8001ec0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e24:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0318 	add.w	r3, r7, #24
 8001e36:	4619      	mov	r1, r3
 8001e38:	4822      	ldr	r0, [pc, #136]	@ (8001ec4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e3a:	f000 fc6d 	bl	8002718 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2019      	movs	r0, #25
 8001e44:	f000 fb8b 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e48:	2019      	movs	r0, #25
 8001e4a:	f000 fba4 	bl	8002596 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e4e:	e030      	b.n	8001eb2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d12b      	bne.n	8001eb2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a18      	ldr	r2, [pc, #96]	@ (8001ec0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b16      	ldr	r3, [pc, #88]	@ (8001ec0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e72:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e78:	f043 0308 	orr.w	r3, r3, #8
 8001e7c:	6193      	str	r3, [r2, #24]
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e8a:	23c0      	movs	r3, #192	@ 0xc0
 8001e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e92:	2301      	movs	r3, #1
 8001e94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e96:	f107 0318 	add.w	r3, r7, #24
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480b      	ldr	r0, [pc, #44]	@ (8001ecc <HAL_TIM_Encoder_MspInit+0xf8>)
 8001e9e:	f000 fc3b 	bl	8002718 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	201e      	movs	r0, #30
 8001ea8:	f000 fb59 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eac:	201e      	movs	r0, #30
 8001eae:	f000 fb72 	bl	8002596 <HAL_NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	@ 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40012c00 	.word	0x40012c00
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	40000800 	.word	0x40000800
 8001ecc:	40010c00 	.word	0x40010c00

08001ed0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ee0:	d10b      	bne.n	8001efa <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x34>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x34>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x34>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f26:	d117      	bne.n	8001f58 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <HAL_TIM_MspPostInit+0x58>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f60 <HAL_TIM_MspPostInit+0x58>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <HAL_TIM_MspPostInit+0x58>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f40:	230f      	movs	r3, #15
 8001f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	4804      	ldr	r0, [pc, #16]	@ (8001f64 <HAL_TIM_MspPostInit+0x5c>)
 8001f54:	f000 fbe0 	bl	8002718 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010800 	.word	0x40010800

08001f68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a20      	ldr	r2, [pc, #128]	@ (8002004 <HAL_UART_MspInit+0x9c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d139      	bne.n	8001ffc <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f88:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <HAL_UART_MspInit+0xa0>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8002008 <HAL_UART_MspInit+0xa0>)
 8001f8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f92:	61d3      	str	r3, [r2, #28]
 8001f94:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <HAL_UART_MspInit+0xa0>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa0:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <HAL_UART_MspInit+0xa0>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a18      	ldr	r2, [pc, #96]	@ (8002008 <HAL_UART_MspInit+0xa0>)
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <HAL_UART_MspInit+0xa0>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480f      	ldr	r0, [pc, #60]	@ (800200c <HAL_UART_MspInit+0xa4>)
 8001fce:	f000 fba3 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fd2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4809      	ldr	r0, [pc, #36]	@ (800200c <HAL_UART_MspInit+0xa4>)
 8001fe8:	f000 fb96 	bl	8002718 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2027      	movs	r0, #39	@ 0x27
 8001ff2:	f000 fab4 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ff6:	2027      	movs	r0, #39	@ 0x27
 8001ff8:	f000 facd 	bl	8002596 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001ffc:	bf00      	nop
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40004800 	.word	0x40004800
 8002008:	40021000 	.word	0x40021000
 800200c:	40010c00 	.word	0x40010c00

08002010 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08e      	sub	sp, #56	@ 0x38
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002026:	4b34      	ldr	r3, [pc, #208]	@ (80020f8 <HAL_InitTick+0xe8>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4a33      	ldr	r2, [pc, #204]	@ (80020f8 <HAL_InitTick+0xe8>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	61d3      	str	r3, [r2, #28]
 8002032:	4b31      	ldr	r3, [pc, #196]	@ (80020f8 <HAL_InitTick+0xe8>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800203e:	f107 0210 	add.w	r2, r7, #16
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f001 f8db 	bl	8003204 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d103      	bne.n	8002060 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002058:	f001 f8ac 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 800205c:	6378      	str	r0, [r7, #52]	@ 0x34
 800205e:	e004      	b.n	800206a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002060:	f001 f8a8 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8002064:	4603      	mov	r3, r0
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800206a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800206c:	4a23      	ldr	r2, [pc, #140]	@ (80020fc <HAL_InitTick+0xec>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0c9b      	lsrs	r3, r3, #18
 8002074:	3b01      	subs	r3, #1
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002078:	4b21      	ldr	r3, [pc, #132]	@ (8002100 <HAL_InitTick+0xf0>)
 800207a:	4a22      	ldr	r2, [pc, #136]	@ (8002104 <HAL_InitTick+0xf4>)
 800207c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800207e:	4b20      	ldr	r3, [pc, #128]	@ (8002100 <HAL_InitTick+0xf0>)
 8002080:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002084:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002086:	4a1e      	ldr	r2, [pc, #120]	@ (8002100 <HAL_InitTick+0xf0>)
 8002088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800208c:	4b1c      	ldr	r3, [pc, #112]	@ (8002100 <HAL_InitTick+0xf0>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002092:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <HAL_InitTick+0xf0>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002098:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <HAL_InitTick+0xf0>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800209e:	4818      	ldr	r0, [pc, #96]	@ (8002100 <HAL_InitTick+0xf0>)
 80020a0:	f001 f8fe 	bl	80032a0 <HAL_TIM_Base_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80020aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d11b      	bne.n	80020ea <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80020b2:	4813      	ldr	r0, [pc, #76]	@ (8002100 <HAL_InitTick+0xf0>)
 80020b4:	f001 f94c 	bl	8003350 <HAL_TIM_Base_Start_IT>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80020be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d111      	bne.n	80020ea <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020c6:	201d      	movs	r0, #29
 80020c8:	f000 fa65 	bl	8002596 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b0f      	cmp	r3, #15
 80020d0:	d808      	bhi.n	80020e4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80020d2:	2200      	movs	r2, #0
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	201d      	movs	r0, #29
 80020d8:	f000 fa41 	bl	800255e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <HAL_InitTick+0xf8>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e002      	b.n	80020ea <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3738      	adds	r7, #56	@ 0x38
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	431bde83 	.word	0x431bde83
 8002100:	20000458 	.word	0x20000458
 8002104:	40000400 	.word	0x40000400
 8002108:	20000004 	.word	0x20000004

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <NMI_Handler+0x4>

08002114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <HardFault_Handler+0x4>

0800211c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <MemManage_Handler+0x4>

08002124 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <UsageFault_Handler+0x4>

08002134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002168:	4802      	ldr	r0, [pc, #8]	@ (8002174 <TIM1_UP_IRQHandler+0x10>)
 800216a:	f001 fb85 	bl	8003878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200001f0 	.word	0x200001f0

08002178 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800217c:	4802      	ldr	r0, [pc, #8]	@ (8002188 <TIM3_IRQHandler+0x10>)
 800217e:	f001 fb7b 	bl	8003878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000458 	.word	0x20000458

0800218c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002190:	4802      	ldr	r0, [pc, #8]	@ (800219c <TIM4_IRQHandler+0x10>)
 8002192:	f001 fb71 	bl	8003878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000280 	.word	0x20000280

080021a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021a4:	4802      	ldr	r0, [pc, #8]	@ (80021b0 <USART3_IRQHandler+0x10>)
 80021a6:	f002 f8a3 	bl	80042f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200002c8 	.word	0x200002c8

080021b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return 1;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr

080021c2 <_kill>:

int _kill(int pid, int sig)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021cc:	f003 fda8 	bl	8005d20 <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2216      	movs	r2, #22
 80021d4:	601a      	str	r2, [r3, #0]
  return -1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_exit>:

void _exit (int status)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021ea:	f04f 31ff 	mov.w	r1, #4294967295
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ffe7 	bl	80021c2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <_exit+0x12>

080021f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	e00a      	b.n	8002220 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800220a:	f3af 8000 	nop.w
 800220e:	4601      	mov	r1, r0
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	60ba      	str	r2, [r7, #8]
 8002216:	b2ca      	uxtb	r2, r1
 8002218:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3301      	adds	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	dbf0      	blt.n	800220a <_read+0x12>
  }

  return len;
 8002228:	687b      	ldr	r3, [r7, #4]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e009      	b.n	8002258 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	60ba      	str	r2, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	dbf1      	blt.n	8002244 <_write+0x12>
  }
  return len;
 8002260:	687b      	ldr	r3, [r7, #4]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_close>:

int _close(int file)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002290:	605a      	str	r2, [r3, #4]
  return 0;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <_isatty>:

int _isatty(int file)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
	...

080022cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d4:	4a14      	ldr	r2, [pc, #80]	@ (8002328 <_sbrk+0x5c>)
 80022d6:	4b15      	ldr	r3, [pc, #84]	@ (800232c <_sbrk+0x60>)
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e0:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e8:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <_sbrk+0x64>)
 80022ea:	4a12      	ldr	r2, [pc, #72]	@ (8002334 <_sbrk+0x68>)
 80022ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ee:	4b10      	ldr	r3, [pc, #64]	@ (8002330 <_sbrk+0x64>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d207      	bcs.n	800230c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022fc:	f003 fd10 	bl	8005d20 <__errno>
 8002300:	4603      	mov	r3, r0
 8002302:	220c      	movs	r2, #12
 8002304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	e009      	b.n	8002320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800230c:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002312:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <_sbrk+0x64>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <_sbrk+0x64>)
 800231c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800231e:	68fb      	ldr	r3, [r7, #12]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20005000 	.word	0x20005000
 800232c:	00000400 	.word	0x00000400
 8002330:	200004a0 	.word	0x200004a0
 8002334:	200005f8 	.word	0x200005f8

08002338 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002344:	f7ff fff8 	bl	8002338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002348:	480b      	ldr	r0, [pc, #44]	@ (8002378 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800234a:	490c      	ldr	r1, [pc, #48]	@ (800237c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800234c:	4a0c      	ldr	r2, [pc, #48]	@ (8002380 <LoopFillZerobss+0x16>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002350:	e002      	b.n	8002358 <LoopCopyDataInit>

08002352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002356:	3304      	adds	r3, #4

08002358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800235c:	d3f9      	bcc.n	8002352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235e:	4a09      	ldr	r2, [pc, #36]	@ (8002384 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002360:	4c09      	ldr	r4, [pc, #36]	@ (8002388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002364:	e001      	b.n	800236a <LoopFillZerobss>

08002366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002368:	3204      	adds	r2, #4

0800236a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800236c:	d3fb      	bcc.n	8002366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800236e:	f003 fcdd 	bl	8005d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002372:	f7ff fa6d 	bl	8001850 <main>
  bx lr
 8002376:	4770      	bx	lr
  ldr r0, =_sdata
 8002378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800237c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002380:	0800989c 	.word	0x0800989c
  ldr r2, =_sbss
 8002384:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002388:	200005f4 	.word	0x200005f4

0800238c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800238c:	e7fe      	b.n	800238c <ADC1_2_IRQHandler>
	...

08002390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002394:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <HAL_Init+0x28>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a07      	ldr	r2, [pc, #28]	@ (80023b8 <HAL_Init+0x28>)
 800239a:	f043 0310 	orr.w	r3, r3, #16
 800239e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f000 f8d1 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023a6:	200f      	movs	r0, #15
 80023a8:	f7ff fe32 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ac:	f7ff fce0 	bl	8001d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40022000 	.word	0x40022000

080023bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_IncTick+0x1c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_IncTick+0x20>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	4a03      	ldr	r2, [pc, #12]	@ (80023dc <HAL_IncTick+0x20>)
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	20000008 	.word	0x20000008
 80023dc:	200004a4 	.word	0x200004a4

080023e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b02      	ldr	r3, [pc, #8]	@ (80023f0 <HAL_GetTick+0x10>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	200004a4 	.word	0x200004a4

080023f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0b      	blt.n	8002482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4906      	ldr	r1, [pc, #24]	@ (800248c <__NVIC_EnableIRQ+0x34>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100

08002490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	db0a      	blt.n	80024ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	490c      	ldr	r1, [pc, #48]	@ (80024dc <__NVIC_SetPriority+0x4c>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	0112      	lsls	r2, r2, #4
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	440b      	add	r3, r1
 80024b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b8:	e00a      	b.n	80024d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4908      	ldr	r1, [pc, #32]	@ (80024e0 <__NVIC_SetPriority+0x50>)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3b04      	subs	r3, #4
 80024c8:	0112      	lsls	r2, r2, #4
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	440b      	add	r3, r1
 80024ce:	761a      	strb	r2, [r3, #24]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	@ 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f1c3 0307 	rsb	r3, r3, #7
 80024fe:	2b04      	cmp	r3, #4
 8002500:	bf28      	it	cs
 8002502:	2304      	movcs	r3, #4
 8002504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3304      	adds	r3, #4
 800250a:	2b06      	cmp	r3, #6
 800250c:	d902      	bls.n	8002514 <NVIC_EncodePriority+0x30>
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3b03      	subs	r3, #3
 8002512:	e000      	b.n	8002516 <NVIC_EncodePriority+0x32>
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	f04f 32ff 	mov.w	r2, #4294967295
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800252c:	f04f 31ff 	mov.w	r1, #4294967295
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	43d9      	mvns	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	4313      	orrs	r3, r2
         );
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	@ 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff4f 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff64 	bl	800243c <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ffb2 	bl	80024e4 <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff81 	bl	8002490 <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff57 	bl	8002458 <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d008      	beq.n	80025dc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2204      	movs	r2, #4
 80025ce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e020      	b.n	800261e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 020e 	bic.w	r2, r2, #14
 80025ea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800261c:	7bfb      	ldrb	r3, [r7, #15]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d005      	beq.n	800264c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2204      	movs	r2, #4
 8002644:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	e051      	b.n	80026f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 020e 	bic.w	r2, r2, #14
 800265a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a22      	ldr	r2, [pc, #136]	@ (80026fc <HAL_DMA_Abort_IT+0xd4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d029      	beq.n	80026ca <HAL_DMA_Abort_IT+0xa2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a21      	ldr	r2, [pc, #132]	@ (8002700 <HAL_DMA_Abort_IT+0xd8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d022      	beq.n	80026c6 <HAL_DMA_Abort_IT+0x9e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1f      	ldr	r2, [pc, #124]	@ (8002704 <HAL_DMA_Abort_IT+0xdc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01a      	beq.n	80026c0 <HAL_DMA_Abort_IT+0x98>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1e      	ldr	r2, [pc, #120]	@ (8002708 <HAL_DMA_Abort_IT+0xe0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d012      	beq.n	80026ba <HAL_DMA_Abort_IT+0x92>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1c      	ldr	r2, [pc, #112]	@ (800270c <HAL_DMA_Abort_IT+0xe4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00a      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x8c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002710 <HAL_DMA_Abort_IT+0xe8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d102      	bne.n	80026ae <HAL_DMA_Abort_IT+0x86>
 80026a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80026ac:	e00e      	b.n	80026cc <HAL_DMA_Abort_IT+0xa4>
 80026ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026b2:	e00b      	b.n	80026cc <HAL_DMA_Abort_IT+0xa4>
 80026b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026b8:	e008      	b.n	80026cc <HAL_DMA_Abort_IT+0xa4>
 80026ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026be:	e005      	b.n	80026cc <HAL_DMA_Abort_IT+0xa4>
 80026c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026c4:	e002      	b.n	80026cc <HAL_DMA_Abort_IT+0xa4>
 80026c6:	2310      	movs	r3, #16
 80026c8:	e000      	b.n	80026cc <HAL_DMA_Abort_IT+0xa4>
 80026ca:	2301      	movs	r3, #1
 80026cc:	4a11      	ldr	r2, [pc, #68]	@ (8002714 <HAL_DMA_Abort_IT+0xec>)
 80026ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	4798      	blx	r3
    } 
  }
  return status;
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40020008 	.word	0x40020008
 8002700:	4002001c 	.word	0x4002001c
 8002704:	40020030 	.word	0x40020030
 8002708:	40020044 	.word	0x40020044
 800270c:	40020058 	.word	0x40020058
 8002710:	4002006c 	.word	0x4002006c
 8002714:	40020000 	.word	0x40020000

08002718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002718:	b480      	push	{r7}
 800271a:	b08b      	sub	sp, #44	@ 0x2c
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272a:	e169      	b.n	8002a00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800272c:	2201      	movs	r2, #1
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	429a      	cmp	r2, r3
 8002746:	f040 8158 	bne.w	80029fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4a9a      	ldr	r2, [pc, #616]	@ (80029b8 <HAL_GPIO_Init+0x2a0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d05e      	beq.n	8002812 <HAL_GPIO_Init+0xfa>
 8002754:	4a98      	ldr	r2, [pc, #608]	@ (80029b8 <HAL_GPIO_Init+0x2a0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d875      	bhi.n	8002846 <HAL_GPIO_Init+0x12e>
 800275a:	4a98      	ldr	r2, [pc, #608]	@ (80029bc <HAL_GPIO_Init+0x2a4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d058      	beq.n	8002812 <HAL_GPIO_Init+0xfa>
 8002760:	4a96      	ldr	r2, [pc, #600]	@ (80029bc <HAL_GPIO_Init+0x2a4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d86f      	bhi.n	8002846 <HAL_GPIO_Init+0x12e>
 8002766:	4a96      	ldr	r2, [pc, #600]	@ (80029c0 <HAL_GPIO_Init+0x2a8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d052      	beq.n	8002812 <HAL_GPIO_Init+0xfa>
 800276c:	4a94      	ldr	r2, [pc, #592]	@ (80029c0 <HAL_GPIO_Init+0x2a8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d869      	bhi.n	8002846 <HAL_GPIO_Init+0x12e>
 8002772:	4a94      	ldr	r2, [pc, #592]	@ (80029c4 <HAL_GPIO_Init+0x2ac>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d04c      	beq.n	8002812 <HAL_GPIO_Init+0xfa>
 8002778:	4a92      	ldr	r2, [pc, #584]	@ (80029c4 <HAL_GPIO_Init+0x2ac>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d863      	bhi.n	8002846 <HAL_GPIO_Init+0x12e>
 800277e:	4a92      	ldr	r2, [pc, #584]	@ (80029c8 <HAL_GPIO_Init+0x2b0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d046      	beq.n	8002812 <HAL_GPIO_Init+0xfa>
 8002784:	4a90      	ldr	r2, [pc, #576]	@ (80029c8 <HAL_GPIO_Init+0x2b0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d85d      	bhi.n	8002846 <HAL_GPIO_Init+0x12e>
 800278a:	2b12      	cmp	r3, #18
 800278c:	d82a      	bhi.n	80027e4 <HAL_GPIO_Init+0xcc>
 800278e:	2b12      	cmp	r3, #18
 8002790:	d859      	bhi.n	8002846 <HAL_GPIO_Init+0x12e>
 8002792:	a201      	add	r2, pc, #4	@ (adr r2, 8002798 <HAL_GPIO_Init+0x80>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	08002813 	.word	0x08002813
 800279c:	080027ed 	.word	0x080027ed
 80027a0:	080027ff 	.word	0x080027ff
 80027a4:	08002841 	.word	0x08002841
 80027a8:	08002847 	.word	0x08002847
 80027ac:	08002847 	.word	0x08002847
 80027b0:	08002847 	.word	0x08002847
 80027b4:	08002847 	.word	0x08002847
 80027b8:	08002847 	.word	0x08002847
 80027bc:	08002847 	.word	0x08002847
 80027c0:	08002847 	.word	0x08002847
 80027c4:	08002847 	.word	0x08002847
 80027c8:	08002847 	.word	0x08002847
 80027cc:	08002847 	.word	0x08002847
 80027d0:	08002847 	.word	0x08002847
 80027d4:	08002847 	.word	0x08002847
 80027d8:	08002847 	.word	0x08002847
 80027dc:	080027f5 	.word	0x080027f5
 80027e0:	08002809 	.word	0x08002809
 80027e4:	4a79      	ldr	r2, [pc, #484]	@ (80029cc <HAL_GPIO_Init+0x2b4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027ea:	e02c      	b.n	8002846 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	623b      	str	r3, [r7, #32]
          break;
 80027f2:	e029      	b.n	8002848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	3304      	adds	r3, #4
 80027fa:	623b      	str	r3, [r7, #32]
          break;
 80027fc:	e024      	b.n	8002848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	3308      	adds	r3, #8
 8002804:	623b      	str	r3, [r7, #32]
          break;
 8002806:	e01f      	b.n	8002848 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	330c      	adds	r3, #12
 800280e:	623b      	str	r3, [r7, #32]
          break;
 8002810:	e01a      	b.n	8002848 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800281a:	2304      	movs	r3, #4
 800281c:	623b      	str	r3, [r7, #32]
          break;
 800281e:	e013      	b.n	8002848 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002828:	2308      	movs	r3, #8
 800282a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	611a      	str	r2, [r3, #16]
          break;
 8002832:	e009      	b.n	8002848 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002834:	2308      	movs	r3, #8
 8002836:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	615a      	str	r2, [r3, #20]
          break;
 800283e:	e003      	b.n	8002848 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
          break;
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x130>
          break;
 8002846:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2bff      	cmp	r3, #255	@ 0xff
 800284c:	d801      	bhi.n	8002852 <HAL_GPIO_Init+0x13a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	e001      	b.n	8002856 <HAL_GPIO_Init+0x13e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2bff      	cmp	r3, #255	@ 0xff
 800285c:	d802      	bhi.n	8002864 <HAL_GPIO_Init+0x14c>
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	e002      	b.n	800286a <HAL_GPIO_Init+0x152>
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	3b08      	subs	r3, #8
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	210f      	movs	r1, #15
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	401a      	ands	r2, r3
 800287c:	6a39      	ldr	r1, [r7, #32]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	431a      	orrs	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80b1 	beq.w	80029fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002898:	4b4d      	ldr	r3, [pc, #308]	@ (80029d0 <HAL_GPIO_Init+0x2b8>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4a4c      	ldr	r2, [pc, #304]	@ (80029d0 <HAL_GPIO_Init+0x2b8>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6193      	str	r3, [r2, #24]
 80028a4:	4b4a      	ldr	r3, [pc, #296]	@ (80029d0 <HAL_GPIO_Init+0x2b8>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028b0:	4a48      	ldr	r2, [pc, #288]	@ (80029d4 <HAL_GPIO_Init+0x2bc>)
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	3302      	adds	r3, #2
 80028b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	220f      	movs	r2, #15
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4013      	ands	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a40      	ldr	r2, [pc, #256]	@ (80029d8 <HAL_GPIO_Init+0x2c0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <HAL_GPIO_Init+0x1ec>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3f      	ldr	r2, [pc, #252]	@ (80029dc <HAL_GPIO_Init+0x2c4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00d      	beq.n	8002900 <HAL_GPIO_Init+0x1e8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3e      	ldr	r2, [pc, #248]	@ (80029e0 <HAL_GPIO_Init+0x2c8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d007      	beq.n	80028fc <HAL_GPIO_Init+0x1e4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3d      	ldr	r2, [pc, #244]	@ (80029e4 <HAL_GPIO_Init+0x2cc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_GPIO_Init+0x1e0>
 80028f4:	2303      	movs	r3, #3
 80028f6:	e006      	b.n	8002906 <HAL_GPIO_Init+0x1ee>
 80028f8:	2304      	movs	r3, #4
 80028fa:	e004      	b.n	8002906 <HAL_GPIO_Init+0x1ee>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e002      	b.n	8002906 <HAL_GPIO_Init+0x1ee>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_GPIO_Init+0x1ee>
 8002904:	2300      	movs	r3, #0
 8002906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002908:	f002 0203 	and.w	r2, r2, #3
 800290c:	0092      	lsls	r2, r2, #2
 800290e:	4093      	lsls	r3, r2
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002916:	492f      	ldr	r1, [pc, #188]	@ (80029d4 <HAL_GPIO_Init+0x2bc>)
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	3302      	adds	r3, #2
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002930:	4b2d      	ldr	r3, [pc, #180]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	492c      	ldr	r1, [pc, #176]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
 800293c:	e006      	b.n	800294c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800293e:	4b2a      	ldr	r3, [pc, #168]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	43db      	mvns	r3, r3
 8002946:	4928      	ldr	r1, [pc, #160]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002948:	4013      	ands	r3, r2
 800294a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d006      	beq.n	8002966 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002958:	4b23      	ldr	r3, [pc, #140]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	4922      	ldr	r1, [pc, #136]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002966:	4b20      	ldr	r3, [pc, #128]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	43db      	mvns	r3, r3
 800296e:	491e      	ldr	r1, [pc, #120]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002970:	4013      	ands	r3, r2
 8002972:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d006      	beq.n	800298e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002980:	4b19      	ldr	r3, [pc, #100]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	4918      	ldr	r1, [pc, #96]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
 800298c:	e006      	b.n	800299c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800298e:	4b16      	ldr	r3, [pc, #88]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	43db      	mvns	r3, r3
 8002996:	4914      	ldr	r1, [pc, #80]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 8002998:	4013      	ands	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d021      	beq.n	80029ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029a8:	4b0f      	ldr	r3, [pc, #60]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	490e      	ldr	r1, [pc, #56]	@ (80029e8 <HAL_GPIO_Init+0x2d0>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
 80029b4:	e021      	b.n	80029fa <HAL_GPIO_Init+0x2e2>
 80029b6:	bf00      	nop
 80029b8:	10320000 	.word	0x10320000
 80029bc:	10310000 	.word	0x10310000
 80029c0:	10220000 	.word	0x10220000
 80029c4:	10210000 	.word	0x10210000
 80029c8:	10120000 	.word	0x10120000
 80029cc:	10110000 	.word	0x10110000
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40010000 	.word	0x40010000
 80029d8:	40010800 	.word	0x40010800
 80029dc:	40010c00 	.word	0x40010c00
 80029e0:	40011000 	.word	0x40011000
 80029e4:	40011400 	.word	0x40011400
 80029e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_GPIO_Init+0x304>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	4909      	ldr	r1, [pc, #36]	@ (8002a1c <HAL_GPIO_Init+0x304>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	3301      	adds	r3, #1
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f47f ae8e 	bne.w	800272c <HAL_GPIO_Init+0x14>
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	372c      	adds	r7, #44	@ 0x2c
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	40010400 	.word	0x40010400

08002a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e272      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8087 	beq.w	8002b4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a40:	4b92      	ldr	r3, [pc, #584]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d00c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a4c:	4b8f      	ldr	r3, [pc, #572]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d112      	bne.n	8002a7e <HAL_RCC_OscConfig+0x5e>
 8002a58:	4b8c      	ldr	r3, [pc, #560]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a64:	d10b      	bne.n	8002a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a66:	4b89      	ldr	r3, [pc, #548]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d06c      	beq.n	8002b4c <HAL_RCC_OscConfig+0x12c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d168      	bne.n	8002b4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e24c      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x76>
 8002a88:	4b80      	ldr	r3, [pc, #512]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a7f      	ldr	r2, [pc, #508]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	e02e      	b.n	8002af4 <HAL_RCC_OscConfig+0xd4>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x98>
 8002a9e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7a      	ldr	r2, [pc, #488]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b78      	ldr	r3, [pc, #480]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a77      	ldr	r2, [pc, #476]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e01d      	b.n	8002af4 <HAL_RCC_OscConfig+0xd4>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0xbc>
 8002ac2:	4b72      	ldr	r3, [pc, #456]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a71      	ldr	r2, [pc, #452]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b6f      	ldr	r3, [pc, #444]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6e      	ldr	r2, [pc, #440]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0xd4>
 8002adc:	4b6b      	ldr	r3, [pc, #428]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b68      	ldr	r3, [pc, #416]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a67      	ldr	r2, [pc, #412]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7ff fc70 	bl	80023e0 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7ff fc6c 	bl	80023e0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	@ 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e200      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4b5d      	ldr	r3, [pc, #372]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0xe4>
 8002b22:	e014      	b.n	8002b4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7ff fc5c 	bl	80023e0 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7ff fc58 	bl	80023e0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	@ 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e1ec      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	4b53      	ldr	r3, [pc, #332]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x10c>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d063      	beq.n	8002c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b66:	4b49      	ldr	r3, [pc, #292]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d11c      	bne.n	8002bac <HAL_RCC_OscConfig+0x18c>
 8002b72:	4b46      	ldr	r3, [pc, #280]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7e:	4b43      	ldr	r3, [pc, #268]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_RCC_OscConfig+0x176>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e1c0      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b96:	4b3d      	ldr	r3, [pc, #244]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4939      	ldr	r1, [pc, #228]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002baa:	e03a      	b.n	8002c22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb4:	4b36      	ldr	r3, [pc, #216]	@ (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bba:	f7ff fc11 	bl	80023e0 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc2:	f7ff fc0d 	bl	80023e0 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1a1      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4927      	ldr	r1, [pc, #156]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]
 8002bf4:	e015      	b.n	8002c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf6:	4b26      	ldr	r3, [pc, #152]	@ (8002c90 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7ff fbf0 	bl	80023e0 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c04:	f7ff fbec 	bl	80023e0 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e180      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	4b1d      	ldr	r3, [pc, #116]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d03a      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d019      	beq.n	8002c6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c36:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <HAL_RCC_OscConfig+0x274>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3c:	f7ff fbd0 	bl	80023e0 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c44:	f7ff fbcc 	bl	80023e0 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e160      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c56:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <HAL_RCC_OscConfig+0x26c>)
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c62:	2001      	movs	r0, #1
 8002c64:	f000 fafe 	bl	8003264 <RCC_Delay>
 8002c68:	e01c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c70:	f7ff fbb6 	bl	80023e0 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c76:	e00f      	b.n	8002c98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c78:	f7ff fbb2 	bl	80023e0 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d908      	bls.n	8002c98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e146      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	42420000 	.word	0x42420000
 8002c94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	4b92      	ldr	r3, [pc, #584]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e9      	bne.n	8002c78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80a6 	beq.w	8002dfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	4b88      	ldr	r3, [pc, #544]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4a87      	ldr	r2, [pc, #540]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ccc:	61d3      	str	r3, [r2, #28]
 8002cce:	4b85      	ldr	r3, [pc, #532]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cde:	4b82      	ldr	r3, [pc, #520]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d118      	bne.n	8002d1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cea:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a7e      	ldr	r2, [pc, #504]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c8>)
 8002cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf6:	f7ff fb73 	bl	80023e0 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfe:	f7ff fb6f 	bl	80023e0 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b64      	cmp	r3, #100	@ 0x64
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e103      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	4b75      	ldr	r3, [pc, #468]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x312>
 8002d24:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6213      	str	r3, [r2, #32]
 8002d30:	e02d      	b.n	8002d8e <HAL_RCC_OscConfig+0x36e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x334>
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4a69      	ldr	r2, [pc, #420]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	6213      	str	r3, [r2, #32]
 8002d46:	4b67      	ldr	r3, [pc, #412]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4a66      	ldr	r2, [pc, #408]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	f023 0304 	bic.w	r3, r3, #4
 8002d50:	6213      	str	r3, [r2, #32]
 8002d52:	e01c      	b.n	8002d8e <HAL_RCC_OscConfig+0x36e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCC_OscConfig+0x356>
 8002d5c:	4b61      	ldr	r3, [pc, #388]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4a60      	ldr	r2, [pc, #384]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	6213      	str	r3, [r2, #32]
 8002d68:	4b5e      	ldr	r3, [pc, #376]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6213      	str	r3, [r2, #32]
 8002d74:	e00b      	b.n	8002d8e <HAL_RCC_OscConfig+0x36e>
 8002d76:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	6213      	str	r3, [r2, #32]
 8002d82:	4b58      	ldr	r3, [pc, #352]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a57      	ldr	r2, [pc, #348]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d015      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d96:	f7ff fb23 	bl	80023e0 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7ff fb1f 	bl	80023e0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0b1      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0ee      	beq.n	8002d9e <HAL_RCC_OscConfig+0x37e>
 8002dc0:	e014      	b.n	8002dec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc2:	f7ff fb0d 	bl	80023e0 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7ff fb09 	bl	80023e0 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e09b      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de0:	4b40      	ldr	r3, [pc, #256]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ee      	bne.n	8002dca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d105      	bne.n	8002dfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8087 	beq.w	8002f16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e08:	4b36      	ldr	r3, [pc, #216]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d061      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d146      	bne.n	8002eaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1c:	4b33      	ldr	r3, [pc, #204]	@ (8002eec <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7ff fadd 	bl	80023e0 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7ff fad9 	bl	80023e0 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e06d      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3c:	4b29      	ldr	r3, [pc, #164]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e50:	d108      	bne.n	8002e64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e52:	4b24      	ldr	r3, [pc, #144]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	4921      	ldr	r1, [pc, #132]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a19      	ldr	r1, [r3, #32]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	430b      	orrs	r3, r1
 8002e76:	491b      	ldr	r1, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <HAL_RCC_OscConfig+0x4cc>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7ff faad 	bl	80023e0 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8a:	f7ff faa9 	bl	80023e0 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e03d      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x46a>
 8002ea8:	e035      	b.n	8002f16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <HAL_RCC_OscConfig+0x4cc>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7ff fa96 	bl	80023e0 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7ff fa92 	bl	80023e0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e026      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x498>
 8002ed6:	e01e      	b.n	8002f16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e019      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <HAL_RCC_OscConfig+0x500>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0d0      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b6a      	ldr	r3, [pc, #424]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d910      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b67      	ldr	r3, [pc, #412]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 0207 	bic.w	r2, r3, #7
 8002f4e:	4965      	ldr	r1, [pc, #404]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b63      	ldr	r3, [pc, #396]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0b8      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d020      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f80:	4b59      	ldr	r3, [pc, #356]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a58      	ldr	r2, [pc, #352]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f98:	4b53      	ldr	r3, [pc, #332]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a52      	ldr	r2, [pc, #328]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b50      	ldr	r3, [pc, #320]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	494d      	ldr	r1, [pc, #308]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d040      	beq.n	8003044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b47      	ldr	r3, [pc, #284]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d115      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e07f      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	4b41      	ldr	r3, [pc, #260]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e073      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e06b      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003002:	4b39      	ldr	r3, [pc, #228]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f023 0203 	bic.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4936      	ldr	r1, [pc, #216]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003014:	f7ff f9e4 	bl	80023e0 <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	e00a      	b.n	8003032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301c:	f7ff f9e0 	bl	80023e0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e053      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	4b2d      	ldr	r3, [pc, #180]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 020c 	and.w	r2, r3, #12
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	429a      	cmp	r2, r3
 8003042:	d1eb      	bne.n	800301c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003044:	4b27      	ldr	r3, [pc, #156]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d210      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b24      	ldr	r3, [pc, #144]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 0207 	bic.w	r2, r3, #7
 800305a:	4922      	ldr	r1, [pc, #136]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b20      	ldr	r3, [pc, #128]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e032      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003080:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4916      	ldr	r1, [pc, #88]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800309e:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	490e      	ldr	r1, [pc, #56]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030b2:	f000 f821 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 80030b6:	4602      	mov	r2, r0
 80030b8:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	490a      	ldr	r1, [pc, #40]	@ (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030c4:	5ccb      	ldrb	r3, [r1, r3]
 80030c6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ca:	4a09      	ldr	r2, [pc, #36]	@ (80030f0 <HAL_RCC_ClockConfig+0x1cc>)
 80030cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030ce:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <HAL_RCC_ClockConfig+0x1d0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe ff9c 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40022000 	.word	0x40022000
 80030e8:	40021000 	.word	0x40021000
 80030ec:	08009438 	.word	0x08009438
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20000004 	.word	0x20000004

080030f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	2300      	movs	r3, #0
 800310c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003112:	4b1e      	ldr	r3, [pc, #120]	@ (800318c <HAL_RCC_GetSysClockFreq+0x94>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b04      	cmp	r3, #4
 8003120:	d002      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x30>
 8003122:	2b08      	cmp	r3, #8
 8003124:	d003      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x36>
 8003126:	e027      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003128:	4b19      	ldr	r3, [pc, #100]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x98>)
 800312a:	613b      	str	r3, [r7, #16]
      break;
 800312c:	e027      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	0c9b      	lsrs	r3, r3, #18
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	4a17      	ldr	r2, [pc, #92]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003138:	5cd3      	ldrb	r3, [r2, r3]
 800313a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d010      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003146:	4b11      	ldr	r3, [pc, #68]	@ (800318c <HAL_RCC_GetSysClockFreq+0x94>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0c5b      	lsrs	r3, r3, #17
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	4a11      	ldr	r2, [pc, #68]	@ (8003198 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003152:	5cd3      	ldrb	r3, [r2, r3]
 8003154:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a0d      	ldr	r2, [pc, #52]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x98>)
 800315a:	fb03 f202 	mul.w	r2, r3, r2
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e004      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a0c      	ldr	r2, [pc, #48]	@ (800319c <HAL_RCC_GetSysClockFreq+0xa4>)
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	613b      	str	r3, [r7, #16]
      break;
 8003176:	e002      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x98>)
 800317a:	613b      	str	r3, [r7, #16]
      break;
 800317c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317e:	693b      	ldr	r3, [r7, #16]
}
 8003180:	4618      	mov	r0, r3
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	007a1200 	.word	0x007a1200
 8003194:	08009450 	.word	0x08009450
 8003198:	08009460 	.word	0x08009460
 800319c:	003d0900 	.word	0x003d0900

080031a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a4:	4b02      	ldr	r3, [pc, #8]	@ (80031b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	20000000 	.word	0x20000000

080031b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031b8:	f7ff fff2 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4903      	ldr	r1, [pc, #12]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	08009448 	.word	0x08009448

080031dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031e0:	f7ff ffde 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	0adb      	lsrs	r3, r3, #11
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4903      	ldr	r1, [pc, #12]	@ (8003200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	08009448 	.word	0x08009448

08003204 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	220f      	movs	r2, #15
 8003212:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003214:	4b11      	ldr	r3, [pc, #68]	@ (800325c <HAL_RCC_GetClockConfig+0x58>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0203 	and.w	r2, r3, #3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003220:	4b0e      	ldr	r3, [pc, #56]	@ (800325c <HAL_RCC_GetClockConfig+0x58>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800322c:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <HAL_RCC_GetClockConfig+0x58>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003238:	4b08      	ldr	r3, [pc, #32]	@ (800325c <HAL_RCC_GetClockConfig+0x58>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	08db      	lsrs	r3, r3, #3
 800323e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003246:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <HAL_RCC_GetClockConfig+0x5c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0207 	and.w	r2, r3, #7
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	40021000 	.word	0x40021000
 8003260:	40022000 	.word	0x40022000

08003264 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800326c:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <RCC_Delay+0x34>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <RCC_Delay+0x38>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0a5b      	lsrs	r3, r3, #9
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003280:	bf00      	nop
  }
  while (Delay --);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1e5a      	subs	r2, r3, #1
 8003286:	60fa      	str	r2, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f9      	bne.n	8003280 <RCC_Delay+0x1c>
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	20000000 	.word	0x20000000
 800329c:	10624dd3 	.word	0x10624dd3

080032a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e041      	b.n	8003336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f839 	bl	800333e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f000 fca0 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d001      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e03a      	b.n	80033de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a18      	ldr	r2, [pc, #96]	@ (80033e8 <HAL_TIM_Base_Start_IT+0x98>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00e      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x58>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003392:	d009      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x58>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a14      	ldr	r2, [pc, #80]	@ (80033ec <HAL_TIM_Base_Start_IT+0x9c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x58>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a13      	ldr	r2, [pc, #76]	@ (80033f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d111      	bne.n	80033cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d010      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ca:	e007      	b.n	80033dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800

080033f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e041      	b.n	800348a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fe fd58 	bl	8001ed0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f000 fbf6 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_TIM_PWM_Start+0x24>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e022      	b.n	80034fe <HAL_TIM_PWM_Start+0x6a>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d109      	bne.n	80034d2 <HAL_TIM_PWM_Start+0x3e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	e015      	b.n	80034fe <HAL_TIM_PWM_Start+0x6a>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d109      	bne.n	80034ec <HAL_TIM_PWM_Start+0x58>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e008      	b.n	80034fe <HAL_TIM_PWM_Start+0x6a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e05e      	b.n	80035c4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <HAL_TIM_PWM_Start+0x82>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003514:	e013      	b.n	800353e <HAL_TIM_PWM_Start+0xaa>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d104      	bne.n	8003526 <HAL_TIM_PWM_Start+0x92>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003524:	e00b      	b.n	800353e <HAL_TIM_PWM_Start+0xaa>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Start+0xa2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003534:	e003      	b.n	800353e <HAL_TIM_PWM_Start+0xaa>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2201      	movs	r2, #1
 8003544:	6839      	ldr	r1, [r7, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fd62 	bl	8004010 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1e      	ldr	r2, [pc, #120]	@ (80035cc <HAL_TIM_PWM_Start+0x138>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d107      	bne.n	8003566 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003564:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a18      	ldr	r2, [pc, #96]	@ (80035cc <HAL_TIM_PWM_Start+0x138>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00e      	beq.n	800358e <HAL_TIM_PWM_Start+0xfa>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003578:	d009      	beq.n	800358e <HAL_TIM_PWM_Start+0xfa>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a14      	ldr	r2, [pc, #80]	@ (80035d0 <HAL_TIM_PWM_Start+0x13c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_TIM_PWM_Start+0xfa>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a12      	ldr	r2, [pc, #72]	@ (80035d4 <HAL_TIM_PWM_Start+0x140>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d111      	bne.n	80035b2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b06      	cmp	r3, #6
 800359e:	d010      	beq.n	80035c2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	e007      	b.n	80035c2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40012c00 	.word	0x40012c00
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800

080035d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e093      	b.n	8003714 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7fe fbe7 	bl	8001dd4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800361c:	f023 0307 	bic.w	r3, r3, #7
 8003620:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	4619      	mov	r1, r3
 800362c:	4610      	mov	r0, r2
 800362e:	f000 faf9 	bl	8003c24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	4313      	orrs	r3, r2
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003678:	f023 030c 	bic.w	r3, r3, #12
 800367c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003684:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	4313      	orrs	r3, r2
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	011a      	lsls	r2, r3, #4
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	031b      	lsls	r3, r3, #12
 80036a8:	4313      	orrs	r3, r2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	4313      	orrs	r3, r2
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800372c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003734:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800373c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003744:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d110      	bne.n	800376e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d102      	bne.n	8003758 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003752:	7b7b      	ldrb	r3, [r7, #13]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d001      	beq.n	800375c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e089      	b.n	8003870 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800376c:	e031      	b.n	80037d2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d110      	bne.n	8003796 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003774:	7bbb      	ldrb	r3, [r7, #14]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d102      	bne.n	8003780 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800377a:	7b3b      	ldrb	r3, [r7, #12]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d001      	beq.n	8003784 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e075      	b.n	8003870 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003794:	e01d      	b.n	80037d2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d108      	bne.n	80037ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800379c:	7bbb      	ldrb	r3, [r7, #14]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d105      	bne.n	80037ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037a2:	7b7b      	ldrb	r3, [r7, #13]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d102      	bne.n	80037ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80037a8:	7b3b      	ldrb	r3, [r7, #12]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d001      	beq.n	80037b2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e05e      	b.n	8003870 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d010      	beq.n	8003800 <HAL_TIM_Encoder_Start_IT+0xe4>
 80037de:	e01f      	b.n	8003820 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2201      	movs	r2, #1
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fc11 	bl	8004010 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0202 	orr.w	r2, r2, #2
 80037fc:	60da      	str	r2, [r3, #12]
      break;
 80037fe:	e02e      	b.n	800385e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2201      	movs	r2, #1
 8003806:	2104      	movs	r1, #4
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fc01 	bl	8004010 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0204 	orr.w	r2, r2, #4
 800381c:	60da      	str	r2, [r3, #12]
      break;
 800381e:	e01e      	b.n	800385e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2201      	movs	r2, #1
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fbf1 	bl	8004010 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2201      	movs	r2, #1
 8003834:	2104      	movs	r1, #4
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fbea 	bl	8004010 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0202 	orr.w	r2, r2, #2
 800384a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0204 	orr.w	r2, r2, #4
 800385a:	60da      	str	r2, [r3, #12]
      break;
 800385c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d020      	beq.n	80038dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01b      	beq.n	80038dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0202 	mvn.w	r2, #2
 80038ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f993 	bl	8003bee <HAL_TIM_IC_CaptureCallback>
 80038c8:	e005      	b.n	80038d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f986 	bl	8003bdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f995 	bl	8003c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d020      	beq.n	8003928 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01b      	beq.n	8003928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0204 	mvn.w	r2, #4
 80038f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f96d 	bl	8003bee <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f960 	bl	8003bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f96f 	bl	8003c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d020      	beq.n	8003974 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01b      	beq.n	8003974 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0208 	mvn.w	r2, #8
 8003944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2204      	movs	r2, #4
 800394a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f947 	bl	8003bee <HAL_TIM_IC_CaptureCallback>
 8003960:	e005      	b.n	800396e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f93a 	bl	8003bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f949 	bl	8003c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d020      	beq.n	80039c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01b      	beq.n	80039c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0210 	mvn.w	r2, #16
 8003990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2208      	movs	r2, #8
 8003996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f921 	bl	8003bee <HAL_TIM_IC_CaptureCallback>
 80039ac:	e005      	b.n	80039ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f914 	bl	8003bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f923 	bl	8003c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00c      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d007      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0201 	mvn.w	r2, #1
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fe f9ae 	bl	8001d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00c      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fb8f 	bl	8004126 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f8f3 	bl	8003c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00c      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0220 	mvn.w	r2, #32
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fb62 	bl	8004114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0ae      	b.n	8003bd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	f200 809f 	bhi.w	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a86:	a201      	add	r2, pc, #4	@ (adr r2, 8003a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003ac1 	.word	0x08003ac1
 8003a90:	08003bc5 	.word	0x08003bc5
 8003a94:	08003bc5 	.word	0x08003bc5
 8003a98:	08003bc5 	.word	0x08003bc5
 8003a9c:	08003b01 	.word	0x08003b01
 8003aa0:	08003bc5 	.word	0x08003bc5
 8003aa4:	08003bc5 	.word	0x08003bc5
 8003aa8:	08003bc5 	.word	0x08003bc5
 8003aac:	08003b43 	.word	0x08003b43
 8003ab0:	08003bc5 	.word	0x08003bc5
 8003ab4:	08003bc5 	.word	0x08003bc5
 8003ab8:	08003bc5 	.word	0x08003bc5
 8003abc:	08003b83 	.word	0x08003b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f91a 	bl	8003d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0208 	orr.w	r2, r2, #8
 8003ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0204 	bic.w	r2, r2, #4
 8003aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6999      	ldr	r1, [r3, #24]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	619a      	str	r2, [r3, #24]
      break;
 8003afe:	e064      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f960 	bl	8003dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6999      	ldr	r1, [r3, #24]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	021a      	lsls	r2, r3, #8
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	619a      	str	r2, [r3, #24]
      break;
 8003b40:	e043      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f9a9 	bl	8003ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0208 	orr.w	r2, r2, #8
 8003b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0204 	bic.w	r2, r2, #4
 8003b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69d9      	ldr	r1, [r3, #28]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	61da      	str	r2, [r3, #28]
      break;
 8003b80:	e023      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 f9f3 	bl	8003f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69d9      	ldr	r1, [r3, #28]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	021a      	lsls	r2, r3, #8
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	61da      	str	r2, [r3, #28]
      break;
 8003bc2:	e002      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf4 <TIM_Base_SetConfig+0xd0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00b      	beq.n	8003c54 <TIM_Base_SetConfig+0x30>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c42:	d007      	beq.n	8003c54 <TIM_Base_SetConfig+0x30>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf8 <TIM_Base_SetConfig+0xd4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_Base_SetConfig+0x30>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003cfc <TIM_Base_SetConfig+0xd8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d108      	bne.n	8003c66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a22      	ldr	r2, [pc, #136]	@ (8003cf4 <TIM_Base_SetConfig+0xd0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_Base_SetConfig+0x62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c74:	d007      	beq.n	8003c86 <TIM_Base_SetConfig+0x62>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf8 <TIM_Base_SetConfig+0xd4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_Base_SetConfig+0x62>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a1e      	ldr	r2, [pc, #120]	@ (8003cfc <TIM_Base_SetConfig+0xd8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d108      	bne.n	8003c98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf4 <TIM_Base_SetConfig+0xd0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d103      	bne.n	8003ccc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f023 0201 	bic.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	611a      	str	r2, [r3, #16]
  }
}
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800

08003d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f023 0201 	bic.w	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 0302 	bic.w	r3, r3, #2
 8003d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc8 <TIM_OC1_SetConfig+0xc8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d10c      	bne.n	8003d76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0308 	bic.w	r3, r3, #8
 8003d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a13      	ldr	r2, [pc, #76]	@ (8003dc8 <TIM_OC1_SetConfig+0xc8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d111      	bne.n	8003da2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	621a      	str	r2, [r3, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40012c00 	.word	0x40012c00

08003dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f023 0210 	bic.w	r2, r3, #16
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f023 0320 	bic.w	r3, r3, #32
 8003e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a1d      	ldr	r2, [pc, #116]	@ (8003e9c <TIM_OC2_SetConfig+0xd0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d10d      	bne.n	8003e48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a14      	ldr	r2, [pc, #80]	@ (8003e9c <TIM_OC2_SetConfig+0xd0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d113      	bne.n	8003e78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	621a      	str	r2, [r3, #32]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	40012c00 	.word	0x40012c00

08003ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <TIM_OC3_SetConfig+0xd0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10d      	bne.n	8003f1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	@ (8003f70 <TIM_OC3_SetConfig+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d113      	bne.n	8003f4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	621a      	str	r2, [r3, #32]
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40012c00 	.word	0x40012c00

08003f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	031b      	lsls	r3, r3, #12
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a0f      	ldr	r2, [pc, #60]	@ (800400c <TIM_OC4_SetConfig+0x98>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d109      	bne.n	8003fe8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	019b      	lsls	r3, r3, #6
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	40012c00 	.word	0x40012c00

08004010 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	2201      	movs	r2, #1
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a1a      	ldr	r2, [r3, #32]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	43db      	mvns	r3, r3
 8004032:	401a      	ands	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1a      	ldr	r2, [r3, #32]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	fa01 f303 	lsl.w	r3, r1, r3
 8004048:	431a      	orrs	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	621a      	str	r2, [r3, #32]
}
 800404e:	bf00      	nop
 8004050:	371c      	adds	r7, #28
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800406c:	2302      	movs	r3, #2
 800406e:	e046      	b.n	80040fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a16      	ldr	r2, [pc, #88]	@ (8004108 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00e      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040bc:	d009      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a12      	ldr	r2, [pc, #72]	@ (800410c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a10      	ldr	r2, [pc, #64]	@ (8004110 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10c      	bne.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	40012c00 	.word	0x40012c00
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800

08004114 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr

08004126 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e042      	b.n	80041d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7fd ff02 	bl	8001f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2224      	movs	r2, #36	@ 0x24
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800417a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fd63 	bl	8004c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d175      	bne.n	80042e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_UART_Transmit+0x2c>
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e06e      	b.n	80042e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2221      	movs	r2, #33	@ 0x21
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004216:	f7fe f8e3 	bl	80023e0 <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	88fa      	ldrh	r2, [r7, #6]
 8004220:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	88fa      	ldrh	r2, [r7, #6]
 8004226:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004230:	d108      	bne.n	8004244 <HAL_UART_Transmit+0x6c>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d104      	bne.n	8004244 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	e003      	b.n	800424c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800424c:	e02e      	b.n	80042ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	@ 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fb01 	bl	8004860 <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e03a      	b.n	80042e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004284:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	3302      	adds	r3, #2
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	e007      	b.n	800429e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	781a      	ldrb	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	3301      	adds	r3, #1
 800429c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1cb      	bne.n	800424e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2200      	movs	r2, #0
 80042be:	2140      	movs	r1, #64	@ 0x40
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 facd 	bl	8004860 <UART_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e006      	b.n	80042e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3720      	adds	r7, #32
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b0ba      	sub	sp, #232	@ 0xe8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800431c:	2300      	movs	r3, #0
 800431e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800432e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <HAL_UART_IRQHandler+0x66>
 8004342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fbbc 	bl	8004acc <UART_Receive_IT>
      return;
 8004354:	e25b      	b.n	800480e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80de 	beq.w	800451c <HAL_UART_IRQHandler+0x22c>
 8004360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004370:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80d1 	beq.w	800451c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_UART_IRQHandler+0xae>
 8004386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800438a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_UART_IRQHandler+0xd2>
 80043aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ba:	f043 0202 	orr.w	r2, r3, #2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00b      	beq.n	80043e6 <HAL_UART_IRQHandler+0xf6>
 80043ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043de:	f043 0204 	orr.w	r2, r3, #4
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d011      	beq.n	8004416 <HAL_UART_IRQHandler+0x126>
 80043f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f043 0208 	orr.w	r2, r3, #8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 81f2 	beq.w	8004804 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_UART_IRQHandler+0x14e>
 800442c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fb47 	bl	8004acc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <HAL_UART_IRQHandler+0x17a>
 8004462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d04f      	beq.n	800450a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa51 	bl	8004912 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d041      	beq.n	8004502 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004494:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800449c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3314      	adds	r3, #20
 80044a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1d9      	bne.n	800447e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d013      	beq.n	80044fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d6:	4a7e      	ldr	r2, [pc, #504]	@ (80046d0 <HAL_UART_IRQHandler+0x3e0>)
 80044d8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe f8a2 	bl	8002628 <HAL_DMA_Abort_IT>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044f4:	4610      	mov	r0, r2
 80044f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e00e      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f99c 	bl	8004838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	e00a      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f998 	bl	8004838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	e006      	b.n	8004518 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f994 	bl	8004838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004516:	e175      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	bf00      	nop
    return;
 800451a:	e173      	b.n	8004804 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004520:	2b01      	cmp	r3, #1
 8004522:	f040 814f 	bne.w	80047c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8148 	beq.w	80047c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8141 	beq.w	80047c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80b6 	beq.w	80046d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004574:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8145 	beq.w	8004808 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004586:	429a      	cmp	r2, r3
 8004588:	f080 813e 	bcs.w	8004808 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004592:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b20      	cmp	r3, #32
 800459c:	f000 8088 	beq.w	80046b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80045cc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1d9      	bne.n	80045a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3314      	adds	r3, #20
 80045f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3314      	adds	r3, #20
 800460c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004610:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004614:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004618:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004622:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e1      	bne.n	80045ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3314      	adds	r3, #20
 800462e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004638:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800463a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800463e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800464c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800464e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004652:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800465a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e3      	bne.n	8004628 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800467e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004680:	f023 0310 	bic.w	r3, r3, #16
 8004684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004692:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004694:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004698:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e3      	bne.n	800466e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fd ff81 	bl	80025b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046be:	b29b      	uxth	r3, r3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	4619      	mov	r1, r3
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f8bf 	bl	800484a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046cc:	e09c      	b.n	8004808 <HAL_UART_IRQHandler+0x518>
 80046ce:	bf00      	nop
 80046d0:	080049d7 	.word	0x080049d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046dc:	b29b      	uxth	r3, r3
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 808e 	beq.w	800480c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80046f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8089 	beq.w	800480c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800470a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004710:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800471e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004720:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004724:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800472c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e3      	bne.n	80046fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3314      	adds	r3, #20
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	623b      	str	r3, [r7, #32]
   return(result);
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	f023 0301 	bic.w	r3, r3, #1
 8004748:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3314      	adds	r3, #20
 8004752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004756:	633a      	str	r2, [r7, #48]	@ 0x30
 8004758:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800475c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e3      	bne.n	8004732 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	330c      	adds	r3, #12
 800477e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	e853 3f00 	ldrex	r3, [r3]
 8004786:	60fb      	str	r3, [r7, #12]
   return(result);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0310 	bic.w	r3, r3, #16
 800478e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	330c      	adds	r3, #12
 8004798:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800479c:	61fa      	str	r2, [r7, #28]
 800479e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	69b9      	ldr	r1, [r7, #24]
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	617b      	str	r3, [r7, #20]
   return(result);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e3      	bne.n	8004778 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047ba:	4619      	mov	r1, r3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f844 	bl	800484a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047c2:	e023      	b.n	800480c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d009      	beq.n	80047e4 <HAL_UART_IRQHandler+0x4f4>
 80047d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f90e 	bl	80049fe <UART_Transmit_IT>
    return;
 80047e2:	e014      	b.n	800480e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00e      	beq.n	800480e <HAL_UART_IRQHandler+0x51e>
 80047f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f94d 	bl	8004a9c <UART_EndTransmit_IT>
    return;
 8004802:	e004      	b.n	800480e <HAL_UART_IRQHandler+0x51e>
    return;
 8004804:	bf00      	nop
 8004806:	e002      	b.n	800480e <HAL_UART_IRQHandler+0x51e>
      return;
 8004808:	bf00      	nop
 800480a:	e000      	b.n	800480e <HAL_UART_IRQHandler+0x51e>
      return;
 800480c:	bf00      	nop
  }
}
 800480e:	37e8      	adds	r7, #232	@ 0xe8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr

0800484a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	4613      	mov	r3, r2
 800486e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004870:	e03b      	b.n	80048ea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d037      	beq.n	80048ea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487a:	f7fd fdb1 	bl	80023e0 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	6a3a      	ldr	r2, [r7, #32]
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <UART_WaitOnFlagUntilTimeout+0x30>
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e03a      	b.n	800490a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d023      	beq.n	80048ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b80      	cmp	r3, #128	@ 0x80
 80048a6:	d020      	beq.n	80048ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b40      	cmp	r3, #64	@ 0x40
 80048ac:	d01d      	beq.n	80048ea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d116      	bne.n	80048ea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f81d 	bl	8004912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2208      	movs	r2, #8
 80048dc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e00f      	b.n	800490a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4013      	ands	r3, r2
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	bf0c      	ite	eq
 80048fa:	2301      	moveq	r3, #1
 80048fc:	2300      	movne	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	461a      	mov	r2, r3
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	429a      	cmp	r2, r3
 8004906:	d0b4      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004912:	b480      	push	{r7}
 8004914:	b095      	sub	sp, #84	@ 0x54
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004930:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800493a:	643a      	str	r2, [r7, #64]	@ 0x40
 800493c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004940:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e5      	bne.n	800491a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3314      	adds	r3, #20
 8004954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	e853 3f00 	ldrex	r3, [r3]
 800495c:	61fb      	str	r3, [r7, #28]
   return(result);
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	f023 0301 	bic.w	r3, r3, #1
 8004964:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3314      	adds	r3, #20
 800496c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800496e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004970:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004972:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800497c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1e5      	bne.n	800494e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	2b01      	cmp	r3, #1
 8004988:	d119      	bne.n	80049be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	60bb      	str	r3, [r7, #8]
   return(result);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f023 0310 	bic.w	r3, r3, #16
 80049a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049aa:	61ba      	str	r2, [r7, #24]
 80049ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	6979      	ldr	r1, [r7, #20]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	613b      	str	r3, [r7, #16]
   return(result);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049cc:	bf00      	nop
 80049ce:	3754      	adds	r7, #84	@ 0x54
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f7ff ff21 	bl	8004838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b21      	cmp	r3, #33	@ 0x21
 8004a10:	d13e      	bne.n	8004a90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1a:	d114      	bne.n	8004a46 <UART_Transmit_IT+0x48>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d110      	bne.n	8004a46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	1c9a      	adds	r2, r3, #2
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	621a      	str	r2, [r3, #32]
 8004a44:	e008      	b.n	8004a58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	1c59      	adds	r1, r3, #1
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6211      	str	r1, [r2, #32]
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4619      	mov	r1, r3
 8004a66:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10f      	bne.n	8004a8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e000      	b.n	8004a92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a90:	2302      	movs	r3, #2
  }
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ab2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff fea9 	bl	8004814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08c      	sub	sp, #48	@ 0x30
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b22      	cmp	r3, #34	@ 0x22
 8004ade:	f040 80ae 	bne.w	8004c3e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aea:	d117      	bne.n	8004b1c <UART_Receive_IT+0x50>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d113      	bne.n	8004b1c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b1a:	e026      	b.n	8004b6a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b2e:	d007      	beq.n	8004b40 <UART_Receive_IT+0x74>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <UART_Receive_IT+0x82>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d106      	bne.n	8004b4e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	e008      	b.n	8004b60 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	4619      	mov	r1, r3
 8004b78:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d15d      	bne.n	8004c3a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0220 	bic.w	r2, r2, #32
 8004b8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695a      	ldr	r2, [r3, #20]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d135      	bne.n	8004c30 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f023 0310 	bic.w	r3, r3, #16
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bea:	623a      	str	r2, [r7, #32]
 8004bec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	69f9      	ldr	r1, [r7, #28]
 8004bf0:	6a3a      	ldr	r2, [r7, #32]
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e5      	bne.n	8004bca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d10a      	bne.n	8004c22 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fe0e 	bl	800484a <HAL_UARTEx_RxEventCallback>
 8004c2e:	e002      	b.n	8004c36 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff fdf8 	bl	8004826 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e002      	b.n	8004c40 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3730      	adds	r7, #48	@ 0x30
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004c82:	f023 030c 	bic.w	r3, r3, #12
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2c      	ldr	r2, [pc, #176]	@ (8004d5c <UART_SetConfig+0x114>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d103      	bne.n	8004cb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cb0:	f7fe fa94 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	e002      	b.n	8004cbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cb8:	f7fe fa7c 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8004cbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009a      	lsls	r2, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	4a22      	ldr	r2, [pc, #136]	@ (8004d60 <UART_SetConfig+0x118>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	0119      	lsls	r1, r3, #4
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009a      	lsls	r2, r3, #2
 8004ce8:	441a      	add	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d60 <UART_SetConfig+0x118>)
 8004cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	2064      	movs	r0, #100	@ 0x64
 8004cfe:	fb00 f303 	mul.w	r3, r0, r3
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	3332      	adds	r3, #50	@ 0x32
 8004d08:	4a15      	ldr	r2, [pc, #84]	@ (8004d60 <UART_SetConfig+0x118>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d14:	4419      	add	r1, r3
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009a      	lsls	r2, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d60 <UART_SetConfig+0x118>)
 8004d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2064      	movs	r0, #100	@ 0x64
 8004d36:	fb00 f303 	mul.w	r3, r0, r3
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	3332      	adds	r3, #50	@ 0x32
 8004d40:	4a07      	ldr	r2, [pc, #28]	@ (8004d60 <UART_SetConfig+0x118>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	f003 020f 	and.w	r2, r3, #15
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	440a      	add	r2, r1
 8004d52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d54:	bf00      	nop
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40013800 	.word	0x40013800
 8004d60:	51eb851f 	.word	0x51eb851f

08004d64 <__cvt>:
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6a:	461d      	mov	r5, r3
 8004d6c:	bfbb      	ittet	lt
 8004d6e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004d72:	461d      	movlt	r5, r3
 8004d74:	2300      	movge	r3, #0
 8004d76:	232d      	movlt	r3, #45	@ 0x2d
 8004d78:	b088      	sub	sp, #32
 8004d7a:	4614      	mov	r4, r2
 8004d7c:	bfb8      	it	lt
 8004d7e:	4614      	movlt	r4, r2
 8004d80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004d82:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004d84:	7013      	strb	r3, [r2, #0]
 8004d86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d88:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004d8c:	f023 0820 	bic.w	r8, r3, #32
 8004d90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d94:	d005      	beq.n	8004da2 <__cvt+0x3e>
 8004d96:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d9a:	d100      	bne.n	8004d9e <__cvt+0x3a>
 8004d9c:	3601      	adds	r6, #1
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e000      	b.n	8004da4 <__cvt+0x40>
 8004da2:	2303      	movs	r3, #3
 8004da4:	aa07      	add	r2, sp, #28
 8004da6:	9204      	str	r2, [sp, #16]
 8004da8:	aa06      	add	r2, sp, #24
 8004daa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004dae:	e9cd 3600 	strd	r3, r6, [sp]
 8004db2:	4622      	mov	r2, r4
 8004db4:	462b      	mov	r3, r5
 8004db6:	f001 f87b 	bl	8005eb0 <_dtoa_r>
 8004dba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004dbe:	4607      	mov	r7, r0
 8004dc0:	d119      	bne.n	8004df6 <__cvt+0x92>
 8004dc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004dc4:	07db      	lsls	r3, r3, #31
 8004dc6:	d50e      	bpl.n	8004de6 <__cvt+0x82>
 8004dc8:	eb00 0906 	add.w	r9, r0, r6
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2300      	movs	r3, #0
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	f7fb fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8004dd8:	b108      	cbz	r0, 8004dde <__cvt+0x7a>
 8004dda:	f8cd 901c 	str.w	r9, [sp, #28]
 8004dde:	2230      	movs	r2, #48	@ 0x30
 8004de0:	9b07      	ldr	r3, [sp, #28]
 8004de2:	454b      	cmp	r3, r9
 8004de4:	d31e      	bcc.n	8004e24 <__cvt+0xc0>
 8004de6:	4638      	mov	r0, r7
 8004de8:	9b07      	ldr	r3, [sp, #28]
 8004dea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004dec:	1bdb      	subs	r3, r3, r7
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	b008      	add	sp, #32
 8004df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004dfa:	eb00 0906 	add.w	r9, r0, r6
 8004dfe:	d1e5      	bne.n	8004dcc <__cvt+0x68>
 8004e00:	7803      	ldrb	r3, [r0, #0]
 8004e02:	2b30      	cmp	r3, #48	@ 0x30
 8004e04:	d10a      	bne.n	8004e1c <__cvt+0xb8>
 8004e06:	2200      	movs	r2, #0
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	f7fb fdcb 	bl	80009a8 <__aeabi_dcmpeq>
 8004e12:	b918      	cbnz	r0, 8004e1c <__cvt+0xb8>
 8004e14:	f1c6 0601 	rsb	r6, r6, #1
 8004e18:	f8ca 6000 	str.w	r6, [sl]
 8004e1c:	f8da 3000 	ldr.w	r3, [sl]
 8004e20:	4499      	add	r9, r3
 8004e22:	e7d3      	b.n	8004dcc <__cvt+0x68>
 8004e24:	1c59      	adds	r1, r3, #1
 8004e26:	9107      	str	r1, [sp, #28]
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	e7d9      	b.n	8004de0 <__cvt+0x7c>

08004e2c <__exponent>:
 8004e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e2e:	2900      	cmp	r1, #0
 8004e30:	bfb6      	itet	lt
 8004e32:	232d      	movlt	r3, #45	@ 0x2d
 8004e34:	232b      	movge	r3, #43	@ 0x2b
 8004e36:	4249      	neglt	r1, r1
 8004e38:	2909      	cmp	r1, #9
 8004e3a:	7002      	strb	r2, [r0, #0]
 8004e3c:	7043      	strb	r3, [r0, #1]
 8004e3e:	dd29      	ble.n	8004e94 <__exponent+0x68>
 8004e40:	f10d 0307 	add.w	r3, sp, #7
 8004e44:	461d      	mov	r5, r3
 8004e46:	270a      	movs	r7, #10
 8004e48:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	fb07 1416 	mls	r4, r7, r6, r1
 8004e52:	3430      	adds	r4, #48	@ 0x30
 8004e54:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e58:	460c      	mov	r4, r1
 8004e5a:	2c63      	cmp	r4, #99	@ 0x63
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e62:	dcf1      	bgt.n	8004e48 <__exponent+0x1c>
 8004e64:	3130      	adds	r1, #48	@ 0x30
 8004e66:	1e94      	subs	r4, r2, #2
 8004e68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e6c:	4623      	mov	r3, r4
 8004e6e:	1c41      	adds	r1, r0, #1
 8004e70:	42ab      	cmp	r3, r5
 8004e72:	d30a      	bcc.n	8004e8a <__exponent+0x5e>
 8004e74:	f10d 0309 	add.w	r3, sp, #9
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	42ac      	cmp	r4, r5
 8004e7c:	bf88      	it	hi
 8004e7e:	2300      	movhi	r3, #0
 8004e80:	3302      	adds	r3, #2
 8004e82:	4403      	add	r3, r0
 8004e84:	1a18      	subs	r0, r3, r0
 8004e86:	b003      	add	sp, #12
 8004e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e8a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e8e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e92:	e7ed      	b.n	8004e70 <__exponent+0x44>
 8004e94:	2330      	movs	r3, #48	@ 0x30
 8004e96:	3130      	adds	r1, #48	@ 0x30
 8004e98:	7083      	strb	r3, [r0, #2]
 8004e9a:	70c1      	strb	r1, [r0, #3]
 8004e9c:	1d03      	adds	r3, r0, #4
 8004e9e:	e7f1      	b.n	8004e84 <__exponent+0x58>

08004ea0 <_printf_float>:
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	b091      	sub	sp, #68	@ 0x44
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004eac:	4616      	mov	r6, r2
 8004eae:	461f      	mov	r7, r3
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	f000 feeb 	bl	8005c8c <_localeconv_r>
 8004eb6:	6803      	ldr	r3, [r0, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	9308      	str	r3, [sp, #32]
 8004ebc:	f7fb f948 	bl	8000150 <strlen>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec8:	9009      	str	r0, [sp, #36]	@ 0x24
 8004eca:	3307      	adds	r3, #7
 8004ecc:	f023 0307 	bic.w	r3, r3, #7
 8004ed0:	f103 0208 	add.w	r2, r3, #8
 8004ed4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ed8:	f8d4 b000 	ldr.w	fp, [r4]
 8004edc:	f8c8 2000 	str.w	r2, [r8]
 8004ee0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ee4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004eea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004eee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ef6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004efa:	4b9c      	ldr	r3, [pc, #624]	@ (800516c <_printf_float+0x2cc>)
 8004efc:	f7fb fd86 	bl	8000a0c <__aeabi_dcmpun>
 8004f00:	bb70      	cbnz	r0, 8004f60 <_printf_float+0xc0>
 8004f02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f06:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0a:	4b98      	ldr	r3, [pc, #608]	@ (800516c <_printf_float+0x2cc>)
 8004f0c:	f7fb fd60 	bl	80009d0 <__aeabi_dcmple>
 8004f10:	bb30      	cbnz	r0, 8004f60 <_printf_float+0xc0>
 8004f12:	2200      	movs	r2, #0
 8004f14:	2300      	movs	r3, #0
 8004f16:	4640      	mov	r0, r8
 8004f18:	4649      	mov	r1, r9
 8004f1a:	f7fb fd4f 	bl	80009bc <__aeabi_dcmplt>
 8004f1e:	b110      	cbz	r0, 8004f26 <_printf_float+0x86>
 8004f20:	232d      	movs	r3, #45	@ 0x2d
 8004f22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f26:	4a92      	ldr	r2, [pc, #584]	@ (8005170 <_printf_float+0x2d0>)
 8004f28:	4b92      	ldr	r3, [pc, #584]	@ (8005174 <_printf_float+0x2d4>)
 8004f2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f2e:	bf8c      	ite	hi
 8004f30:	4690      	movhi	r8, r2
 8004f32:	4698      	movls	r8, r3
 8004f34:	2303      	movs	r3, #3
 8004f36:	f04f 0900 	mov.w	r9, #0
 8004f3a:	6123      	str	r3, [r4, #16]
 8004f3c:	f02b 0304 	bic.w	r3, fp, #4
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	4633      	mov	r3, r6
 8004f44:	4621      	mov	r1, r4
 8004f46:	4628      	mov	r0, r5
 8004f48:	9700      	str	r7, [sp, #0]
 8004f4a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004f4c:	f000 f9d4 	bl	80052f8 <_printf_common>
 8004f50:	3001      	adds	r0, #1
 8004f52:	f040 8090 	bne.w	8005076 <_printf_float+0x1d6>
 8004f56:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5a:	b011      	add	sp, #68	@ 0x44
 8004f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f60:	4642      	mov	r2, r8
 8004f62:	464b      	mov	r3, r9
 8004f64:	4640      	mov	r0, r8
 8004f66:	4649      	mov	r1, r9
 8004f68:	f7fb fd50 	bl	8000a0c <__aeabi_dcmpun>
 8004f6c:	b148      	cbz	r0, 8004f82 <_printf_float+0xe2>
 8004f6e:	464b      	mov	r3, r9
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bfb8      	it	lt
 8004f74:	232d      	movlt	r3, #45	@ 0x2d
 8004f76:	4a80      	ldr	r2, [pc, #512]	@ (8005178 <_printf_float+0x2d8>)
 8004f78:	bfb8      	it	lt
 8004f7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800517c <_printf_float+0x2dc>)
 8004f80:	e7d3      	b.n	8004f2a <_printf_float+0x8a>
 8004f82:	6863      	ldr	r3, [r4, #4]
 8004f84:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	d13f      	bne.n	800500c <_printf_float+0x16c>
 8004f8c:	2306      	movs	r3, #6
 8004f8e:	6063      	str	r3, [r4, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	9206      	str	r2, [sp, #24]
 8004f9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8004f9c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004fa0:	aa0d      	add	r2, sp, #52	@ 0x34
 8004fa2:	9203      	str	r2, [sp, #12]
 8004fa4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004fa8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004fac:	6863      	ldr	r3, [r4, #4]
 8004fae:	4642      	mov	r2, r8
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	910a      	str	r1, [sp, #40]	@ 0x28
 8004fb8:	f7ff fed4 	bl	8004d64 <__cvt>
 8004fbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004fbe:	4680      	mov	r8, r0
 8004fc0:	2947      	cmp	r1, #71	@ 0x47
 8004fc2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004fc4:	d128      	bne.n	8005018 <_printf_float+0x178>
 8004fc6:	1cc8      	adds	r0, r1, #3
 8004fc8:	db02      	blt.n	8004fd0 <_printf_float+0x130>
 8004fca:	6863      	ldr	r3, [r4, #4]
 8004fcc:	4299      	cmp	r1, r3
 8004fce:	dd40      	ble.n	8005052 <_printf_float+0x1b2>
 8004fd0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004fd4:	fa5f fa8a 	uxtb.w	sl, sl
 8004fd8:	4652      	mov	r2, sl
 8004fda:	3901      	subs	r1, #1
 8004fdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004fe0:	910d      	str	r1, [sp, #52]	@ 0x34
 8004fe2:	f7ff ff23 	bl	8004e2c <__exponent>
 8004fe6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fe8:	4681      	mov	r9, r0
 8004fea:	1813      	adds	r3, r2, r0
 8004fec:	2a01      	cmp	r2, #1
 8004fee:	6123      	str	r3, [r4, #16]
 8004ff0:	dc02      	bgt.n	8004ff8 <_printf_float+0x158>
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	07d2      	lsls	r2, r2, #31
 8004ff6:	d501      	bpl.n	8004ffc <_printf_float+0x15c>
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	6123      	str	r3, [r4, #16]
 8004ffc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005000:	2b00      	cmp	r3, #0
 8005002:	d09e      	beq.n	8004f42 <_printf_float+0xa2>
 8005004:	232d      	movs	r3, #45	@ 0x2d
 8005006:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800500a:	e79a      	b.n	8004f42 <_printf_float+0xa2>
 800500c:	2947      	cmp	r1, #71	@ 0x47
 800500e:	d1bf      	bne.n	8004f90 <_printf_float+0xf0>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1bd      	bne.n	8004f90 <_printf_float+0xf0>
 8005014:	2301      	movs	r3, #1
 8005016:	e7ba      	b.n	8004f8e <_printf_float+0xee>
 8005018:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800501c:	d9dc      	bls.n	8004fd8 <_printf_float+0x138>
 800501e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005022:	d118      	bne.n	8005056 <_printf_float+0x1b6>
 8005024:	2900      	cmp	r1, #0
 8005026:	6863      	ldr	r3, [r4, #4]
 8005028:	dd0b      	ble.n	8005042 <_printf_float+0x1a2>
 800502a:	6121      	str	r1, [r4, #16]
 800502c:	b913      	cbnz	r3, 8005034 <_printf_float+0x194>
 800502e:	6822      	ldr	r2, [r4, #0]
 8005030:	07d0      	lsls	r0, r2, #31
 8005032:	d502      	bpl.n	800503a <_printf_float+0x19a>
 8005034:	3301      	adds	r3, #1
 8005036:	440b      	add	r3, r1
 8005038:	6123      	str	r3, [r4, #16]
 800503a:	f04f 0900 	mov.w	r9, #0
 800503e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005040:	e7dc      	b.n	8004ffc <_printf_float+0x15c>
 8005042:	b913      	cbnz	r3, 800504a <_printf_float+0x1aa>
 8005044:	6822      	ldr	r2, [r4, #0]
 8005046:	07d2      	lsls	r2, r2, #31
 8005048:	d501      	bpl.n	800504e <_printf_float+0x1ae>
 800504a:	3302      	adds	r3, #2
 800504c:	e7f4      	b.n	8005038 <_printf_float+0x198>
 800504e:	2301      	movs	r3, #1
 8005050:	e7f2      	b.n	8005038 <_printf_float+0x198>
 8005052:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005056:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005058:	4299      	cmp	r1, r3
 800505a:	db05      	blt.n	8005068 <_printf_float+0x1c8>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	6121      	str	r1, [r4, #16]
 8005060:	07d8      	lsls	r0, r3, #31
 8005062:	d5ea      	bpl.n	800503a <_printf_float+0x19a>
 8005064:	1c4b      	adds	r3, r1, #1
 8005066:	e7e7      	b.n	8005038 <_printf_float+0x198>
 8005068:	2900      	cmp	r1, #0
 800506a:	bfcc      	ite	gt
 800506c:	2201      	movgt	r2, #1
 800506e:	f1c1 0202 	rsble	r2, r1, #2
 8005072:	4413      	add	r3, r2
 8005074:	e7e0      	b.n	8005038 <_printf_float+0x198>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	055a      	lsls	r2, r3, #21
 800507a:	d407      	bmi.n	800508c <_printf_float+0x1ec>
 800507c:	6923      	ldr	r3, [r4, #16]
 800507e:	4642      	mov	r2, r8
 8005080:	4631      	mov	r1, r6
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	d12b      	bne.n	80050e2 <_printf_float+0x242>
 800508a:	e764      	b.n	8004f56 <_printf_float+0xb6>
 800508c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005090:	f240 80dc 	bls.w	800524c <_printf_float+0x3ac>
 8005094:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005098:	2200      	movs	r2, #0
 800509a:	2300      	movs	r3, #0
 800509c:	f7fb fc84 	bl	80009a8 <__aeabi_dcmpeq>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d033      	beq.n	800510c <_printf_float+0x26c>
 80050a4:	2301      	movs	r3, #1
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	4a35      	ldr	r2, [pc, #212]	@ (8005180 <_printf_float+0x2e0>)
 80050ac:	47b8      	blx	r7
 80050ae:	3001      	adds	r0, #1
 80050b0:	f43f af51 	beq.w	8004f56 <_printf_float+0xb6>
 80050b4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80050b8:	4543      	cmp	r3, r8
 80050ba:	db02      	blt.n	80050c2 <_printf_float+0x222>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	07d8      	lsls	r0, r3, #31
 80050c0:	d50f      	bpl.n	80050e2 <_printf_float+0x242>
 80050c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80050c6:	4631      	mov	r1, r6
 80050c8:	4628      	mov	r0, r5
 80050ca:	47b8      	blx	r7
 80050cc:	3001      	adds	r0, #1
 80050ce:	f43f af42 	beq.w	8004f56 <_printf_float+0xb6>
 80050d2:	f04f 0900 	mov.w	r9, #0
 80050d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80050da:	f104 0a1a 	add.w	sl, r4, #26
 80050de:	45c8      	cmp	r8, r9
 80050e0:	dc09      	bgt.n	80050f6 <_printf_float+0x256>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	079b      	lsls	r3, r3, #30
 80050e6:	f100 8102 	bmi.w	80052ee <_printf_float+0x44e>
 80050ea:	68e0      	ldr	r0, [r4, #12]
 80050ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050ee:	4298      	cmp	r0, r3
 80050f0:	bfb8      	it	lt
 80050f2:	4618      	movlt	r0, r3
 80050f4:	e731      	b.n	8004f5a <_printf_float+0xba>
 80050f6:	2301      	movs	r3, #1
 80050f8:	4652      	mov	r2, sl
 80050fa:	4631      	mov	r1, r6
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b8      	blx	r7
 8005100:	3001      	adds	r0, #1
 8005102:	f43f af28 	beq.w	8004f56 <_printf_float+0xb6>
 8005106:	f109 0901 	add.w	r9, r9, #1
 800510a:	e7e8      	b.n	80050de <_printf_float+0x23e>
 800510c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800510e:	2b00      	cmp	r3, #0
 8005110:	dc38      	bgt.n	8005184 <_printf_float+0x2e4>
 8005112:	2301      	movs	r3, #1
 8005114:	4631      	mov	r1, r6
 8005116:	4628      	mov	r0, r5
 8005118:	4a19      	ldr	r2, [pc, #100]	@ (8005180 <_printf_float+0x2e0>)
 800511a:	47b8      	blx	r7
 800511c:	3001      	adds	r0, #1
 800511e:	f43f af1a 	beq.w	8004f56 <_printf_float+0xb6>
 8005122:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005126:	ea59 0303 	orrs.w	r3, r9, r3
 800512a:	d102      	bne.n	8005132 <_printf_float+0x292>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	07d9      	lsls	r1, r3, #31
 8005130:	d5d7      	bpl.n	80050e2 <_printf_float+0x242>
 8005132:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005136:	4631      	mov	r1, r6
 8005138:	4628      	mov	r0, r5
 800513a:	47b8      	blx	r7
 800513c:	3001      	adds	r0, #1
 800513e:	f43f af0a 	beq.w	8004f56 <_printf_float+0xb6>
 8005142:	f04f 0a00 	mov.w	sl, #0
 8005146:	f104 0b1a 	add.w	fp, r4, #26
 800514a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800514c:	425b      	negs	r3, r3
 800514e:	4553      	cmp	r3, sl
 8005150:	dc01      	bgt.n	8005156 <_printf_float+0x2b6>
 8005152:	464b      	mov	r3, r9
 8005154:	e793      	b.n	800507e <_printf_float+0x1de>
 8005156:	2301      	movs	r3, #1
 8005158:	465a      	mov	r2, fp
 800515a:	4631      	mov	r1, r6
 800515c:	4628      	mov	r0, r5
 800515e:	47b8      	blx	r7
 8005160:	3001      	adds	r0, #1
 8005162:	f43f aef8 	beq.w	8004f56 <_printf_float+0xb6>
 8005166:	f10a 0a01 	add.w	sl, sl, #1
 800516a:	e7ee      	b.n	800514a <_printf_float+0x2aa>
 800516c:	7fefffff 	.word	0x7fefffff
 8005170:	08009466 	.word	0x08009466
 8005174:	08009462 	.word	0x08009462
 8005178:	0800946e 	.word	0x0800946e
 800517c:	0800946a 	.word	0x0800946a
 8005180:	08009472 	.word	0x08009472
 8005184:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005186:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800518a:	4553      	cmp	r3, sl
 800518c:	bfa8      	it	ge
 800518e:	4653      	movge	r3, sl
 8005190:	2b00      	cmp	r3, #0
 8005192:	4699      	mov	r9, r3
 8005194:	dc36      	bgt.n	8005204 <_printf_float+0x364>
 8005196:	f04f 0b00 	mov.w	fp, #0
 800519a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800519e:	f104 021a 	add.w	r2, r4, #26
 80051a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80051a6:	eba3 0309 	sub.w	r3, r3, r9
 80051aa:	455b      	cmp	r3, fp
 80051ac:	dc31      	bgt.n	8005212 <_printf_float+0x372>
 80051ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051b0:	459a      	cmp	sl, r3
 80051b2:	dc3a      	bgt.n	800522a <_printf_float+0x38a>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	07da      	lsls	r2, r3, #31
 80051b8:	d437      	bmi.n	800522a <_printf_float+0x38a>
 80051ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051bc:	ebaa 0903 	sub.w	r9, sl, r3
 80051c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051c2:	ebaa 0303 	sub.w	r3, sl, r3
 80051c6:	4599      	cmp	r9, r3
 80051c8:	bfa8      	it	ge
 80051ca:	4699      	movge	r9, r3
 80051cc:	f1b9 0f00 	cmp.w	r9, #0
 80051d0:	dc33      	bgt.n	800523a <_printf_float+0x39a>
 80051d2:	f04f 0800 	mov.w	r8, #0
 80051d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051da:	f104 0b1a 	add.w	fp, r4, #26
 80051de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051e0:	ebaa 0303 	sub.w	r3, sl, r3
 80051e4:	eba3 0309 	sub.w	r3, r3, r9
 80051e8:	4543      	cmp	r3, r8
 80051ea:	f77f af7a 	ble.w	80050e2 <_printf_float+0x242>
 80051ee:	2301      	movs	r3, #1
 80051f0:	465a      	mov	r2, fp
 80051f2:	4631      	mov	r1, r6
 80051f4:	4628      	mov	r0, r5
 80051f6:	47b8      	blx	r7
 80051f8:	3001      	adds	r0, #1
 80051fa:	f43f aeac 	beq.w	8004f56 <_printf_float+0xb6>
 80051fe:	f108 0801 	add.w	r8, r8, #1
 8005202:	e7ec      	b.n	80051de <_printf_float+0x33e>
 8005204:	4642      	mov	r2, r8
 8005206:	4631      	mov	r1, r6
 8005208:	4628      	mov	r0, r5
 800520a:	47b8      	blx	r7
 800520c:	3001      	adds	r0, #1
 800520e:	d1c2      	bne.n	8005196 <_printf_float+0x2f6>
 8005210:	e6a1      	b.n	8004f56 <_printf_float+0xb6>
 8005212:	2301      	movs	r3, #1
 8005214:	4631      	mov	r1, r6
 8005216:	4628      	mov	r0, r5
 8005218:	920a      	str	r2, [sp, #40]	@ 0x28
 800521a:	47b8      	blx	r7
 800521c:	3001      	adds	r0, #1
 800521e:	f43f ae9a 	beq.w	8004f56 <_printf_float+0xb6>
 8005222:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005224:	f10b 0b01 	add.w	fp, fp, #1
 8005228:	e7bb      	b.n	80051a2 <_printf_float+0x302>
 800522a:	4631      	mov	r1, r6
 800522c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005230:	4628      	mov	r0, r5
 8005232:	47b8      	blx	r7
 8005234:	3001      	adds	r0, #1
 8005236:	d1c0      	bne.n	80051ba <_printf_float+0x31a>
 8005238:	e68d      	b.n	8004f56 <_printf_float+0xb6>
 800523a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800523c:	464b      	mov	r3, r9
 800523e:	4631      	mov	r1, r6
 8005240:	4628      	mov	r0, r5
 8005242:	4442      	add	r2, r8
 8005244:	47b8      	blx	r7
 8005246:	3001      	adds	r0, #1
 8005248:	d1c3      	bne.n	80051d2 <_printf_float+0x332>
 800524a:	e684      	b.n	8004f56 <_printf_float+0xb6>
 800524c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005250:	f1ba 0f01 	cmp.w	sl, #1
 8005254:	dc01      	bgt.n	800525a <_printf_float+0x3ba>
 8005256:	07db      	lsls	r3, r3, #31
 8005258:	d536      	bpl.n	80052c8 <_printf_float+0x428>
 800525a:	2301      	movs	r3, #1
 800525c:	4642      	mov	r2, r8
 800525e:	4631      	mov	r1, r6
 8005260:	4628      	mov	r0, r5
 8005262:	47b8      	blx	r7
 8005264:	3001      	adds	r0, #1
 8005266:	f43f ae76 	beq.w	8004f56 <_printf_float+0xb6>
 800526a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800526e:	4631      	mov	r1, r6
 8005270:	4628      	mov	r0, r5
 8005272:	47b8      	blx	r7
 8005274:	3001      	adds	r0, #1
 8005276:	f43f ae6e 	beq.w	8004f56 <_printf_float+0xb6>
 800527a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800527e:	2200      	movs	r2, #0
 8005280:	2300      	movs	r3, #0
 8005282:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005286:	f7fb fb8f 	bl	80009a8 <__aeabi_dcmpeq>
 800528a:	b9c0      	cbnz	r0, 80052be <_printf_float+0x41e>
 800528c:	4653      	mov	r3, sl
 800528e:	f108 0201 	add.w	r2, r8, #1
 8005292:	4631      	mov	r1, r6
 8005294:	4628      	mov	r0, r5
 8005296:	47b8      	blx	r7
 8005298:	3001      	adds	r0, #1
 800529a:	d10c      	bne.n	80052b6 <_printf_float+0x416>
 800529c:	e65b      	b.n	8004f56 <_printf_float+0xb6>
 800529e:	2301      	movs	r3, #1
 80052a0:	465a      	mov	r2, fp
 80052a2:	4631      	mov	r1, r6
 80052a4:	4628      	mov	r0, r5
 80052a6:	47b8      	blx	r7
 80052a8:	3001      	adds	r0, #1
 80052aa:	f43f ae54 	beq.w	8004f56 <_printf_float+0xb6>
 80052ae:	f108 0801 	add.w	r8, r8, #1
 80052b2:	45d0      	cmp	r8, sl
 80052b4:	dbf3      	blt.n	800529e <_printf_float+0x3fe>
 80052b6:	464b      	mov	r3, r9
 80052b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80052bc:	e6e0      	b.n	8005080 <_printf_float+0x1e0>
 80052be:	f04f 0800 	mov.w	r8, #0
 80052c2:	f104 0b1a 	add.w	fp, r4, #26
 80052c6:	e7f4      	b.n	80052b2 <_printf_float+0x412>
 80052c8:	2301      	movs	r3, #1
 80052ca:	4642      	mov	r2, r8
 80052cc:	e7e1      	b.n	8005292 <_printf_float+0x3f2>
 80052ce:	2301      	movs	r3, #1
 80052d0:	464a      	mov	r2, r9
 80052d2:	4631      	mov	r1, r6
 80052d4:	4628      	mov	r0, r5
 80052d6:	47b8      	blx	r7
 80052d8:	3001      	adds	r0, #1
 80052da:	f43f ae3c 	beq.w	8004f56 <_printf_float+0xb6>
 80052de:	f108 0801 	add.w	r8, r8, #1
 80052e2:	68e3      	ldr	r3, [r4, #12]
 80052e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80052e6:	1a5b      	subs	r3, r3, r1
 80052e8:	4543      	cmp	r3, r8
 80052ea:	dcf0      	bgt.n	80052ce <_printf_float+0x42e>
 80052ec:	e6fd      	b.n	80050ea <_printf_float+0x24a>
 80052ee:	f04f 0800 	mov.w	r8, #0
 80052f2:	f104 0919 	add.w	r9, r4, #25
 80052f6:	e7f4      	b.n	80052e2 <_printf_float+0x442>

080052f8 <_printf_common>:
 80052f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052fc:	4616      	mov	r6, r2
 80052fe:	4698      	mov	r8, r3
 8005300:	688a      	ldr	r2, [r1, #8]
 8005302:	690b      	ldr	r3, [r1, #16]
 8005304:	4607      	mov	r7, r0
 8005306:	4293      	cmp	r3, r2
 8005308:	bfb8      	it	lt
 800530a:	4613      	movlt	r3, r2
 800530c:	6033      	str	r3, [r6, #0]
 800530e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005312:	460c      	mov	r4, r1
 8005314:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005318:	b10a      	cbz	r2, 800531e <_printf_common+0x26>
 800531a:	3301      	adds	r3, #1
 800531c:	6033      	str	r3, [r6, #0]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	0699      	lsls	r1, r3, #26
 8005322:	bf42      	ittt	mi
 8005324:	6833      	ldrmi	r3, [r6, #0]
 8005326:	3302      	addmi	r3, #2
 8005328:	6033      	strmi	r3, [r6, #0]
 800532a:	6825      	ldr	r5, [r4, #0]
 800532c:	f015 0506 	ands.w	r5, r5, #6
 8005330:	d106      	bne.n	8005340 <_printf_common+0x48>
 8005332:	f104 0a19 	add.w	sl, r4, #25
 8005336:	68e3      	ldr	r3, [r4, #12]
 8005338:	6832      	ldr	r2, [r6, #0]
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	42ab      	cmp	r3, r5
 800533e:	dc2b      	bgt.n	8005398 <_printf_common+0xa0>
 8005340:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005344:	6822      	ldr	r2, [r4, #0]
 8005346:	3b00      	subs	r3, #0
 8005348:	bf18      	it	ne
 800534a:	2301      	movne	r3, #1
 800534c:	0692      	lsls	r2, r2, #26
 800534e:	d430      	bmi.n	80053b2 <_printf_common+0xba>
 8005350:	4641      	mov	r1, r8
 8005352:	4638      	mov	r0, r7
 8005354:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005358:	47c8      	blx	r9
 800535a:	3001      	adds	r0, #1
 800535c:	d023      	beq.n	80053a6 <_printf_common+0xae>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	6922      	ldr	r2, [r4, #16]
 8005362:	f003 0306 	and.w	r3, r3, #6
 8005366:	2b04      	cmp	r3, #4
 8005368:	bf14      	ite	ne
 800536a:	2500      	movne	r5, #0
 800536c:	6833      	ldreq	r3, [r6, #0]
 800536e:	f04f 0600 	mov.w	r6, #0
 8005372:	bf08      	it	eq
 8005374:	68e5      	ldreq	r5, [r4, #12]
 8005376:	f104 041a 	add.w	r4, r4, #26
 800537a:	bf08      	it	eq
 800537c:	1aed      	subeq	r5, r5, r3
 800537e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005382:	bf08      	it	eq
 8005384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005388:	4293      	cmp	r3, r2
 800538a:	bfc4      	itt	gt
 800538c:	1a9b      	subgt	r3, r3, r2
 800538e:	18ed      	addgt	r5, r5, r3
 8005390:	42b5      	cmp	r5, r6
 8005392:	d11a      	bne.n	80053ca <_printf_common+0xd2>
 8005394:	2000      	movs	r0, #0
 8005396:	e008      	b.n	80053aa <_printf_common+0xb2>
 8005398:	2301      	movs	r3, #1
 800539a:	4652      	mov	r2, sl
 800539c:	4641      	mov	r1, r8
 800539e:	4638      	mov	r0, r7
 80053a0:	47c8      	blx	r9
 80053a2:	3001      	adds	r0, #1
 80053a4:	d103      	bne.n	80053ae <_printf_common+0xb6>
 80053a6:	f04f 30ff 	mov.w	r0, #4294967295
 80053aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ae:	3501      	adds	r5, #1
 80053b0:	e7c1      	b.n	8005336 <_printf_common+0x3e>
 80053b2:	2030      	movs	r0, #48	@ 0x30
 80053b4:	18e1      	adds	r1, r4, r3
 80053b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053c0:	4422      	add	r2, r4
 80053c2:	3302      	adds	r3, #2
 80053c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053c8:	e7c2      	b.n	8005350 <_printf_common+0x58>
 80053ca:	2301      	movs	r3, #1
 80053cc:	4622      	mov	r2, r4
 80053ce:	4641      	mov	r1, r8
 80053d0:	4638      	mov	r0, r7
 80053d2:	47c8      	blx	r9
 80053d4:	3001      	adds	r0, #1
 80053d6:	d0e6      	beq.n	80053a6 <_printf_common+0xae>
 80053d8:	3601      	adds	r6, #1
 80053da:	e7d9      	b.n	8005390 <_printf_common+0x98>

080053dc <_printf_i>:
 80053dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e0:	7e0f      	ldrb	r7, [r1, #24]
 80053e2:	4691      	mov	r9, r2
 80053e4:	2f78      	cmp	r7, #120	@ 0x78
 80053e6:	4680      	mov	r8, r0
 80053e8:	460c      	mov	r4, r1
 80053ea:	469a      	mov	sl, r3
 80053ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053f2:	d807      	bhi.n	8005404 <_printf_i+0x28>
 80053f4:	2f62      	cmp	r7, #98	@ 0x62
 80053f6:	d80a      	bhi.n	800540e <_printf_i+0x32>
 80053f8:	2f00      	cmp	r7, #0
 80053fa:	f000 80d1 	beq.w	80055a0 <_printf_i+0x1c4>
 80053fe:	2f58      	cmp	r7, #88	@ 0x58
 8005400:	f000 80b8 	beq.w	8005574 <_printf_i+0x198>
 8005404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005408:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800540c:	e03a      	b.n	8005484 <_printf_i+0xa8>
 800540e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005412:	2b15      	cmp	r3, #21
 8005414:	d8f6      	bhi.n	8005404 <_printf_i+0x28>
 8005416:	a101      	add	r1, pc, #4	@ (adr r1, 800541c <_printf_i+0x40>)
 8005418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800541c:	08005475 	.word	0x08005475
 8005420:	08005489 	.word	0x08005489
 8005424:	08005405 	.word	0x08005405
 8005428:	08005405 	.word	0x08005405
 800542c:	08005405 	.word	0x08005405
 8005430:	08005405 	.word	0x08005405
 8005434:	08005489 	.word	0x08005489
 8005438:	08005405 	.word	0x08005405
 800543c:	08005405 	.word	0x08005405
 8005440:	08005405 	.word	0x08005405
 8005444:	08005405 	.word	0x08005405
 8005448:	08005587 	.word	0x08005587
 800544c:	080054b3 	.word	0x080054b3
 8005450:	08005541 	.word	0x08005541
 8005454:	08005405 	.word	0x08005405
 8005458:	08005405 	.word	0x08005405
 800545c:	080055a9 	.word	0x080055a9
 8005460:	08005405 	.word	0x08005405
 8005464:	080054b3 	.word	0x080054b3
 8005468:	08005405 	.word	0x08005405
 800546c:	08005405 	.word	0x08005405
 8005470:	08005549 	.word	0x08005549
 8005474:	6833      	ldr	r3, [r6, #0]
 8005476:	1d1a      	adds	r2, r3, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6032      	str	r2, [r6, #0]
 800547c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005480:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005484:	2301      	movs	r3, #1
 8005486:	e09c      	b.n	80055c2 <_printf_i+0x1e6>
 8005488:	6833      	ldr	r3, [r6, #0]
 800548a:	6820      	ldr	r0, [r4, #0]
 800548c:	1d19      	adds	r1, r3, #4
 800548e:	6031      	str	r1, [r6, #0]
 8005490:	0606      	lsls	r6, r0, #24
 8005492:	d501      	bpl.n	8005498 <_printf_i+0xbc>
 8005494:	681d      	ldr	r5, [r3, #0]
 8005496:	e003      	b.n	80054a0 <_printf_i+0xc4>
 8005498:	0645      	lsls	r5, r0, #25
 800549a:	d5fb      	bpl.n	8005494 <_printf_i+0xb8>
 800549c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054a0:	2d00      	cmp	r5, #0
 80054a2:	da03      	bge.n	80054ac <_printf_i+0xd0>
 80054a4:	232d      	movs	r3, #45	@ 0x2d
 80054a6:	426d      	negs	r5, r5
 80054a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054ac:	230a      	movs	r3, #10
 80054ae:	4858      	ldr	r0, [pc, #352]	@ (8005610 <_printf_i+0x234>)
 80054b0:	e011      	b.n	80054d6 <_printf_i+0xfa>
 80054b2:	6821      	ldr	r1, [r4, #0]
 80054b4:	6833      	ldr	r3, [r6, #0]
 80054b6:	0608      	lsls	r0, r1, #24
 80054b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80054bc:	d402      	bmi.n	80054c4 <_printf_i+0xe8>
 80054be:	0649      	lsls	r1, r1, #25
 80054c0:	bf48      	it	mi
 80054c2:	b2ad      	uxthmi	r5, r5
 80054c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80054c6:	6033      	str	r3, [r6, #0]
 80054c8:	bf14      	ite	ne
 80054ca:	230a      	movne	r3, #10
 80054cc:	2308      	moveq	r3, #8
 80054ce:	4850      	ldr	r0, [pc, #320]	@ (8005610 <_printf_i+0x234>)
 80054d0:	2100      	movs	r1, #0
 80054d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054d6:	6866      	ldr	r6, [r4, #4]
 80054d8:	2e00      	cmp	r6, #0
 80054da:	60a6      	str	r6, [r4, #8]
 80054dc:	db05      	blt.n	80054ea <_printf_i+0x10e>
 80054de:	6821      	ldr	r1, [r4, #0]
 80054e0:	432e      	orrs	r6, r5
 80054e2:	f021 0104 	bic.w	r1, r1, #4
 80054e6:	6021      	str	r1, [r4, #0]
 80054e8:	d04b      	beq.n	8005582 <_printf_i+0x1a6>
 80054ea:	4616      	mov	r6, r2
 80054ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80054f0:	fb03 5711 	mls	r7, r3, r1, r5
 80054f4:	5dc7      	ldrb	r7, [r0, r7]
 80054f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054fa:	462f      	mov	r7, r5
 80054fc:	42bb      	cmp	r3, r7
 80054fe:	460d      	mov	r5, r1
 8005500:	d9f4      	bls.n	80054ec <_printf_i+0x110>
 8005502:	2b08      	cmp	r3, #8
 8005504:	d10b      	bne.n	800551e <_printf_i+0x142>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	07df      	lsls	r7, r3, #31
 800550a:	d508      	bpl.n	800551e <_printf_i+0x142>
 800550c:	6923      	ldr	r3, [r4, #16]
 800550e:	6861      	ldr	r1, [r4, #4]
 8005510:	4299      	cmp	r1, r3
 8005512:	bfde      	ittt	le
 8005514:	2330      	movle	r3, #48	@ 0x30
 8005516:	f806 3c01 	strble.w	r3, [r6, #-1]
 800551a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800551e:	1b92      	subs	r2, r2, r6
 8005520:	6122      	str	r2, [r4, #16]
 8005522:	464b      	mov	r3, r9
 8005524:	4621      	mov	r1, r4
 8005526:	4640      	mov	r0, r8
 8005528:	f8cd a000 	str.w	sl, [sp]
 800552c:	aa03      	add	r2, sp, #12
 800552e:	f7ff fee3 	bl	80052f8 <_printf_common>
 8005532:	3001      	adds	r0, #1
 8005534:	d14a      	bne.n	80055cc <_printf_i+0x1f0>
 8005536:	f04f 30ff 	mov.w	r0, #4294967295
 800553a:	b004      	add	sp, #16
 800553c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	f043 0320 	orr.w	r3, r3, #32
 8005546:	6023      	str	r3, [r4, #0]
 8005548:	2778      	movs	r7, #120	@ 0x78
 800554a:	4832      	ldr	r0, [pc, #200]	@ (8005614 <_printf_i+0x238>)
 800554c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	6831      	ldr	r1, [r6, #0]
 8005554:	061f      	lsls	r7, r3, #24
 8005556:	f851 5b04 	ldr.w	r5, [r1], #4
 800555a:	d402      	bmi.n	8005562 <_printf_i+0x186>
 800555c:	065f      	lsls	r7, r3, #25
 800555e:	bf48      	it	mi
 8005560:	b2ad      	uxthmi	r5, r5
 8005562:	6031      	str	r1, [r6, #0]
 8005564:	07d9      	lsls	r1, r3, #31
 8005566:	bf44      	itt	mi
 8005568:	f043 0320 	orrmi.w	r3, r3, #32
 800556c:	6023      	strmi	r3, [r4, #0]
 800556e:	b11d      	cbz	r5, 8005578 <_printf_i+0x19c>
 8005570:	2310      	movs	r3, #16
 8005572:	e7ad      	b.n	80054d0 <_printf_i+0xf4>
 8005574:	4826      	ldr	r0, [pc, #152]	@ (8005610 <_printf_i+0x234>)
 8005576:	e7e9      	b.n	800554c <_printf_i+0x170>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	f023 0320 	bic.w	r3, r3, #32
 800557e:	6023      	str	r3, [r4, #0]
 8005580:	e7f6      	b.n	8005570 <_printf_i+0x194>
 8005582:	4616      	mov	r6, r2
 8005584:	e7bd      	b.n	8005502 <_printf_i+0x126>
 8005586:	6833      	ldr	r3, [r6, #0]
 8005588:	6825      	ldr	r5, [r4, #0]
 800558a:	1d18      	adds	r0, r3, #4
 800558c:	6961      	ldr	r1, [r4, #20]
 800558e:	6030      	str	r0, [r6, #0]
 8005590:	062e      	lsls	r6, r5, #24
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	d501      	bpl.n	800559a <_printf_i+0x1be>
 8005596:	6019      	str	r1, [r3, #0]
 8005598:	e002      	b.n	80055a0 <_printf_i+0x1c4>
 800559a:	0668      	lsls	r0, r5, #25
 800559c:	d5fb      	bpl.n	8005596 <_printf_i+0x1ba>
 800559e:	8019      	strh	r1, [r3, #0]
 80055a0:	2300      	movs	r3, #0
 80055a2:	4616      	mov	r6, r2
 80055a4:	6123      	str	r3, [r4, #16]
 80055a6:	e7bc      	b.n	8005522 <_printf_i+0x146>
 80055a8:	6833      	ldr	r3, [r6, #0]
 80055aa:	2100      	movs	r1, #0
 80055ac:	1d1a      	adds	r2, r3, #4
 80055ae:	6032      	str	r2, [r6, #0]
 80055b0:	681e      	ldr	r6, [r3, #0]
 80055b2:	6862      	ldr	r2, [r4, #4]
 80055b4:	4630      	mov	r0, r6
 80055b6:	f000 fbe0 	bl	8005d7a <memchr>
 80055ba:	b108      	cbz	r0, 80055c0 <_printf_i+0x1e4>
 80055bc:	1b80      	subs	r0, r0, r6
 80055be:	6060      	str	r0, [r4, #4]
 80055c0:	6863      	ldr	r3, [r4, #4]
 80055c2:	6123      	str	r3, [r4, #16]
 80055c4:	2300      	movs	r3, #0
 80055c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ca:	e7aa      	b.n	8005522 <_printf_i+0x146>
 80055cc:	4632      	mov	r2, r6
 80055ce:	4649      	mov	r1, r9
 80055d0:	4640      	mov	r0, r8
 80055d2:	6923      	ldr	r3, [r4, #16]
 80055d4:	47d0      	blx	sl
 80055d6:	3001      	adds	r0, #1
 80055d8:	d0ad      	beq.n	8005536 <_printf_i+0x15a>
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	079b      	lsls	r3, r3, #30
 80055de:	d413      	bmi.n	8005608 <_printf_i+0x22c>
 80055e0:	68e0      	ldr	r0, [r4, #12]
 80055e2:	9b03      	ldr	r3, [sp, #12]
 80055e4:	4298      	cmp	r0, r3
 80055e6:	bfb8      	it	lt
 80055e8:	4618      	movlt	r0, r3
 80055ea:	e7a6      	b.n	800553a <_printf_i+0x15e>
 80055ec:	2301      	movs	r3, #1
 80055ee:	4632      	mov	r2, r6
 80055f0:	4649      	mov	r1, r9
 80055f2:	4640      	mov	r0, r8
 80055f4:	47d0      	blx	sl
 80055f6:	3001      	adds	r0, #1
 80055f8:	d09d      	beq.n	8005536 <_printf_i+0x15a>
 80055fa:	3501      	adds	r5, #1
 80055fc:	68e3      	ldr	r3, [r4, #12]
 80055fe:	9903      	ldr	r1, [sp, #12]
 8005600:	1a5b      	subs	r3, r3, r1
 8005602:	42ab      	cmp	r3, r5
 8005604:	dcf2      	bgt.n	80055ec <_printf_i+0x210>
 8005606:	e7eb      	b.n	80055e0 <_printf_i+0x204>
 8005608:	2500      	movs	r5, #0
 800560a:	f104 0619 	add.w	r6, r4, #25
 800560e:	e7f5      	b.n	80055fc <_printf_i+0x220>
 8005610:	08009474 	.word	0x08009474
 8005614:	08009485 	.word	0x08009485

08005618 <_scanf_float>:
 8005618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561c:	b087      	sub	sp, #28
 800561e:	9303      	str	r3, [sp, #12]
 8005620:	688b      	ldr	r3, [r1, #8]
 8005622:	4691      	mov	r9, r2
 8005624:	1e5a      	subs	r2, r3, #1
 8005626:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800562a:	bf82      	ittt	hi
 800562c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005630:	eb03 0b05 	addhi.w	fp, r3, r5
 8005634:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005638:	460a      	mov	r2, r1
 800563a:	f04f 0500 	mov.w	r5, #0
 800563e:	bf88      	it	hi
 8005640:	608b      	strhi	r3, [r1, #8]
 8005642:	680b      	ldr	r3, [r1, #0]
 8005644:	4680      	mov	r8, r0
 8005646:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800564a:	f842 3b1c 	str.w	r3, [r2], #28
 800564e:	460c      	mov	r4, r1
 8005650:	bf98      	it	ls
 8005652:	f04f 0b00 	movls.w	fp, #0
 8005656:	4616      	mov	r6, r2
 8005658:	46aa      	mov	sl, r5
 800565a:	462f      	mov	r7, r5
 800565c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005660:	9201      	str	r2, [sp, #4]
 8005662:	9502      	str	r5, [sp, #8]
 8005664:	68a2      	ldr	r2, [r4, #8]
 8005666:	b15a      	cbz	r2, 8005680 <_scanf_float+0x68>
 8005668:	f8d9 3000 	ldr.w	r3, [r9]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005670:	d862      	bhi.n	8005738 <_scanf_float+0x120>
 8005672:	2b40      	cmp	r3, #64	@ 0x40
 8005674:	d83a      	bhi.n	80056ec <_scanf_float+0xd4>
 8005676:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800567a:	b2c8      	uxtb	r0, r1
 800567c:	280e      	cmp	r0, #14
 800567e:	d938      	bls.n	80056f2 <_scanf_float+0xda>
 8005680:	b11f      	cbz	r7, 800568a <_scanf_float+0x72>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800568e:	f1ba 0f01 	cmp.w	sl, #1
 8005692:	f200 8114 	bhi.w	80058be <_scanf_float+0x2a6>
 8005696:	9b01      	ldr	r3, [sp, #4]
 8005698:	429e      	cmp	r6, r3
 800569a:	f200 8105 	bhi.w	80058a8 <_scanf_float+0x290>
 800569e:	2001      	movs	r0, #1
 80056a0:	b007      	add	sp, #28
 80056a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80056aa:	2a0d      	cmp	r2, #13
 80056ac:	d8e8      	bhi.n	8005680 <_scanf_float+0x68>
 80056ae:	a101      	add	r1, pc, #4	@ (adr r1, 80056b4 <_scanf_float+0x9c>)
 80056b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056b4:	080057fd 	.word	0x080057fd
 80056b8:	08005681 	.word	0x08005681
 80056bc:	08005681 	.word	0x08005681
 80056c0:	08005681 	.word	0x08005681
 80056c4:	08005859 	.word	0x08005859
 80056c8:	08005833 	.word	0x08005833
 80056cc:	08005681 	.word	0x08005681
 80056d0:	08005681 	.word	0x08005681
 80056d4:	0800580b 	.word	0x0800580b
 80056d8:	08005681 	.word	0x08005681
 80056dc:	08005681 	.word	0x08005681
 80056e0:	08005681 	.word	0x08005681
 80056e4:	08005681 	.word	0x08005681
 80056e8:	080057c7 	.word	0x080057c7
 80056ec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80056f0:	e7db      	b.n	80056aa <_scanf_float+0x92>
 80056f2:	290e      	cmp	r1, #14
 80056f4:	d8c4      	bhi.n	8005680 <_scanf_float+0x68>
 80056f6:	a001      	add	r0, pc, #4	@ (adr r0, 80056fc <_scanf_float+0xe4>)
 80056f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80056fc:	080057b7 	.word	0x080057b7
 8005700:	08005681 	.word	0x08005681
 8005704:	080057b7 	.word	0x080057b7
 8005708:	08005847 	.word	0x08005847
 800570c:	08005681 	.word	0x08005681
 8005710:	08005759 	.word	0x08005759
 8005714:	0800579d 	.word	0x0800579d
 8005718:	0800579d 	.word	0x0800579d
 800571c:	0800579d 	.word	0x0800579d
 8005720:	0800579d 	.word	0x0800579d
 8005724:	0800579d 	.word	0x0800579d
 8005728:	0800579d 	.word	0x0800579d
 800572c:	0800579d 	.word	0x0800579d
 8005730:	0800579d 	.word	0x0800579d
 8005734:	0800579d 	.word	0x0800579d
 8005738:	2b6e      	cmp	r3, #110	@ 0x6e
 800573a:	d809      	bhi.n	8005750 <_scanf_float+0x138>
 800573c:	2b60      	cmp	r3, #96	@ 0x60
 800573e:	d8b2      	bhi.n	80056a6 <_scanf_float+0x8e>
 8005740:	2b54      	cmp	r3, #84	@ 0x54
 8005742:	d07b      	beq.n	800583c <_scanf_float+0x224>
 8005744:	2b59      	cmp	r3, #89	@ 0x59
 8005746:	d19b      	bne.n	8005680 <_scanf_float+0x68>
 8005748:	2d07      	cmp	r5, #7
 800574a:	d199      	bne.n	8005680 <_scanf_float+0x68>
 800574c:	2508      	movs	r5, #8
 800574e:	e02f      	b.n	80057b0 <_scanf_float+0x198>
 8005750:	2b74      	cmp	r3, #116	@ 0x74
 8005752:	d073      	beq.n	800583c <_scanf_float+0x224>
 8005754:	2b79      	cmp	r3, #121	@ 0x79
 8005756:	e7f6      	b.n	8005746 <_scanf_float+0x12e>
 8005758:	6821      	ldr	r1, [r4, #0]
 800575a:	05c8      	lsls	r0, r1, #23
 800575c:	d51e      	bpl.n	800579c <_scanf_float+0x184>
 800575e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005762:	6021      	str	r1, [r4, #0]
 8005764:	3701      	adds	r7, #1
 8005766:	f1bb 0f00 	cmp.w	fp, #0
 800576a:	d003      	beq.n	8005774 <_scanf_float+0x15c>
 800576c:	3201      	adds	r2, #1
 800576e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005772:	60a2      	str	r2, [r4, #8]
 8005774:	68a3      	ldr	r3, [r4, #8]
 8005776:	3b01      	subs	r3, #1
 8005778:	60a3      	str	r3, [r4, #8]
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	3301      	adds	r3, #1
 800577e:	6123      	str	r3, [r4, #16]
 8005780:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005784:	3b01      	subs	r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	f8c9 3004 	str.w	r3, [r9, #4]
 800578c:	f340 8083 	ble.w	8005896 <_scanf_float+0x27e>
 8005790:	f8d9 3000 	ldr.w	r3, [r9]
 8005794:	3301      	adds	r3, #1
 8005796:	f8c9 3000 	str.w	r3, [r9]
 800579a:	e763      	b.n	8005664 <_scanf_float+0x4c>
 800579c:	eb1a 0105 	adds.w	r1, sl, r5
 80057a0:	f47f af6e 	bne.w	8005680 <_scanf_float+0x68>
 80057a4:	460d      	mov	r5, r1
 80057a6:	468a      	mov	sl, r1
 80057a8:	6822      	ldr	r2, [r4, #0]
 80057aa:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80057ae:	6022      	str	r2, [r4, #0]
 80057b0:	f806 3b01 	strb.w	r3, [r6], #1
 80057b4:	e7de      	b.n	8005774 <_scanf_float+0x15c>
 80057b6:	6822      	ldr	r2, [r4, #0]
 80057b8:	0610      	lsls	r0, r2, #24
 80057ba:	f57f af61 	bpl.w	8005680 <_scanf_float+0x68>
 80057be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057c2:	6022      	str	r2, [r4, #0]
 80057c4:	e7f4      	b.n	80057b0 <_scanf_float+0x198>
 80057c6:	f1ba 0f00 	cmp.w	sl, #0
 80057ca:	d10c      	bne.n	80057e6 <_scanf_float+0x1ce>
 80057cc:	b977      	cbnz	r7, 80057ec <_scanf_float+0x1d4>
 80057ce:	6822      	ldr	r2, [r4, #0]
 80057d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80057d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80057d8:	d108      	bne.n	80057ec <_scanf_float+0x1d4>
 80057da:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80057de:	f04f 0a01 	mov.w	sl, #1
 80057e2:	6022      	str	r2, [r4, #0]
 80057e4:	e7e4      	b.n	80057b0 <_scanf_float+0x198>
 80057e6:	f1ba 0f02 	cmp.w	sl, #2
 80057ea:	d051      	beq.n	8005890 <_scanf_float+0x278>
 80057ec:	2d01      	cmp	r5, #1
 80057ee:	d002      	beq.n	80057f6 <_scanf_float+0x1de>
 80057f0:	2d04      	cmp	r5, #4
 80057f2:	f47f af45 	bne.w	8005680 <_scanf_float+0x68>
 80057f6:	3501      	adds	r5, #1
 80057f8:	b2ed      	uxtb	r5, r5
 80057fa:	e7d9      	b.n	80057b0 <_scanf_float+0x198>
 80057fc:	f1ba 0f01 	cmp.w	sl, #1
 8005800:	f47f af3e 	bne.w	8005680 <_scanf_float+0x68>
 8005804:	f04f 0a02 	mov.w	sl, #2
 8005808:	e7d2      	b.n	80057b0 <_scanf_float+0x198>
 800580a:	b975      	cbnz	r5, 800582a <_scanf_float+0x212>
 800580c:	2f00      	cmp	r7, #0
 800580e:	f47f af38 	bne.w	8005682 <_scanf_float+0x6a>
 8005812:	6822      	ldr	r2, [r4, #0]
 8005814:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005818:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800581c:	f040 80ff 	bne.w	8005a1e <_scanf_float+0x406>
 8005820:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005824:	2501      	movs	r5, #1
 8005826:	6022      	str	r2, [r4, #0]
 8005828:	e7c2      	b.n	80057b0 <_scanf_float+0x198>
 800582a:	2d03      	cmp	r5, #3
 800582c:	d0e3      	beq.n	80057f6 <_scanf_float+0x1de>
 800582e:	2d05      	cmp	r5, #5
 8005830:	e7df      	b.n	80057f2 <_scanf_float+0x1da>
 8005832:	2d02      	cmp	r5, #2
 8005834:	f47f af24 	bne.w	8005680 <_scanf_float+0x68>
 8005838:	2503      	movs	r5, #3
 800583a:	e7b9      	b.n	80057b0 <_scanf_float+0x198>
 800583c:	2d06      	cmp	r5, #6
 800583e:	f47f af1f 	bne.w	8005680 <_scanf_float+0x68>
 8005842:	2507      	movs	r5, #7
 8005844:	e7b4      	b.n	80057b0 <_scanf_float+0x198>
 8005846:	6822      	ldr	r2, [r4, #0]
 8005848:	0591      	lsls	r1, r2, #22
 800584a:	f57f af19 	bpl.w	8005680 <_scanf_float+0x68>
 800584e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005852:	6022      	str	r2, [r4, #0]
 8005854:	9702      	str	r7, [sp, #8]
 8005856:	e7ab      	b.n	80057b0 <_scanf_float+0x198>
 8005858:	6822      	ldr	r2, [r4, #0]
 800585a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800585e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005862:	d005      	beq.n	8005870 <_scanf_float+0x258>
 8005864:	0550      	lsls	r0, r2, #21
 8005866:	f57f af0b 	bpl.w	8005680 <_scanf_float+0x68>
 800586a:	2f00      	cmp	r7, #0
 800586c:	f000 80d7 	beq.w	8005a1e <_scanf_float+0x406>
 8005870:	0591      	lsls	r1, r2, #22
 8005872:	bf58      	it	pl
 8005874:	9902      	ldrpl	r1, [sp, #8]
 8005876:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800587a:	bf58      	it	pl
 800587c:	1a79      	subpl	r1, r7, r1
 800587e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005882:	f04f 0700 	mov.w	r7, #0
 8005886:	bf58      	it	pl
 8005888:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800588c:	6022      	str	r2, [r4, #0]
 800588e:	e78f      	b.n	80057b0 <_scanf_float+0x198>
 8005890:	f04f 0a03 	mov.w	sl, #3
 8005894:	e78c      	b.n	80057b0 <_scanf_float+0x198>
 8005896:	4649      	mov	r1, r9
 8005898:	4640      	mov	r0, r8
 800589a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800589e:	4798      	blx	r3
 80058a0:	2800      	cmp	r0, #0
 80058a2:	f43f aedf 	beq.w	8005664 <_scanf_float+0x4c>
 80058a6:	e6eb      	b.n	8005680 <_scanf_float+0x68>
 80058a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058ac:	464a      	mov	r2, r9
 80058ae:	4640      	mov	r0, r8
 80058b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058b4:	4798      	blx	r3
 80058b6:	6923      	ldr	r3, [r4, #16]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	6123      	str	r3, [r4, #16]
 80058bc:	e6eb      	b.n	8005696 <_scanf_float+0x7e>
 80058be:	1e6b      	subs	r3, r5, #1
 80058c0:	2b06      	cmp	r3, #6
 80058c2:	d824      	bhi.n	800590e <_scanf_float+0x2f6>
 80058c4:	2d02      	cmp	r5, #2
 80058c6:	d836      	bhi.n	8005936 <_scanf_float+0x31e>
 80058c8:	9b01      	ldr	r3, [sp, #4]
 80058ca:	429e      	cmp	r6, r3
 80058cc:	f67f aee7 	bls.w	800569e <_scanf_float+0x86>
 80058d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058d4:	464a      	mov	r2, r9
 80058d6:	4640      	mov	r0, r8
 80058d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058dc:	4798      	blx	r3
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	6123      	str	r3, [r4, #16]
 80058e4:	e7f0      	b.n	80058c8 <_scanf_float+0x2b0>
 80058e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058ea:	464a      	mov	r2, r9
 80058ec:	4640      	mov	r0, r8
 80058ee:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80058f2:	4798      	blx	r3
 80058f4:	6923      	ldr	r3, [r4, #16]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	6123      	str	r3, [r4, #16]
 80058fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058fe:	fa5f fa8a 	uxtb.w	sl, sl
 8005902:	f1ba 0f02 	cmp.w	sl, #2
 8005906:	d1ee      	bne.n	80058e6 <_scanf_float+0x2ce>
 8005908:	3d03      	subs	r5, #3
 800590a:	b2ed      	uxtb	r5, r5
 800590c:	1b76      	subs	r6, r6, r5
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	05da      	lsls	r2, r3, #23
 8005912:	d530      	bpl.n	8005976 <_scanf_float+0x35e>
 8005914:	055b      	lsls	r3, r3, #21
 8005916:	d511      	bpl.n	800593c <_scanf_float+0x324>
 8005918:	9b01      	ldr	r3, [sp, #4]
 800591a:	429e      	cmp	r6, r3
 800591c:	f67f aebf 	bls.w	800569e <_scanf_float+0x86>
 8005920:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005924:	464a      	mov	r2, r9
 8005926:	4640      	mov	r0, r8
 8005928:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800592c:	4798      	blx	r3
 800592e:	6923      	ldr	r3, [r4, #16]
 8005930:	3b01      	subs	r3, #1
 8005932:	6123      	str	r3, [r4, #16]
 8005934:	e7f0      	b.n	8005918 <_scanf_float+0x300>
 8005936:	46aa      	mov	sl, r5
 8005938:	46b3      	mov	fp, r6
 800593a:	e7de      	b.n	80058fa <_scanf_float+0x2e2>
 800593c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005940:	6923      	ldr	r3, [r4, #16]
 8005942:	2965      	cmp	r1, #101	@ 0x65
 8005944:	f103 33ff 	add.w	r3, r3, #4294967295
 8005948:	f106 35ff 	add.w	r5, r6, #4294967295
 800594c:	6123      	str	r3, [r4, #16]
 800594e:	d00c      	beq.n	800596a <_scanf_float+0x352>
 8005950:	2945      	cmp	r1, #69	@ 0x45
 8005952:	d00a      	beq.n	800596a <_scanf_float+0x352>
 8005954:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005958:	464a      	mov	r2, r9
 800595a:	4640      	mov	r0, r8
 800595c:	4798      	blx	r3
 800595e:	6923      	ldr	r3, [r4, #16]
 8005960:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005964:	3b01      	subs	r3, #1
 8005966:	1eb5      	subs	r5, r6, #2
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	464a      	mov	r2, r9
 800596c:	4640      	mov	r0, r8
 800596e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005972:	4798      	blx	r3
 8005974:	462e      	mov	r6, r5
 8005976:	6822      	ldr	r2, [r4, #0]
 8005978:	f012 0210 	ands.w	r2, r2, #16
 800597c:	d001      	beq.n	8005982 <_scanf_float+0x36a>
 800597e:	2000      	movs	r0, #0
 8005980:	e68e      	b.n	80056a0 <_scanf_float+0x88>
 8005982:	7032      	strb	r2, [r6, #0]
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800598a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800598e:	d125      	bne.n	80059dc <_scanf_float+0x3c4>
 8005990:	9b02      	ldr	r3, [sp, #8]
 8005992:	429f      	cmp	r7, r3
 8005994:	d00a      	beq.n	80059ac <_scanf_float+0x394>
 8005996:	1bda      	subs	r2, r3, r7
 8005998:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800599c:	429e      	cmp	r6, r3
 800599e:	bf28      	it	cs
 80059a0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80059a4:	4630      	mov	r0, r6
 80059a6:	491f      	ldr	r1, [pc, #124]	@ (8005a24 <_scanf_float+0x40c>)
 80059a8:	f000 f902 	bl	8005bb0 <siprintf>
 80059ac:	2200      	movs	r2, #0
 80059ae:	4640      	mov	r0, r8
 80059b0:	9901      	ldr	r1, [sp, #4]
 80059b2:	f002 fbe9 	bl	8008188 <_strtod_r>
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	6825      	ldr	r5, [r4, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f015 0f02 	tst.w	r5, #2
 80059c0:	4606      	mov	r6, r0
 80059c2:	460f      	mov	r7, r1
 80059c4:	f103 0204 	add.w	r2, r3, #4
 80059c8:	d015      	beq.n	80059f6 <_scanf_float+0x3de>
 80059ca:	9903      	ldr	r1, [sp, #12]
 80059cc:	600a      	str	r2, [r1, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	e9c3 6700 	strd	r6, r7, [r3]
 80059d4:	68e3      	ldr	r3, [r4, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60e3      	str	r3, [r4, #12]
 80059da:	e7d0      	b.n	800597e <_scanf_float+0x366>
 80059dc:	9b04      	ldr	r3, [sp, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0e4      	beq.n	80059ac <_scanf_float+0x394>
 80059e2:	9905      	ldr	r1, [sp, #20]
 80059e4:	230a      	movs	r3, #10
 80059e6:	4640      	mov	r0, r8
 80059e8:	3101      	adds	r1, #1
 80059ea:	f002 fc4d 	bl	8008288 <_strtol_r>
 80059ee:	9b04      	ldr	r3, [sp, #16]
 80059f0:	9e05      	ldr	r6, [sp, #20]
 80059f2:	1ac2      	subs	r2, r0, r3
 80059f4:	e7d0      	b.n	8005998 <_scanf_float+0x380>
 80059f6:	076d      	lsls	r5, r5, #29
 80059f8:	d4e7      	bmi.n	80059ca <_scanf_float+0x3b2>
 80059fa:	9d03      	ldr	r5, [sp, #12]
 80059fc:	602a      	str	r2, [r5, #0]
 80059fe:	681d      	ldr	r5, [r3, #0]
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	f7fb f802 	bl	8000a0c <__aeabi_dcmpun>
 8005a08:	b120      	cbz	r0, 8005a14 <_scanf_float+0x3fc>
 8005a0a:	4807      	ldr	r0, [pc, #28]	@ (8005a28 <_scanf_float+0x410>)
 8005a0c:	f000 f9c4 	bl	8005d98 <nanf>
 8005a10:	6028      	str	r0, [r5, #0]
 8005a12:	e7df      	b.n	80059d4 <_scanf_float+0x3bc>
 8005a14:	4630      	mov	r0, r6
 8005a16:	4639      	mov	r1, r7
 8005a18:	f7fb f856 	bl	8000ac8 <__aeabi_d2f>
 8005a1c:	e7f8      	b.n	8005a10 <_scanf_float+0x3f8>
 8005a1e:	2700      	movs	r7, #0
 8005a20:	e633      	b.n	800568a <_scanf_float+0x72>
 8005a22:	bf00      	nop
 8005a24:	08009496 	.word	0x08009496
 8005a28:	080095d7 	.word	0x080095d7

08005a2c <std>:
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	4604      	mov	r4, r0
 8005a32:	e9c0 3300 	strd	r3, r3, [r0]
 8005a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a3a:	6083      	str	r3, [r0, #8]
 8005a3c:	8181      	strh	r1, [r0, #12]
 8005a3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a40:	81c2      	strh	r2, [r0, #14]
 8005a42:	6183      	str	r3, [r0, #24]
 8005a44:	4619      	mov	r1, r3
 8005a46:	2208      	movs	r2, #8
 8005a48:	305c      	adds	r0, #92	@ 0x5c
 8005a4a:	f000 f916 	bl	8005c7a <memset>
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a84 <std+0x58>)
 8005a50:	6224      	str	r4, [r4, #32]
 8005a52:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a54:	4b0c      	ldr	r3, [pc, #48]	@ (8005a88 <std+0x5c>)
 8005a56:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a58:	4b0c      	ldr	r3, [pc, #48]	@ (8005a8c <std+0x60>)
 8005a5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <std+0x64>)
 8005a5e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a60:	4b0c      	ldr	r3, [pc, #48]	@ (8005a94 <std+0x68>)
 8005a62:	429c      	cmp	r4, r3
 8005a64:	d006      	beq.n	8005a74 <std+0x48>
 8005a66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a6a:	4294      	cmp	r4, r2
 8005a6c:	d002      	beq.n	8005a74 <std+0x48>
 8005a6e:	33d0      	adds	r3, #208	@ 0xd0
 8005a70:	429c      	cmp	r4, r3
 8005a72:	d105      	bne.n	8005a80 <std+0x54>
 8005a74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a7c:	f000 b97a 	b.w	8005d74 <__retarget_lock_init_recursive>
 8005a80:	bd10      	pop	{r4, pc}
 8005a82:	bf00      	nop
 8005a84:	08005bf5 	.word	0x08005bf5
 8005a88:	08005c17 	.word	0x08005c17
 8005a8c:	08005c4f 	.word	0x08005c4f
 8005a90:	08005c73 	.word	0x08005c73
 8005a94:	200004a8 	.word	0x200004a8

08005a98 <stdio_exit_handler>:
 8005a98:	4a02      	ldr	r2, [pc, #8]	@ (8005aa4 <stdio_exit_handler+0xc>)
 8005a9a:	4903      	ldr	r1, [pc, #12]	@ (8005aa8 <stdio_exit_handler+0x10>)
 8005a9c:	4803      	ldr	r0, [pc, #12]	@ (8005aac <stdio_exit_handler+0x14>)
 8005a9e:	f000 b869 	b.w	8005b74 <_fwalk_sglue>
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c
 8005aa8:	0800863d 	.word	0x0800863d
 8005aac:	2000001c 	.word	0x2000001c

08005ab0 <cleanup_stdio>:
 8005ab0:	6841      	ldr	r1, [r0, #4]
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae4 <cleanup_stdio+0x34>)
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	4299      	cmp	r1, r3
 8005ab8:	4604      	mov	r4, r0
 8005aba:	d001      	beq.n	8005ac0 <cleanup_stdio+0x10>
 8005abc:	f002 fdbe 	bl	800863c <_fflush_r>
 8005ac0:	68a1      	ldr	r1, [r4, #8]
 8005ac2:	4b09      	ldr	r3, [pc, #36]	@ (8005ae8 <cleanup_stdio+0x38>)
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	d002      	beq.n	8005ace <cleanup_stdio+0x1e>
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f002 fdb7 	bl	800863c <_fflush_r>
 8005ace:	68e1      	ldr	r1, [r4, #12]
 8005ad0:	4b06      	ldr	r3, [pc, #24]	@ (8005aec <cleanup_stdio+0x3c>)
 8005ad2:	4299      	cmp	r1, r3
 8005ad4:	d004      	beq.n	8005ae0 <cleanup_stdio+0x30>
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005adc:	f002 bdae 	b.w	800863c <_fflush_r>
 8005ae0:	bd10      	pop	{r4, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200004a8 	.word	0x200004a8
 8005ae8:	20000510 	.word	0x20000510
 8005aec:	20000578 	.word	0x20000578

08005af0 <global_stdio_init.part.0>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	4b0b      	ldr	r3, [pc, #44]	@ (8005b20 <global_stdio_init.part.0+0x30>)
 8005af4:	4c0b      	ldr	r4, [pc, #44]	@ (8005b24 <global_stdio_init.part.0+0x34>)
 8005af6:	4a0c      	ldr	r2, [pc, #48]	@ (8005b28 <global_stdio_init.part.0+0x38>)
 8005af8:	4620      	mov	r0, r4
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	2104      	movs	r1, #4
 8005afe:	2200      	movs	r2, #0
 8005b00:	f7ff ff94 	bl	8005a2c <std>
 8005b04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b08:	2201      	movs	r2, #1
 8005b0a:	2109      	movs	r1, #9
 8005b0c:	f7ff ff8e 	bl	8005a2c <std>
 8005b10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b14:	2202      	movs	r2, #2
 8005b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b1a:	2112      	movs	r1, #18
 8005b1c:	f7ff bf86 	b.w	8005a2c <std>
 8005b20:	200005e0 	.word	0x200005e0
 8005b24:	200004a8 	.word	0x200004a8
 8005b28:	08005a99 	.word	0x08005a99

08005b2c <__sfp_lock_acquire>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	@ (8005b34 <__sfp_lock_acquire+0x8>)
 8005b2e:	f000 b922 	b.w	8005d76 <__retarget_lock_acquire_recursive>
 8005b32:	bf00      	nop
 8005b34:	200005e9 	.word	0x200005e9

08005b38 <__sfp_lock_release>:
 8005b38:	4801      	ldr	r0, [pc, #4]	@ (8005b40 <__sfp_lock_release+0x8>)
 8005b3a:	f000 b91d 	b.w	8005d78 <__retarget_lock_release_recursive>
 8005b3e:	bf00      	nop
 8005b40:	200005e9 	.word	0x200005e9

08005b44 <__sinit>:
 8005b44:	b510      	push	{r4, lr}
 8005b46:	4604      	mov	r4, r0
 8005b48:	f7ff fff0 	bl	8005b2c <__sfp_lock_acquire>
 8005b4c:	6a23      	ldr	r3, [r4, #32]
 8005b4e:	b11b      	cbz	r3, 8005b58 <__sinit+0x14>
 8005b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b54:	f7ff bff0 	b.w	8005b38 <__sfp_lock_release>
 8005b58:	4b04      	ldr	r3, [pc, #16]	@ (8005b6c <__sinit+0x28>)
 8005b5a:	6223      	str	r3, [r4, #32]
 8005b5c:	4b04      	ldr	r3, [pc, #16]	@ (8005b70 <__sinit+0x2c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1f5      	bne.n	8005b50 <__sinit+0xc>
 8005b64:	f7ff ffc4 	bl	8005af0 <global_stdio_init.part.0>
 8005b68:	e7f2      	b.n	8005b50 <__sinit+0xc>
 8005b6a:	bf00      	nop
 8005b6c:	08005ab1 	.word	0x08005ab1
 8005b70:	200005e0 	.word	0x200005e0

08005b74 <_fwalk_sglue>:
 8005b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b78:	4607      	mov	r7, r0
 8005b7a:	4688      	mov	r8, r1
 8005b7c:	4614      	mov	r4, r2
 8005b7e:	2600      	movs	r6, #0
 8005b80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b84:	f1b9 0901 	subs.w	r9, r9, #1
 8005b88:	d505      	bpl.n	8005b96 <_fwalk_sglue+0x22>
 8005b8a:	6824      	ldr	r4, [r4, #0]
 8005b8c:	2c00      	cmp	r4, #0
 8005b8e:	d1f7      	bne.n	8005b80 <_fwalk_sglue+0xc>
 8005b90:	4630      	mov	r0, r6
 8005b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b96:	89ab      	ldrh	r3, [r5, #12]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d907      	bls.n	8005bac <_fwalk_sglue+0x38>
 8005b9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	d003      	beq.n	8005bac <_fwalk_sglue+0x38>
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	47c0      	blx	r8
 8005baa:	4306      	orrs	r6, r0
 8005bac:	3568      	adds	r5, #104	@ 0x68
 8005bae:	e7e9      	b.n	8005b84 <_fwalk_sglue+0x10>

08005bb0 <siprintf>:
 8005bb0:	b40e      	push	{r1, r2, r3}
 8005bb2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	2400      	movs	r4, #0
 8005bba:	b09d      	sub	sp, #116	@ 0x74
 8005bbc:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005bbe:	9002      	str	r0, [sp, #8]
 8005bc0:	9006      	str	r0, [sp, #24]
 8005bc2:	9107      	str	r1, [sp, #28]
 8005bc4:	9104      	str	r1, [sp, #16]
 8005bc6:	4809      	ldr	r0, [pc, #36]	@ (8005bec <siprintf+0x3c>)
 8005bc8:	4909      	ldr	r1, [pc, #36]	@ (8005bf0 <siprintf+0x40>)
 8005bca:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bce:	9105      	str	r1, [sp, #20]
 8005bd0:	6800      	ldr	r0, [r0, #0]
 8005bd2:	a902      	add	r1, sp, #8
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005bd8:	f002 fbb4 	bl	8008344 <_svfiprintf_r>
 8005bdc:	9b02      	ldr	r3, [sp, #8]
 8005bde:	701c      	strb	r4, [r3, #0]
 8005be0:	b01d      	add	sp, #116	@ 0x74
 8005be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be6:	b003      	add	sp, #12
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20000018 	.word	0x20000018
 8005bf0:	ffff0208 	.word	0xffff0208

08005bf4 <__sread>:
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bfc:	f000 f86c 	bl	8005cd8 <_read_r>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	bfab      	itete	ge
 8005c04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c06:	89a3      	ldrhlt	r3, [r4, #12]
 8005c08:	181b      	addge	r3, r3, r0
 8005c0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c0e:	bfac      	ite	ge
 8005c10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c12:	81a3      	strhlt	r3, [r4, #12]
 8005c14:	bd10      	pop	{r4, pc}

08005c16 <__swrite>:
 8005c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1a:	461f      	mov	r7, r3
 8005c1c:	898b      	ldrh	r3, [r1, #12]
 8005c1e:	4605      	mov	r5, r0
 8005c20:	05db      	lsls	r3, r3, #23
 8005c22:	460c      	mov	r4, r1
 8005c24:	4616      	mov	r6, r2
 8005c26:	d505      	bpl.n	8005c34 <__swrite+0x1e>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c30:	f000 f840 	bl	8005cb4 <_lseek_r>
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	4632      	mov	r2, r6
 8005c38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c3c:	81a3      	strh	r3, [r4, #12]
 8005c3e:	4628      	mov	r0, r5
 8005c40:	463b      	mov	r3, r7
 8005c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4a:	f000 b857 	b.w	8005cfc <_write_r>

08005c4e <__sseek>:
 8005c4e:	b510      	push	{r4, lr}
 8005c50:	460c      	mov	r4, r1
 8005c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c56:	f000 f82d 	bl	8005cb4 <_lseek_r>
 8005c5a:	1c43      	adds	r3, r0, #1
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	bf15      	itete	ne
 8005c60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c6a:	81a3      	strheq	r3, [r4, #12]
 8005c6c:	bf18      	it	ne
 8005c6e:	81a3      	strhne	r3, [r4, #12]
 8005c70:	bd10      	pop	{r4, pc}

08005c72 <__sclose>:
 8005c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c76:	f000 b80d 	b.w	8005c94 <_close_r>

08005c7a <memset>:
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4402      	add	r2, r0
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d100      	bne.n	8005c84 <memset+0xa>
 8005c82:	4770      	bx	lr
 8005c84:	f803 1b01 	strb.w	r1, [r3], #1
 8005c88:	e7f9      	b.n	8005c7e <memset+0x4>
	...

08005c8c <_localeconv_r>:
 8005c8c:	4800      	ldr	r0, [pc, #0]	@ (8005c90 <_localeconv_r+0x4>)
 8005c8e:	4770      	bx	lr
 8005c90:	20000158 	.word	0x20000158

08005c94 <_close_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	2300      	movs	r3, #0
 8005c98:	4d05      	ldr	r5, [pc, #20]	@ (8005cb0 <_close_r+0x1c>)
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	602b      	str	r3, [r5, #0]
 8005ca0:	f7fc fae3 	bl	800226a <_close>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_close_r+0x1a>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_close_r+0x1a>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	200005e4 	.word	0x200005e4

08005cb4 <_lseek_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	4608      	mov	r0, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	4d05      	ldr	r5, [pc, #20]	@ (8005cd4 <_lseek_r+0x20>)
 8005cc0:	602a      	str	r2, [r5, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f7fc faf5 	bl	80022b2 <_lseek>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_lseek_r+0x1e>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_lseek_r+0x1e>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	200005e4 	.word	0x200005e4

08005cd8 <_read_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4604      	mov	r4, r0
 8005cdc:	4608      	mov	r0, r1
 8005cde:	4611      	mov	r1, r2
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	4d05      	ldr	r5, [pc, #20]	@ (8005cf8 <_read_r+0x20>)
 8005ce4:	602a      	str	r2, [r5, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f7fc fa86 	bl	80021f8 <_read>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_read_r+0x1e>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_read_r+0x1e>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	200005e4 	.word	0x200005e4

08005cfc <_write_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4604      	mov	r4, r0
 8005d00:	4608      	mov	r0, r1
 8005d02:	4611      	mov	r1, r2
 8005d04:	2200      	movs	r2, #0
 8005d06:	4d05      	ldr	r5, [pc, #20]	@ (8005d1c <_write_r+0x20>)
 8005d08:	602a      	str	r2, [r5, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f7fc fa91 	bl	8002232 <_write>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_write_r+0x1e>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_write_r+0x1e>
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	200005e4 	.word	0x200005e4

08005d20 <__errno>:
 8005d20:	4b01      	ldr	r3, [pc, #4]	@ (8005d28 <__errno+0x8>)
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	20000018 	.word	0x20000018

08005d2c <__libc_init_array>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	2600      	movs	r6, #0
 8005d30:	4d0c      	ldr	r5, [pc, #48]	@ (8005d64 <__libc_init_array+0x38>)
 8005d32:	4c0d      	ldr	r4, [pc, #52]	@ (8005d68 <__libc_init_array+0x3c>)
 8005d34:	1b64      	subs	r4, r4, r5
 8005d36:	10a4      	asrs	r4, r4, #2
 8005d38:	42a6      	cmp	r6, r4
 8005d3a:	d109      	bne.n	8005d50 <__libc_init_array+0x24>
 8005d3c:	f003 fb6a 	bl	8009414 <_init>
 8005d40:	2600      	movs	r6, #0
 8005d42:	4d0a      	ldr	r5, [pc, #40]	@ (8005d6c <__libc_init_array+0x40>)
 8005d44:	4c0a      	ldr	r4, [pc, #40]	@ (8005d70 <__libc_init_array+0x44>)
 8005d46:	1b64      	subs	r4, r4, r5
 8005d48:	10a4      	asrs	r4, r4, #2
 8005d4a:	42a6      	cmp	r6, r4
 8005d4c:	d105      	bne.n	8005d5a <__libc_init_array+0x2e>
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d54:	4798      	blx	r3
 8005d56:	3601      	adds	r6, #1
 8005d58:	e7ee      	b.n	8005d38 <__libc_init_array+0xc>
 8005d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d5e:	4798      	blx	r3
 8005d60:	3601      	adds	r6, #1
 8005d62:	e7f2      	b.n	8005d4a <__libc_init_array+0x1e>
 8005d64:	08009894 	.word	0x08009894
 8005d68:	08009894 	.word	0x08009894
 8005d6c:	08009894 	.word	0x08009894
 8005d70:	08009898 	.word	0x08009898

08005d74 <__retarget_lock_init_recursive>:
 8005d74:	4770      	bx	lr

08005d76 <__retarget_lock_acquire_recursive>:
 8005d76:	4770      	bx	lr

08005d78 <__retarget_lock_release_recursive>:
 8005d78:	4770      	bx	lr

08005d7a <memchr>:
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	b2c9      	uxtb	r1, r1
 8005d80:	4402      	add	r2, r0
 8005d82:	4293      	cmp	r3, r2
 8005d84:	4618      	mov	r0, r3
 8005d86:	d101      	bne.n	8005d8c <memchr+0x12>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	e003      	b.n	8005d94 <memchr+0x1a>
 8005d8c:	7804      	ldrb	r4, [r0, #0]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	428c      	cmp	r4, r1
 8005d92:	d1f6      	bne.n	8005d82 <memchr+0x8>
 8005d94:	bd10      	pop	{r4, pc}
	...

08005d98 <nanf>:
 8005d98:	4800      	ldr	r0, [pc, #0]	@ (8005d9c <nanf+0x4>)
 8005d9a:	4770      	bx	lr
 8005d9c:	7fc00000 	.word	0x7fc00000

08005da0 <quorem>:
 8005da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	6903      	ldr	r3, [r0, #16]
 8005da6:	690c      	ldr	r4, [r1, #16]
 8005da8:	4607      	mov	r7, r0
 8005daa:	42a3      	cmp	r3, r4
 8005dac:	db7e      	blt.n	8005eac <quorem+0x10c>
 8005dae:	3c01      	subs	r4, #1
 8005db0:	00a3      	lsls	r3, r4, #2
 8005db2:	f100 0514 	add.w	r5, r0, #20
 8005db6:	f101 0814 	add.w	r8, r1, #20
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dd6:	d32e      	bcc.n	8005e36 <quorem+0x96>
 8005dd8:	f04f 0a00 	mov.w	sl, #0
 8005ddc:	46c4      	mov	ip, r8
 8005dde:	46ae      	mov	lr, r5
 8005de0:	46d3      	mov	fp, sl
 8005de2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005de6:	b298      	uxth	r0, r3
 8005de8:	fb06 a000 	mla	r0, r6, r0, sl
 8005dec:	0c1b      	lsrs	r3, r3, #16
 8005dee:	0c02      	lsrs	r2, r0, #16
 8005df0:	fb06 2303 	mla	r3, r6, r3, r2
 8005df4:	f8de 2000 	ldr.w	r2, [lr]
 8005df8:	b280      	uxth	r0, r0
 8005dfa:	b292      	uxth	r2, r2
 8005dfc:	1a12      	subs	r2, r2, r0
 8005dfe:	445a      	add	r2, fp
 8005e00:	f8de 0000 	ldr.w	r0, [lr]
 8005e04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005e0e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005e12:	b292      	uxth	r2, r2
 8005e14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e18:	45e1      	cmp	r9, ip
 8005e1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e1e:	f84e 2b04 	str.w	r2, [lr], #4
 8005e22:	d2de      	bcs.n	8005de2 <quorem+0x42>
 8005e24:	9b00      	ldr	r3, [sp, #0]
 8005e26:	58eb      	ldr	r3, [r5, r3]
 8005e28:	b92b      	cbnz	r3, 8005e36 <quorem+0x96>
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	3b04      	subs	r3, #4
 8005e2e:	429d      	cmp	r5, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	d32f      	bcc.n	8005e94 <quorem+0xf4>
 8005e34:	613c      	str	r4, [r7, #16]
 8005e36:	4638      	mov	r0, r7
 8005e38:	f001 f9c8 	bl	80071cc <__mcmp>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	db25      	blt.n	8005e8c <quorem+0xec>
 8005e40:	4629      	mov	r1, r5
 8005e42:	2000      	movs	r0, #0
 8005e44:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e48:	f8d1 c000 	ldr.w	ip, [r1]
 8005e4c:	fa1f fe82 	uxth.w	lr, r2
 8005e50:	fa1f f38c 	uxth.w	r3, ip
 8005e54:	eba3 030e 	sub.w	r3, r3, lr
 8005e58:	4403      	add	r3, r0
 8005e5a:	0c12      	lsrs	r2, r2, #16
 8005e5c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e60:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e6a:	45c1      	cmp	r9, r8
 8005e6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e70:	f841 3b04 	str.w	r3, [r1], #4
 8005e74:	d2e6      	bcs.n	8005e44 <quorem+0xa4>
 8005e76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e7e:	b922      	cbnz	r2, 8005e8a <quorem+0xea>
 8005e80:	3b04      	subs	r3, #4
 8005e82:	429d      	cmp	r5, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	d30b      	bcc.n	8005ea0 <quorem+0x100>
 8005e88:	613c      	str	r4, [r7, #16]
 8005e8a:	3601      	adds	r6, #1
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	b003      	add	sp, #12
 8005e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	3b04      	subs	r3, #4
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	d1cb      	bne.n	8005e34 <quorem+0x94>
 8005e9c:	3c01      	subs	r4, #1
 8005e9e:	e7c6      	b.n	8005e2e <quorem+0x8e>
 8005ea0:	6812      	ldr	r2, [r2, #0]
 8005ea2:	3b04      	subs	r3, #4
 8005ea4:	2a00      	cmp	r2, #0
 8005ea6:	d1ef      	bne.n	8005e88 <quorem+0xe8>
 8005ea8:	3c01      	subs	r4, #1
 8005eaa:	e7ea      	b.n	8005e82 <quorem+0xe2>
 8005eac:	2000      	movs	r0, #0
 8005eae:	e7ee      	b.n	8005e8e <quorem+0xee>

08005eb0 <_dtoa_r>:
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	461d      	mov	r5, r3
 8005eb8:	69c7      	ldr	r7, [r0, #28]
 8005eba:	b097      	sub	sp, #92	@ 0x5c
 8005ebc:	4681      	mov	r9, r0
 8005ebe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005ec2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005ec4:	b97f      	cbnz	r7, 8005ee6 <_dtoa_r+0x36>
 8005ec6:	2010      	movs	r0, #16
 8005ec8:	f000 fe0e 	bl	8006ae8 <malloc>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	f8c9 001c 	str.w	r0, [r9, #28]
 8005ed2:	b920      	cbnz	r0, 8005ede <_dtoa_r+0x2e>
 8005ed4:	21ef      	movs	r1, #239	@ 0xef
 8005ed6:	4bac      	ldr	r3, [pc, #688]	@ (8006188 <_dtoa_r+0x2d8>)
 8005ed8:	48ac      	ldr	r0, [pc, #688]	@ (800618c <_dtoa_r+0x2dc>)
 8005eda:	f002 fc27 	bl	800872c <__assert_func>
 8005ede:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ee2:	6007      	str	r7, [r0, #0]
 8005ee4:	60c7      	str	r7, [r0, #12]
 8005ee6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005eea:	6819      	ldr	r1, [r3, #0]
 8005eec:	b159      	cbz	r1, 8005f06 <_dtoa_r+0x56>
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	4093      	lsls	r3, r2
 8005ef4:	604a      	str	r2, [r1, #4]
 8005ef6:	608b      	str	r3, [r1, #8]
 8005ef8:	4648      	mov	r0, r9
 8005efa:	f000 feeb 	bl	8006cd4 <_Bfree>
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	1e2b      	subs	r3, r5, #0
 8005f08:	bfaf      	iteee	ge
 8005f0a:	2300      	movge	r3, #0
 8005f0c:	2201      	movlt	r2, #1
 8005f0e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f12:	9307      	strlt	r3, [sp, #28]
 8005f14:	bfa8      	it	ge
 8005f16:	6033      	strge	r3, [r6, #0]
 8005f18:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005f1c:	4b9c      	ldr	r3, [pc, #624]	@ (8006190 <_dtoa_r+0x2e0>)
 8005f1e:	bfb8      	it	lt
 8005f20:	6032      	strlt	r2, [r6, #0]
 8005f22:	ea33 0308 	bics.w	r3, r3, r8
 8005f26:	d112      	bne.n	8005f4e <_dtoa_r+0x9e>
 8005f28:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005f34:	4323      	orrs	r3, r4
 8005f36:	f000 855e 	beq.w	80069f6 <_dtoa_r+0xb46>
 8005f3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005f3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006194 <_dtoa_r+0x2e4>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8560 	beq.w	8006a06 <_dtoa_r+0xb56>
 8005f46:	f10a 0303 	add.w	r3, sl, #3
 8005f4a:	f000 bd5a 	b.w	8006a02 <_dtoa_r+0xb52>
 8005f4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f52:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f7fa fd23 	bl	80009a8 <__aeabi_dcmpeq>
 8005f62:	4607      	mov	r7, r0
 8005f64:	b158      	cbz	r0, 8005f7e <_dtoa_r+0xce>
 8005f66:	2301      	movs	r3, #1
 8005f68:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005f6e:	b113      	cbz	r3, 8005f76 <_dtoa_r+0xc6>
 8005f70:	4b89      	ldr	r3, [pc, #548]	@ (8006198 <_dtoa_r+0x2e8>)
 8005f72:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800619c <_dtoa_r+0x2ec>
 8005f7a:	f000 bd44 	b.w	8006a06 <_dtoa_r+0xb56>
 8005f7e:	ab14      	add	r3, sp, #80	@ 0x50
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	ab15      	add	r3, sp, #84	@ 0x54
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	4648      	mov	r0, r9
 8005f88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005f8c:	f001 fa36 	bl	80073fc <__d2b>
 8005f90:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005f94:	9003      	str	r0, [sp, #12]
 8005f96:	2e00      	cmp	r6, #0
 8005f98:	d078      	beq.n	800608c <_dtoa_r+0x1dc>
 8005f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fa0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fa8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005fac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005fb0:	9712      	str	r7, [sp, #72]	@ 0x48
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	4b7a      	ldr	r3, [pc, #488]	@ (80061a0 <_dtoa_r+0x2f0>)
 8005fb8:	f7fa f8d6 	bl	8000168 <__aeabi_dsub>
 8005fbc:	a36c      	add	r3, pc, #432	@ (adr r3, 8006170 <_dtoa_r+0x2c0>)
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	f7fa fa89 	bl	80004d8 <__aeabi_dmul>
 8005fc6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006178 <_dtoa_r+0x2c8>)
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	f7fa f8ce 	bl	800016c <__adddf3>
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	460d      	mov	r5, r1
 8005fd6:	f7fa fa15 	bl	8000404 <__aeabi_i2d>
 8005fda:	a369      	add	r3, pc, #420	@ (adr r3, 8006180 <_dtoa_r+0x2d0>)
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f7fa fa7a 	bl	80004d8 <__aeabi_dmul>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	f7fa f8be 	bl	800016c <__adddf3>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	f7fa fd20 	bl	8000a38 <__aeabi_d2iz>
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4607      	mov	r7, r0
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	f7fa fcdb 	bl	80009bc <__aeabi_dcmplt>
 8006006:	b140      	cbz	r0, 800601a <_dtoa_r+0x16a>
 8006008:	4638      	mov	r0, r7
 800600a:	f7fa f9fb 	bl	8000404 <__aeabi_i2d>
 800600e:	4622      	mov	r2, r4
 8006010:	462b      	mov	r3, r5
 8006012:	f7fa fcc9 	bl	80009a8 <__aeabi_dcmpeq>
 8006016:	b900      	cbnz	r0, 800601a <_dtoa_r+0x16a>
 8006018:	3f01      	subs	r7, #1
 800601a:	2f16      	cmp	r7, #22
 800601c:	d854      	bhi.n	80060c8 <_dtoa_r+0x218>
 800601e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006022:	4b60      	ldr	r3, [pc, #384]	@ (80061a4 <_dtoa_r+0x2f4>)
 8006024:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602c:	f7fa fcc6 	bl	80009bc <__aeabi_dcmplt>
 8006030:	2800      	cmp	r0, #0
 8006032:	d04b      	beq.n	80060cc <_dtoa_r+0x21c>
 8006034:	2300      	movs	r3, #0
 8006036:	3f01      	subs	r7, #1
 8006038:	930f      	str	r3, [sp, #60]	@ 0x3c
 800603a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800603c:	1b9b      	subs	r3, r3, r6
 800603e:	1e5a      	subs	r2, r3, #1
 8006040:	bf49      	itett	mi
 8006042:	f1c3 0301 	rsbmi	r3, r3, #1
 8006046:	2300      	movpl	r3, #0
 8006048:	9304      	strmi	r3, [sp, #16]
 800604a:	2300      	movmi	r3, #0
 800604c:	9209      	str	r2, [sp, #36]	@ 0x24
 800604e:	bf54      	ite	pl
 8006050:	9304      	strpl	r3, [sp, #16]
 8006052:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006054:	2f00      	cmp	r7, #0
 8006056:	db3b      	blt.n	80060d0 <_dtoa_r+0x220>
 8006058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800605a:	970e      	str	r7, [sp, #56]	@ 0x38
 800605c:	443b      	add	r3, r7
 800605e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006060:	2300      	movs	r3, #0
 8006062:	930a      	str	r3, [sp, #40]	@ 0x28
 8006064:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006066:	2b09      	cmp	r3, #9
 8006068:	d865      	bhi.n	8006136 <_dtoa_r+0x286>
 800606a:	2b05      	cmp	r3, #5
 800606c:	bfc4      	itt	gt
 800606e:	3b04      	subgt	r3, #4
 8006070:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006072:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006074:	bfc8      	it	gt
 8006076:	2400      	movgt	r4, #0
 8006078:	f1a3 0302 	sub.w	r3, r3, #2
 800607c:	bfd8      	it	le
 800607e:	2401      	movle	r4, #1
 8006080:	2b03      	cmp	r3, #3
 8006082:	d864      	bhi.n	800614e <_dtoa_r+0x29e>
 8006084:	e8df f003 	tbb	[pc, r3]
 8006088:	2c385553 	.word	0x2c385553
 800608c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006090:	441e      	add	r6, r3
 8006092:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006096:	2b20      	cmp	r3, #32
 8006098:	bfc1      	itttt	gt
 800609a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800609e:	fa08 f803 	lslgt.w	r8, r8, r3
 80060a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80060a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80060aa:	bfd6      	itet	le
 80060ac:	f1c3 0320 	rsble	r3, r3, #32
 80060b0:	ea48 0003 	orrgt.w	r0, r8, r3
 80060b4:	fa04 f003 	lslle.w	r0, r4, r3
 80060b8:	f7fa f994 	bl	80003e4 <__aeabi_ui2d>
 80060bc:	2201      	movs	r2, #1
 80060be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80060c2:	3e01      	subs	r6, #1
 80060c4:	9212      	str	r2, [sp, #72]	@ 0x48
 80060c6:	e774      	b.n	8005fb2 <_dtoa_r+0x102>
 80060c8:	2301      	movs	r3, #1
 80060ca:	e7b5      	b.n	8006038 <_dtoa_r+0x188>
 80060cc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80060ce:	e7b4      	b.n	800603a <_dtoa_r+0x18a>
 80060d0:	9b04      	ldr	r3, [sp, #16]
 80060d2:	1bdb      	subs	r3, r3, r7
 80060d4:	9304      	str	r3, [sp, #16]
 80060d6:	427b      	negs	r3, r7
 80060d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80060da:	2300      	movs	r3, #0
 80060dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80060de:	e7c1      	b.n	8006064 <_dtoa_r+0x1b4>
 80060e0:	2301      	movs	r3, #1
 80060e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060e6:	eb07 0b03 	add.w	fp, r7, r3
 80060ea:	f10b 0301 	add.w	r3, fp, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	9308      	str	r3, [sp, #32]
 80060f2:	bfb8      	it	lt
 80060f4:	2301      	movlt	r3, #1
 80060f6:	e006      	b.n	8006106 <_dtoa_r+0x256>
 80060f8:	2301      	movs	r3, #1
 80060fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060fe:	2b00      	cmp	r3, #0
 8006100:	dd28      	ble.n	8006154 <_dtoa_r+0x2a4>
 8006102:	469b      	mov	fp, r3
 8006104:	9308      	str	r3, [sp, #32]
 8006106:	2100      	movs	r1, #0
 8006108:	2204      	movs	r2, #4
 800610a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800610e:	f102 0514 	add.w	r5, r2, #20
 8006112:	429d      	cmp	r5, r3
 8006114:	d926      	bls.n	8006164 <_dtoa_r+0x2b4>
 8006116:	6041      	str	r1, [r0, #4]
 8006118:	4648      	mov	r0, r9
 800611a:	f000 fd9b 	bl	8006c54 <_Balloc>
 800611e:	4682      	mov	sl, r0
 8006120:	2800      	cmp	r0, #0
 8006122:	d143      	bne.n	80061ac <_dtoa_r+0x2fc>
 8006124:	4602      	mov	r2, r0
 8006126:	f240 11af 	movw	r1, #431	@ 0x1af
 800612a:	4b1f      	ldr	r3, [pc, #124]	@ (80061a8 <_dtoa_r+0x2f8>)
 800612c:	e6d4      	b.n	8005ed8 <_dtoa_r+0x28>
 800612e:	2300      	movs	r3, #0
 8006130:	e7e3      	b.n	80060fa <_dtoa_r+0x24a>
 8006132:	2300      	movs	r3, #0
 8006134:	e7d5      	b.n	80060e2 <_dtoa_r+0x232>
 8006136:	2401      	movs	r4, #1
 8006138:	2300      	movs	r3, #0
 800613a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800613c:	9320      	str	r3, [sp, #128]	@ 0x80
 800613e:	f04f 3bff 	mov.w	fp, #4294967295
 8006142:	2200      	movs	r2, #0
 8006144:	2312      	movs	r3, #18
 8006146:	f8cd b020 	str.w	fp, [sp, #32]
 800614a:	9221      	str	r2, [sp, #132]	@ 0x84
 800614c:	e7db      	b.n	8006106 <_dtoa_r+0x256>
 800614e:	2301      	movs	r3, #1
 8006150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006152:	e7f4      	b.n	800613e <_dtoa_r+0x28e>
 8006154:	f04f 0b01 	mov.w	fp, #1
 8006158:	465b      	mov	r3, fp
 800615a:	f8cd b020 	str.w	fp, [sp, #32]
 800615e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006162:	e7d0      	b.n	8006106 <_dtoa_r+0x256>
 8006164:	3101      	adds	r1, #1
 8006166:	0052      	lsls	r2, r2, #1
 8006168:	e7d1      	b.n	800610e <_dtoa_r+0x25e>
 800616a:	bf00      	nop
 800616c:	f3af 8000 	nop.w
 8006170:	636f4361 	.word	0x636f4361
 8006174:	3fd287a7 	.word	0x3fd287a7
 8006178:	8b60c8b3 	.word	0x8b60c8b3
 800617c:	3fc68a28 	.word	0x3fc68a28
 8006180:	509f79fb 	.word	0x509f79fb
 8006184:	3fd34413 	.word	0x3fd34413
 8006188:	080094a8 	.word	0x080094a8
 800618c:	080094bf 	.word	0x080094bf
 8006190:	7ff00000 	.word	0x7ff00000
 8006194:	080094a4 	.word	0x080094a4
 8006198:	08009473 	.word	0x08009473
 800619c:	08009472 	.word	0x08009472
 80061a0:	3ff80000 	.word	0x3ff80000
 80061a4:	08009670 	.word	0x08009670
 80061a8:	08009517 	.word	0x08009517
 80061ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061b0:	6018      	str	r0, [r3, #0]
 80061b2:	9b08      	ldr	r3, [sp, #32]
 80061b4:	2b0e      	cmp	r3, #14
 80061b6:	f200 80a1 	bhi.w	80062fc <_dtoa_r+0x44c>
 80061ba:	2c00      	cmp	r4, #0
 80061bc:	f000 809e 	beq.w	80062fc <_dtoa_r+0x44c>
 80061c0:	2f00      	cmp	r7, #0
 80061c2:	dd33      	ble.n	800622c <_dtoa_r+0x37c>
 80061c4:	4b9c      	ldr	r3, [pc, #624]	@ (8006438 <_dtoa_r+0x588>)
 80061c6:	f007 020f 	and.w	r2, r7, #15
 80061ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ce:	05f8      	lsls	r0, r7, #23
 80061d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80061d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80061dc:	d516      	bpl.n	800620c <_dtoa_r+0x35c>
 80061de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061e2:	4b96      	ldr	r3, [pc, #600]	@ (800643c <_dtoa_r+0x58c>)
 80061e4:	2603      	movs	r6, #3
 80061e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061ea:	f7fa fa9f 	bl	800072c <__aeabi_ddiv>
 80061ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061f2:	f004 040f 	and.w	r4, r4, #15
 80061f6:	4d91      	ldr	r5, [pc, #580]	@ (800643c <_dtoa_r+0x58c>)
 80061f8:	b954      	cbnz	r4, 8006210 <_dtoa_r+0x360>
 80061fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006202:	f7fa fa93 	bl	800072c <__aeabi_ddiv>
 8006206:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800620a:	e028      	b.n	800625e <_dtoa_r+0x3ae>
 800620c:	2602      	movs	r6, #2
 800620e:	e7f2      	b.n	80061f6 <_dtoa_r+0x346>
 8006210:	07e1      	lsls	r1, r4, #31
 8006212:	d508      	bpl.n	8006226 <_dtoa_r+0x376>
 8006214:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006218:	e9d5 2300 	ldrd	r2, r3, [r5]
 800621c:	f7fa f95c 	bl	80004d8 <__aeabi_dmul>
 8006220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006224:	3601      	adds	r6, #1
 8006226:	1064      	asrs	r4, r4, #1
 8006228:	3508      	adds	r5, #8
 800622a:	e7e5      	b.n	80061f8 <_dtoa_r+0x348>
 800622c:	f000 80af 	beq.w	800638e <_dtoa_r+0x4de>
 8006230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006234:	427c      	negs	r4, r7
 8006236:	4b80      	ldr	r3, [pc, #512]	@ (8006438 <_dtoa_r+0x588>)
 8006238:	f004 020f 	and.w	r2, r4, #15
 800623c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f7fa f948 	bl	80004d8 <__aeabi_dmul>
 8006248:	2602      	movs	r6, #2
 800624a:	2300      	movs	r3, #0
 800624c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006250:	4d7a      	ldr	r5, [pc, #488]	@ (800643c <_dtoa_r+0x58c>)
 8006252:	1124      	asrs	r4, r4, #4
 8006254:	2c00      	cmp	r4, #0
 8006256:	f040 808f 	bne.w	8006378 <_dtoa_r+0x4c8>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1d3      	bne.n	8006206 <_dtoa_r+0x356>
 800625e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006262:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8094 	beq.w	8006392 <_dtoa_r+0x4e2>
 800626a:	2200      	movs	r2, #0
 800626c:	4620      	mov	r0, r4
 800626e:	4629      	mov	r1, r5
 8006270:	4b73      	ldr	r3, [pc, #460]	@ (8006440 <_dtoa_r+0x590>)
 8006272:	f7fa fba3 	bl	80009bc <__aeabi_dcmplt>
 8006276:	2800      	cmp	r0, #0
 8006278:	f000 808b 	beq.w	8006392 <_dtoa_r+0x4e2>
 800627c:	9b08      	ldr	r3, [sp, #32]
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 8087 	beq.w	8006392 <_dtoa_r+0x4e2>
 8006284:	f1bb 0f00 	cmp.w	fp, #0
 8006288:	dd34      	ble.n	80062f4 <_dtoa_r+0x444>
 800628a:	4620      	mov	r0, r4
 800628c:	2200      	movs	r2, #0
 800628e:	4629      	mov	r1, r5
 8006290:	4b6c      	ldr	r3, [pc, #432]	@ (8006444 <_dtoa_r+0x594>)
 8006292:	f7fa f921 	bl	80004d8 <__aeabi_dmul>
 8006296:	465c      	mov	r4, fp
 8006298:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800629c:	f107 38ff 	add.w	r8, r7, #4294967295
 80062a0:	3601      	adds	r6, #1
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7fa f8ae 	bl	8000404 <__aeabi_i2d>
 80062a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062ac:	f7fa f914 	bl	80004d8 <__aeabi_dmul>
 80062b0:	2200      	movs	r2, #0
 80062b2:	4b65      	ldr	r3, [pc, #404]	@ (8006448 <_dtoa_r+0x598>)
 80062b4:	f7f9 ff5a 	bl	800016c <__adddf3>
 80062b8:	4605      	mov	r5, r0
 80062ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80062be:	2c00      	cmp	r4, #0
 80062c0:	d16a      	bne.n	8006398 <_dtoa_r+0x4e8>
 80062c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062c6:	2200      	movs	r2, #0
 80062c8:	4b60      	ldr	r3, [pc, #384]	@ (800644c <_dtoa_r+0x59c>)
 80062ca:	f7f9 ff4d 	bl	8000168 <__aeabi_dsub>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80062d6:	462a      	mov	r2, r5
 80062d8:	4633      	mov	r3, r6
 80062da:	f7fa fb8d 	bl	80009f8 <__aeabi_dcmpgt>
 80062de:	2800      	cmp	r0, #0
 80062e0:	f040 8298 	bne.w	8006814 <_dtoa_r+0x964>
 80062e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062e8:	462a      	mov	r2, r5
 80062ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80062ee:	f7fa fb65 	bl	80009bc <__aeabi_dcmplt>
 80062f2:	bb38      	cbnz	r0, 8006344 <_dtoa_r+0x494>
 80062f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80062f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80062fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f2c0 8157 	blt.w	80065b2 <_dtoa_r+0x702>
 8006304:	2f0e      	cmp	r7, #14
 8006306:	f300 8154 	bgt.w	80065b2 <_dtoa_r+0x702>
 800630a:	4b4b      	ldr	r3, [pc, #300]	@ (8006438 <_dtoa_r+0x588>)
 800630c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006310:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006314:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006318:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800631a:	2b00      	cmp	r3, #0
 800631c:	f280 80e5 	bge.w	80064ea <_dtoa_r+0x63a>
 8006320:	9b08      	ldr	r3, [sp, #32]
 8006322:	2b00      	cmp	r3, #0
 8006324:	f300 80e1 	bgt.w	80064ea <_dtoa_r+0x63a>
 8006328:	d10c      	bne.n	8006344 <_dtoa_r+0x494>
 800632a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800632e:	2200      	movs	r2, #0
 8006330:	4b46      	ldr	r3, [pc, #280]	@ (800644c <_dtoa_r+0x59c>)
 8006332:	f7fa f8d1 	bl	80004d8 <__aeabi_dmul>
 8006336:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800633a:	f7fa fb53 	bl	80009e4 <__aeabi_dcmpge>
 800633e:	2800      	cmp	r0, #0
 8006340:	f000 8266 	beq.w	8006810 <_dtoa_r+0x960>
 8006344:	2400      	movs	r4, #0
 8006346:	4625      	mov	r5, r4
 8006348:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800634a:	4656      	mov	r6, sl
 800634c:	ea6f 0803 	mvn.w	r8, r3
 8006350:	2700      	movs	r7, #0
 8006352:	4621      	mov	r1, r4
 8006354:	4648      	mov	r0, r9
 8006356:	f000 fcbd 	bl	8006cd4 <_Bfree>
 800635a:	2d00      	cmp	r5, #0
 800635c:	f000 80bd 	beq.w	80064da <_dtoa_r+0x62a>
 8006360:	b12f      	cbz	r7, 800636e <_dtoa_r+0x4be>
 8006362:	42af      	cmp	r7, r5
 8006364:	d003      	beq.n	800636e <_dtoa_r+0x4be>
 8006366:	4639      	mov	r1, r7
 8006368:	4648      	mov	r0, r9
 800636a:	f000 fcb3 	bl	8006cd4 <_Bfree>
 800636e:	4629      	mov	r1, r5
 8006370:	4648      	mov	r0, r9
 8006372:	f000 fcaf 	bl	8006cd4 <_Bfree>
 8006376:	e0b0      	b.n	80064da <_dtoa_r+0x62a>
 8006378:	07e2      	lsls	r2, r4, #31
 800637a:	d505      	bpl.n	8006388 <_dtoa_r+0x4d8>
 800637c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006380:	f7fa f8aa 	bl	80004d8 <__aeabi_dmul>
 8006384:	2301      	movs	r3, #1
 8006386:	3601      	adds	r6, #1
 8006388:	1064      	asrs	r4, r4, #1
 800638a:	3508      	adds	r5, #8
 800638c:	e762      	b.n	8006254 <_dtoa_r+0x3a4>
 800638e:	2602      	movs	r6, #2
 8006390:	e765      	b.n	800625e <_dtoa_r+0x3ae>
 8006392:	46b8      	mov	r8, r7
 8006394:	9c08      	ldr	r4, [sp, #32]
 8006396:	e784      	b.n	80062a2 <_dtoa_r+0x3f2>
 8006398:	4b27      	ldr	r3, [pc, #156]	@ (8006438 <_dtoa_r+0x588>)
 800639a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800639c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063a4:	4454      	add	r4, sl
 80063a6:	2900      	cmp	r1, #0
 80063a8:	d054      	beq.n	8006454 <_dtoa_r+0x5a4>
 80063aa:	2000      	movs	r0, #0
 80063ac:	4928      	ldr	r1, [pc, #160]	@ (8006450 <_dtoa_r+0x5a0>)
 80063ae:	f7fa f9bd 	bl	800072c <__aeabi_ddiv>
 80063b2:	4633      	mov	r3, r6
 80063b4:	462a      	mov	r2, r5
 80063b6:	f7f9 fed7 	bl	8000168 <__aeabi_dsub>
 80063ba:	4656      	mov	r6, sl
 80063bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063c4:	f7fa fb38 	bl	8000a38 <__aeabi_d2iz>
 80063c8:	4605      	mov	r5, r0
 80063ca:	f7fa f81b 	bl	8000404 <__aeabi_i2d>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063d6:	f7f9 fec7 	bl	8000168 <__aeabi_dsub>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	3530      	adds	r5, #48	@ 0x30
 80063e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80063e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063e8:	f806 5b01 	strb.w	r5, [r6], #1
 80063ec:	f7fa fae6 	bl	80009bc <__aeabi_dcmplt>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d172      	bne.n	80064da <_dtoa_r+0x62a>
 80063f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063f8:	2000      	movs	r0, #0
 80063fa:	4911      	ldr	r1, [pc, #68]	@ (8006440 <_dtoa_r+0x590>)
 80063fc:	f7f9 feb4 	bl	8000168 <__aeabi_dsub>
 8006400:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006404:	f7fa fada 	bl	80009bc <__aeabi_dcmplt>
 8006408:	2800      	cmp	r0, #0
 800640a:	f040 80b4 	bne.w	8006576 <_dtoa_r+0x6c6>
 800640e:	42a6      	cmp	r6, r4
 8006410:	f43f af70 	beq.w	80062f4 <_dtoa_r+0x444>
 8006414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006418:	2200      	movs	r2, #0
 800641a:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <_dtoa_r+0x594>)
 800641c:	f7fa f85c 	bl	80004d8 <__aeabi_dmul>
 8006420:	2200      	movs	r2, #0
 8006422:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800642a:	4b06      	ldr	r3, [pc, #24]	@ (8006444 <_dtoa_r+0x594>)
 800642c:	f7fa f854 	bl	80004d8 <__aeabi_dmul>
 8006430:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006434:	e7c4      	b.n	80063c0 <_dtoa_r+0x510>
 8006436:	bf00      	nop
 8006438:	08009670 	.word	0x08009670
 800643c:	08009648 	.word	0x08009648
 8006440:	3ff00000 	.word	0x3ff00000
 8006444:	40240000 	.word	0x40240000
 8006448:	401c0000 	.word	0x401c0000
 800644c:	40140000 	.word	0x40140000
 8006450:	3fe00000 	.word	0x3fe00000
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	f7fa f83e 	bl	80004d8 <__aeabi_dmul>
 800645c:	4656      	mov	r6, sl
 800645e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006462:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006464:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006468:	f7fa fae6 	bl	8000a38 <__aeabi_d2iz>
 800646c:	4605      	mov	r5, r0
 800646e:	f7f9 ffc9 	bl	8000404 <__aeabi_i2d>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800647a:	f7f9 fe75 	bl	8000168 <__aeabi_dsub>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	3530      	adds	r5, #48	@ 0x30
 8006484:	f806 5b01 	strb.w	r5, [r6], #1
 8006488:	42a6      	cmp	r6, r4
 800648a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	d124      	bne.n	80064de <_dtoa_r+0x62e>
 8006494:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006498:	4bae      	ldr	r3, [pc, #696]	@ (8006754 <_dtoa_r+0x8a4>)
 800649a:	f7f9 fe67 	bl	800016c <__adddf3>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064a6:	f7fa faa7 	bl	80009f8 <__aeabi_dcmpgt>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d163      	bne.n	8006576 <_dtoa_r+0x6c6>
 80064ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064b2:	2000      	movs	r0, #0
 80064b4:	49a7      	ldr	r1, [pc, #668]	@ (8006754 <_dtoa_r+0x8a4>)
 80064b6:	f7f9 fe57 	bl	8000168 <__aeabi_dsub>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064c2:	f7fa fa7b 	bl	80009bc <__aeabi_dcmplt>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f43f af14 	beq.w	80062f4 <_dtoa_r+0x444>
 80064cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80064ce:	1e73      	subs	r3, r6, #1
 80064d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80064d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064d6:	2b30      	cmp	r3, #48	@ 0x30
 80064d8:	d0f8      	beq.n	80064cc <_dtoa_r+0x61c>
 80064da:	4647      	mov	r7, r8
 80064dc:	e03b      	b.n	8006556 <_dtoa_r+0x6a6>
 80064de:	4b9e      	ldr	r3, [pc, #632]	@ (8006758 <_dtoa_r+0x8a8>)
 80064e0:	f7f9 fffa 	bl	80004d8 <__aeabi_dmul>
 80064e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80064e8:	e7bc      	b.n	8006464 <_dtoa_r+0x5b4>
 80064ea:	4656      	mov	r6, sl
 80064ec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80064f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064f4:	4620      	mov	r0, r4
 80064f6:	4629      	mov	r1, r5
 80064f8:	f7fa f918 	bl	800072c <__aeabi_ddiv>
 80064fc:	f7fa fa9c 	bl	8000a38 <__aeabi_d2iz>
 8006500:	4680      	mov	r8, r0
 8006502:	f7f9 ff7f 	bl	8000404 <__aeabi_i2d>
 8006506:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800650a:	f7f9 ffe5 	bl	80004d8 <__aeabi_dmul>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4620      	mov	r0, r4
 8006514:	4629      	mov	r1, r5
 8006516:	f7f9 fe27 	bl	8000168 <__aeabi_dsub>
 800651a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800651e:	9d08      	ldr	r5, [sp, #32]
 8006520:	f806 4b01 	strb.w	r4, [r6], #1
 8006524:	eba6 040a 	sub.w	r4, r6, sl
 8006528:	42a5      	cmp	r5, r4
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	d133      	bne.n	8006598 <_dtoa_r+0x6e8>
 8006530:	f7f9 fe1c 	bl	800016c <__adddf3>
 8006534:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006538:	4604      	mov	r4, r0
 800653a:	460d      	mov	r5, r1
 800653c:	f7fa fa5c 	bl	80009f8 <__aeabi_dcmpgt>
 8006540:	b9c0      	cbnz	r0, 8006574 <_dtoa_r+0x6c4>
 8006542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006546:	4620      	mov	r0, r4
 8006548:	4629      	mov	r1, r5
 800654a:	f7fa fa2d 	bl	80009a8 <__aeabi_dcmpeq>
 800654e:	b110      	cbz	r0, 8006556 <_dtoa_r+0x6a6>
 8006550:	f018 0f01 	tst.w	r8, #1
 8006554:	d10e      	bne.n	8006574 <_dtoa_r+0x6c4>
 8006556:	4648      	mov	r0, r9
 8006558:	9903      	ldr	r1, [sp, #12]
 800655a:	f000 fbbb 	bl	8006cd4 <_Bfree>
 800655e:	2300      	movs	r3, #0
 8006560:	7033      	strb	r3, [r6, #0]
 8006562:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006564:	3701      	adds	r7, #1
 8006566:	601f      	str	r7, [r3, #0]
 8006568:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 824b 	beq.w	8006a06 <_dtoa_r+0xb56>
 8006570:	601e      	str	r6, [r3, #0]
 8006572:	e248      	b.n	8006a06 <_dtoa_r+0xb56>
 8006574:	46b8      	mov	r8, r7
 8006576:	4633      	mov	r3, r6
 8006578:	461e      	mov	r6, r3
 800657a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800657e:	2a39      	cmp	r2, #57	@ 0x39
 8006580:	d106      	bne.n	8006590 <_dtoa_r+0x6e0>
 8006582:	459a      	cmp	sl, r3
 8006584:	d1f8      	bne.n	8006578 <_dtoa_r+0x6c8>
 8006586:	2230      	movs	r2, #48	@ 0x30
 8006588:	f108 0801 	add.w	r8, r8, #1
 800658c:	f88a 2000 	strb.w	r2, [sl]
 8006590:	781a      	ldrb	r2, [r3, #0]
 8006592:	3201      	adds	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e7a0      	b.n	80064da <_dtoa_r+0x62a>
 8006598:	2200      	movs	r2, #0
 800659a:	4b6f      	ldr	r3, [pc, #444]	@ (8006758 <_dtoa_r+0x8a8>)
 800659c:	f7f9 ff9c 	bl	80004d8 <__aeabi_dmul>
 80065a0:	2200      	movs	r2, #0
 80065a2:	2300      	movs	r3, #0
 80065a4:	4604      	mov	r4, r0
 80065a6:	460d      	mov	r5, r1
 80065a8:	f7fa f9fe 	bl	80009a8 <__aeabi_dcmpeq>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d09f      	beq.n	80064f0 <_dtoa_r+0x640>
 80065b0:	e7d1      	b.n	8006556 <_dtoa_r+0x6a6>
 80065b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	f000 80ea 	beq.w	800678e <_dtoa_r+0x8de>
 80065ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80065bc:	2a01      	cmp	r2, #1
 80065be:	f300 80cd 	bgt.w	800675c <_dtoa_r+0x8ac>
 80065c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80065c4:	2a00      	cmp	r2, #0
 80065c6:	f000 80c1 	beq.w	800674c <_dtoa_r+0x89c>
 80065ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80065ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80065d0:	9e04      	ldr	r6, [sp, #16]
 80065d2:	9a04      	ldr	r2, [sp, #16]
 80065d4:	2101      	movs	r1, #1
 80065d6:	441a      	add	r2, r3
 80065d8:	9204      	str	r2, [sp, #16]
 80065da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065dc:	4648      	mov	r0, r9
 80065de:	441a      	add	r2, r3
 80065e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80065e2:	f000 fc75 	bl	8006ed0 <__i2b>
 80065e6:	4605      	mov	r5, r0
 80065e8:	b166      	cbz	r6, 8006604 <_dtoa_r+0x754>
 80065ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dd09      	ble.n	8006604 <_dtoa_r+0x754>
 80065f0:	42b3      	cmp	r3, r6
 80065f2:	bfa8      	it	ge
 80065f4:	4633      	movge	r3, r6
 80065f6:	9a04      	ldr	r2, [sp, #16]
 80065f8:	1af6      	subs	r6, r6, r3
 80065fa:	1ad2      	subs	r2, r2, r3
 80065fc:	9204      	str	r2, [sp, #16]
 80065fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	9309      	str	r3, [sp, #36]	@ 0x24
 8006604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006606:	b30b      	cbz	r3, 800664c <_dtoa_r+0x79c>
 8006608:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 80c6 	beq.w	800679c <_dtoa_r+0x8ec>
 8006610:	2c00      	cmp	r4, #0
 8006612:	f000 80c0 	beq.w	8006796 <_dtoa_r+0x8e6>
 8006616:	4629      	mov	r1, r5
 8006618:	4622      	mov	r2, r4
 800661a:	4648      	mov	r0, r9
 800661c:	f000 fd10 	bl	8007040 <__pow5mult>
 8006620:	9a03      	ldr	r2, [sp, #12]
 8006622:	4601      	mov	r1, r0
 8006624:	4605      	mov	r5, r0
 8006626:	4648      	mov	r0, r9
 8006628:	f000 fc68 	bl	8006efc <__multiply>
 800662c:	9903      	ldr	r1, [sp, #12]
 800662e:	4680      	mov	r8, r0
 8006630:	4648      	mov	r0, r9
 8006632:	f000 fb4f 	bl	8006cd4 <_Bfree>
 8006636:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006638:	1b1b      	subs	r3, r3, r4
 800663a:	930a      	str	r3, [sp, #40]	@ 0x28
 800663c:	f000 80b1 	beq.w	80067a2 <_dtoa_r+0x8f2>
 8006640:	4641      	mov	r1, r8
 8006642:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006644:	4648      	mov	r0, r9
 8006646:	f000 fcfb 	bl	8007040 <__pow5mult>
 800664a:	9003      	str	r0, [sp, #12]
 800664c:	2101      	movs	r1, #1
 800664e:	4648      	mov	r0, r9
 8006650:	f000 fc3e 	bl	8006ed0 <__i2b>
 8006654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006656:	4604      	mov	r4, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 81d8 	beq.w	8006a0e <_dtoa_r+0xb5e>
 800665e:	461a      	mov	r2, r3
 8006660:	4601      	mov	r1, r0
 8006662:	4648      	mov	r0, r9
 8006664:	f000 fcec 	bl	8007040 <__pow5mult>
 8006668:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800666a:	4604      	mov	r4, r0
 800666c:	2b01      	cmp	r3, #1
 800666e:	f300 809f 	bgt.w	80067b0 <_dtoa_r+0x900>
 8006672:	9b06      	ldr	r3, [sp, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f040 8097 	bne.w	80067a8 <_dtoa_r+0x8f8>
 800667a:	9b07      	ldr	r3, [sp, #28]
 800667c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006680:	2b00      	cmp	r3, #0
 8006682:	f040 8093 	bne.w	80067ac <_dtoa_r+0x8fc>
 8006686:	9b07      	ldr	r3, [sp, #28]
 8006688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800668c:	0d1b      	lsrs	r3, r3, #20
 800668e:	051b      	lsls	r3, r3, #20
 8006690:	b133      	cbz	r3, 80066a0 <_dtoa_r+0x7f0>
 8006692:	9b04      	ldr	r3, [sp, #16]
 8006694:	3301      	adds	r3, #1
 8006696:	9304      	str	r3, [sp, #16]
 8006698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800669a:	3301      	adds	r3, #1
 800669c:	9309      	str	r3, [sp, #36]	@ 0x24
 800669e:	2301      	movs	r3, #1
 80066a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80066a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 81b8 	beq.w	8006a1a <_dtoa_r+0xb6a>
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066b0:	6918      	ldr	r0, [r3, #16]
 80066b2:	f000 fbc1 	bl	8006e38 <__hi0bits>
 80066b6:	f1c0 0020 	rsb	r0, r0, #32
 80066ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066bc:	4418      	add	r0, r3
 80066be:	f010 001f 	ands.w	r0, r0, #31
 80066c2:	f000 8082 	beq.w	80067ca <_dtoa_r+0x91a>
 80066c6:	f1c0 0320 	rsb	r3, r0, #32
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	dd73      	ble.n	80067b6 <_dtoa_r+0x906>
 80066ce:	9b04      	ldr	r3, [sp, #16]
 80066d0:	f1c0 001c 	rsb	r0, r0, #28
 80066d4:	4403      	add	r3, r0
 80066d6:	9304      	str	r3, [sp, #16]
 80066d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066da:	4406      	add	r6, r0
 80066dc:	4403      	add	r3, r0
 80066de:	9309      	str	r3, [sp, #36]	@ 0x24
 80066e0:	9b04      	ldr	r3, [sp, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	dd05      	ble.n	80066f2 <_dtoa_r+0x842>
 80066e6:	461a      	mov	r2, r3
 80066e8:	4648      	mov	r0, r9
 80066ea:	9903      	ldr	r1, [sp, #12]
 80066ec:	f000 fd02 	bl	80070f4 <__lshift>
 80066f0:	9003      	str	r0, [sp, #12]
 80066f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dd05      	ble.n	8006704 <_dtoa_r+0x854>
 80066f8:	4621      	mov	r1, r4
 80066fa:	461a      	mov	r2, r3
 80066fc:	4648      	mov	r0, r9
 80066fe:	f000 fcf9 	bl	80070f4 <__lshift>
 8006702:	4604      	mov	r4, r0
 8006704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006706:	2b00      	cmp	r3, #0
 8006708:	d061      	beq.n	80067ce <_dtoa_r+0x91e>
 800670a:	4621      	mov	r1, r4
 800670c:	9803      	ldr	r0, [sp, #12]
 800670e:	f000 fd5d 	bl	80071cc <__mcmp>
 8006712:	2800      	cmp	r0, #0
 8006714:	da5b      	bge.n	80067ce <_dtoa_r+0x91e>
 8006716:	2300      	movs	r3, #0
 8006718:	220a      	movs	r2, #10
 800671a:	4648      	mov	r0, r9
 800671c:	9903      	ldr	r1, [sp, #12]
 800671e:	f000 fafb 	bl	8006d18 <__multadd>
 8006722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006724:	f107 38ff 	add.w	r8, r7, #4294967295
 8006728:	9003      	str	r0, [sp, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 8177 	beq.w	8006a1e <_dtoa_r+0xb6e>
 8006730:	4629      	mov	r1, r5
 8006732:	2300      	movs	r3, #0
 8006734:	220a      	movs	r2, #10
 8006736:	4648      	mov	r0, r9
 8006738:	f000 faee 	bl	8006d18 <__multadd>
 800673c:	f1bb 0f00 	cmp.w	fp, #0
 8006740:	4605      	mov	r5, r0
 8006742:	dc6f      	bgt.n	8006824 <_dtoa_r+0x974>
 8006744:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006746:	2b02      	cmp	r3, #2
 8006748:	dc49      	bgt.n	80067de <_dtoa_r+0x92e>
 800674a:	e06b      	b.n	8006824 <_dtoa_r+0x974>
 800674c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800674e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006752:	e73c      	b.n	80065ce <_dtoa_r+0x71e>
 8006754:	3fe00000 	.word	0x3fe00000
 8006758:	40240000 	.word	0x40240000
 800675c:	9b08      	ldr	r3, [sp, #32]
 800675e:	1e5c      	subs	r4, r3, #1
 8006760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006762:	42a3      	cmp	r3, r4
 8006764:	db09      	blt.n	800677a <_dtoa_r+0x8ca>
 8006766:	1b1c      	subs	r4, r3, r4
 8006768:	9b08      	ldr	r3, [sp, #32]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f6bf af30 	bge.w	80065d0 <_dtoa_r+0x720>
 8006770:	9b04      	ldr	r3, [sp, #16]
 8006772:	9a08      	ldr	r2, [sp, #32]
 8006774:	1a9e      	subs	r6, r3, r2
 8006776:	2300      	movs	r3, #0
 8006778:	e72b      	b.n	80065d2 <_dtoa_r+0x722>
 800677a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800677c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800677e:	1ae3      	subs	r3, r4, r3
 8006780:	441a      	add	r2, r3
 8006782:	940a      	str	r4, [sp, #40]	@ 0x28
 8006784:	9e04      	ldr	r6, [sp, #16]
 8006786:	2400      	movs	r4, #0
 8006788:	9b08      	ldr	r3, [sp, #32]
 800678a:	920e      	str	r2, [sp, #56]	@ 0x38
 800678c:	e721      	b.n	80065d2 <_dtoa_r+0x722>
 800678e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006790:	9e04      	ldr	r6, [sp, #16]
 8006792:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006794:	e728      	b.n	80065e8 <_dtoa_r+0x738>
 8006796:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800679a:	e751      	b.n	8006640 <_dtoa_r+0x790>
 800679c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800679e:	9903      	ldr	r1, [sp, #12]
 80067a0:	e750      	b.n	8006644 <_dtoa_r+0x794>
 80067a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80067a6:	e751      	b.n	800664c <_dtoa_r+0x79c>
 80067a8:	2300      	movs	r3, #0
 80067aa:	e779      	b.n	80066a0 <_dtoa_r+0x7f0>
 80067ac:	9b06      	ldr	r3, [sp, #24]
 80067ae:	e777      	b.n	80066a0 <_dtoa_r+0x7f0>
 80067b0:	2300      	movs	r3, #0
 80067b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80067b4:	e779      	b.n	80066aa <_dtoa_r+0x7fa>
 80067b6:	d093      	beq.n	80066e0 <_dtoa_r+0x830>
 80067b8:	9a04      	ldr	r2, [sp, #16]
 80067ba:	331c      	adds	r3, #28
 80067bc:	441a      	add	r2, r3
 80067be:	9204      	str	r2, [sp, #16]
 80067c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067c2:	441e      	add	r6, r3
 80067c4:	441a      	add	r2, r3
 80067c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80067c8:	e78a      	b.n	80066e0 <_dtoa_r+0x830>
 80067ca:	4603      	mov	r3, r0
 80067cc:	e7f4      	b.n	80067b8 <_dtoa_r+0x908>
 80067ce:	9b08      	ldr	r3, [sp, #32]
 80067d0:	46b8      	mov	r8, r7
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	dc20      	bgt.n	8006818 <_dtoa_r+0x968>
 80067d6:	469b      	mov	fp, r3
 80067d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067da:	2b02      	cmp	r3, #2
 80067dc:	dd1e      	ble.n	800681c <_dtoa_r+0x96c>
 80067de:	f1bb 0f00 	cmp.w	fp, #0
 80067e2:	f47f adb1 	bne.w	8006348 <_dtoa_r+0x498>
 80067e6:	4621      	mov	r1, r4
 80067e8:	465b      	mov	r3, fp
 80067ea:	2205      	movs	r2, #5
 80067ec:	4648      	mov	r0, r9
 80067ee:	f000 fa93 	bl	8006d18 <__multadd>
 80067f2:	4601      	mov	r1, r0
 80067f4:	4604      	mov	r4, r0
 80067f6:	9803      	ldr	r0, [sp, #12]
 80067f8:	f000 fce8 	bl	80071cc <__mcmp>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	f77f ada3 	ble.w	8006348 <_dtoa_r+0x498>
 8006802:	4656      	mov	r6, sl
 8006804:	2331      	movs	r3, #49	@ 0x31
 8006806:	f108 0801 	add.w	r8, r8, #1
 800680a:	f806 3b01 	strb.w	r3, [r6], #1
 800680e:	e59f      	b.n	8006350 <_dtoa_r+0x4a0>
 8006810:	46b8      	mov	r8, r7
 8006812:	9c08      	ldr	r4, [sp, #32]
 8006814:	4625      	mov	r5, r4
 8006816:	e7f4      	b.n	8006802 <_dtoa_r+0x952>
 8006818:	f8dd b020 	ldr.w	fp, [sp, #32]
 800681c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 8101 	beq.w	8006a26 <_dtoa_r+0xb76>
 8006824:	2e00      	cmp	r6, #0
 8006826:	dd05      	ble.n	8006834 <_dtoa_r+0x984>
 8006828:	4629      	mov	r1, r5
 800682a:	4632      	mov	r2, r6
 800682c:	4648      	mov	r0, r9
 800682e:	f000 fc61 	bl	80070f4 <__lshift>
 8006832:	4605      	mov	r5, r0
 8006834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006836:	2b00      	cmp	r3, #0
 8006838:	d05c      	beq.n	80068f4 <_dtoa_r+0xa44>
 800683a:	4648      	mov	r0, r9
 800683c:	6869      	ldr	r1, [r5, #4]
 800683e:	f000 fa09 	bl	8006c54 <_Balloc>
 8006842:	4606      	mov	r6, r0
 8006844:	b928      	cbnz	r0, 8006852 <_dtoa_r+0x9a2>
 8006846:	4602      	mov	r2, r0
 8006848:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800684c:	4b80      	ldr	r3, [pc, #512]	@ (8006a50 <_dtoa_r+0xba0>)
 800684e:	f7ff bb43 	b.w	8005ed8 <_dtoa_r+0x28>
 8006852:	692a      	ldr	r2, [r5, #16]
 8006854:	f105 010c 	add.w	r1, r5, #12
 8006858:	3202      	adds	r2, #2
 800685a:	0092      	lsls	r2, r2, #2
 800685c:	300c      	adds	r0, #12
 800685e:	f001 ff51 	bl	8008704 <memcpy>
 8006862:	2201      	movs	r2, #1
 8006864:	4631      	mov	r1, r6
 8006866:	4648      	mov	r0, r9
 8006868:	f000 fc44 	bl	80070f4 <__lshift>
 800686c:	462f      	mov	r7, r5
 800686e:	4605      	mov	r5, r0
 8006870:	f10a 0301 	add.w	r3, sl, #1
 8006874:	9304      	str	r3, [sp, #16]
 8006876:	eb0a 030b 	add.w	r3, sl, fp
 800687a:	930a      	str	r3, [sp, #40]	@ 0x28
 800687c:	9b06      	ldr	r3, [sp, #24]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	9309      	str	r3, [sp, #36]	@ 0x24
 8006884:	9b04      	ldr	r3, [sp, #16]
 8006886:	4621      	mov	r1, r4
 8006888:	9803      	ldr	r0, [sp, #12]
 800688a:	f103 3bff 	add.w	fp, r3, #4294967295
 800688e:	f7ff fa87 	bl	8005da0 <quorem>
 8006892:	4603      	mov	r3, r0
 8006894:	4639      	mov	r1, r7
 8006896:	3330      	adds	r3, #48	@ 0x30
 8006898:	9006      	str	r0, [sp, #24]
 800689a:	9803      	ldr	r0, [sp, #12]
 800689c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800689e:	f000 fc95 	bl	80071cc <__mcmp>
 80068a2:	462a      	mov	r2, r5
 80068a4:	9008      	str	r0, [sp, #32]
 80068a6:	4621      	mov	r1, r4
 80068a8:	4648      	mov	r0, r9
 80068aa:	f000 fcab 	bl	8007204 <__mdiff>
 80068ae:	68c2      	ldr	r2, [r0, #12]
 80068b0:	4606      	mov	r6, r0
 80068b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068b4:	bb02      	cbnz	r2, 80068f8 <_dtoa_r+0xa48>
 80068b6:	4601      	mov	r1, r0
 80068b8:	9803      	ldr	r0, [sp, #12]
 80068ba:	f000 fc87 	bl	80071cc <__mcmp>
 80068be:	4602      	mov	r2, r0
 80068c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068c2:	4631      	mov	r1, r6
 80068c4:	4648      	mov	r0, r9
 80068c6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80068ca:	f000 fa03 	bl	8006cd4 <_Bfree>
 80068ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80068d2:	9e04      	ldr	r6, [sp, #16]
 80068d4:	ea42 0103 	orr.w	r1, r2, r3
 80068d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068da:	4319      	orrs	r1, r3
 80068dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068de:	d10d      	bne.n	80068fc <_dtoa_r+0xa4c>
 80068e0:	2b39      	cmp	r3, #57	@ 0x39
 80068e2:	d027      	beq.n	8006934 <_dtoa_r+0xa84>
 80068e4:	9a08      	ldr	r2, [sp, #32]
 80068e6:	2a00      	cmp	r2, #0
 80068e8:	dd01      	ble.n	80068ee <_dtoa_r+0xa3e>
 80068ea:	9b06      	ldr	r3, [sp, #24]
 80068ec:	3331      	adds	r3, #49	@ 0x31
 80068ee:	f88b 3000 	strb.w	r3, [fp]
 80068f2:	e52e      	b.n	8006352 <_dtoa_r+0x4a2>
 80068f4:	4628      	mov	r0, r5
 80068f6:	e7b9      	b.n	800686c <_dtoa_r+0x9bc>
 80068f8:	2201      	movs	r2, #1
 80068fa:	e7e2      	b.n	80068c2 <_dtoa_r+0xa12>
 80068fc:	9908      	ldr	r1, [sp, #32]
 80068fe:	2900      	cmp	r1, #0
 8006900:	db04      	blt.n	800690c <_dtoa_r+0xa5c>
 8006902:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006904:	4301      	orrs	r1, r0
 8006906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006908:	4301      	orrs	r1, r0
 800690a:	d120      	bne.n	800694e <_dtoa_r+0xa9e>
 800690c:	2a00      	cmp	r2, #0
 800690e:	ddee      	ble.n	80068ee <_dtoa_r+0xa3e>
 8006910:	2201      	movs	r2, #1
 8006912:	9903      	ldr	r1, [sp, #12]
 8006914:	4648      	mov	r0, r9
 8006916:	9304      	str	r3, [sp, #16]
 8006918:	f000 fbec 	bl	80070f4 <__lshift>
 800691c:	4621      	mov	r1, r4
 800691e:	9003      	str	r0, [sp, #12]
 8006920:	f000 fc54 	bl	80071cc <__mcmp>
 8006924:	2800      	cmp	r0, #0
 8006926:	9b04      	ldr	r3, [sp, #16]
 8006928:	dc02      	bgt.n	8006930 <_dtoa_r+0xa80>
 800692a:	d1e0      	bne.n	80068ee <_dtoa_r+0xa3e>
 800692c:	07da      	lsls	r2, r3, #31
 800692e:	d5de      	bpl.n	80068ee <_dtoa_r+0xa3e>
 8006930:	2b39      	cmp	r3, #57	@ 0x39
 8006932:	d1da      	bne.n	80068ea <_dtoa_r+0xa3a>
 8006934:	2339      	movs	r3, #57	@ 0x39
 8006936:	f88b 3000 	strb.w	r3, [fp]
 800693a:	4633      	mov	r3, r6
 800693c:	461e      	mov	r6, r3
 800693e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006942:	3b01      	subs	r3, #1
 8006944:	2a39      	cmp	r2, #57	@ 0x39
 8006946:	d04e      	beq.n	80069e6 <_dtoa_r+0xb36>
 8006948:	3201      	adds	r2, #1
 800694a:	701a      	strb	r2, [r3, #0]
 800694c:	e501      	b.n	8006352 <_dtoa_r+0x4a2>
 800694e:	2a00      	cmp	r2, #0
 8006950:	dd03      	ble.n	800695a <_dtoa_r+0xaaa>
 8006952:	2b39      	cmp	r3, #57	@ 0x39
 8006954:	d0ee      	beq.n	8006934 <_dtoa_r+0xa84>
 8006956:	3301      	adds	r3, #1
 8006958:	e7c9      	b.n	80068ee <_dtoa_r+0xa3e>
 800695a:	9a04      	ldr	r2, [sp, #16]
 800695c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800695e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006962:	428a      	cmp	r2, r1
 8006964:	d028      	beq.n	80069b8 <_dtoa_r+0xb08>
 8006966:	2300      	movs	r3, #0
 8006968:	220a      	movs	r2, #10
 800696a:	9903      	ldr	r1, [sp, #12]
 800696c:	4648      	mov	r0, r9
 800696e:	f000 f9d3 	bl	8006d18 <__multadd>
 8006972:	42af      	cmp	r7, r5
 8006974:	9003      	str	r0, [sp, #12]
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	f04f 020a 	mov.w	r2, #10
 800697e:	4639      	mov	r1, r7
 8006980:	4648      	mov	r0, r9
 8006982:	d107      	bne.n	8006994 <_dtoa_r+0xae4>
 8006984:	f000 f9c8 	bl	8006d18 <__multadd>
 8006988:	4607      	mov	r7, r0
 800698a:	4605      	mov	r5, r0
 800698c:	9b04      	ldr	r3, [sp, #16]
 800698e:	3301      	adds	r3, #1
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	e777      	b.n	8006884 <_dtoa_r+0x9d4>
 8006994:	f000 f9c0 	bl	8006d18 <__multadd>
 8006998:	4629      	mov	r1, r5
 800699a:	4607      	mov	r7, r0
 800699c:	2300      	movs	r3, #0
 800699e:	220a      	movs	r2, #10
 80069a0:	4648      	mov	r0, r9
 80069a2:	f000 f9b9 	bl	8006d18 <__multadd>
 80069a6:	4605      	mov	r5, r0
 80069a8:	e7f0      	b.n	800698c <_dtoa_r+0xadc>
 80069aa:	f1bb 0f00 	cmp.w	fp, #0
 80069ae:	bfcc      	ite	gt
 80069b0:	465e      	movgt	r6, fp
 80069b2:	2601      	movle	r6, #1
 80069b4:	2700      	movs	r7, #0
 80069b6:	4456      	add	r6, sl
 80069b8:	2201      	movs	r2, #1
 80069ba:	9903      	ldr	r1, [sp, #12]
 80069bc:	4648      	mov	r0, r9
 80069be:	9304      	str	r3, [sp, #16]
 80069c0:	f000 fb98 	bl	80070f4 <__lshift>
 80069c4:	4621      	mov	r1, r4
 80069c6:	9003      	str	r0, [sp, #12]
 80069c8:	f000 fc00 	bl	80071cc <__mcmp>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	dcb4      	bgt.n	800693a <_dtoa_r+0xa8a>
 80069d0:	d102      	bne.n	80069d8 <_dtoa_r+0xb28>
 80069d2:	9b04      	ldr	r3, [sp, #16]
 80069d4:	07db      	lsls	r3, r3, #31
 80069d6:	d4b0      	bmi.n	800693a <_dtoa_r+0xa8a>
 80069d8:	4633      	mov	r3, r6
 80069da:	461e      	mov	r6, r3
 80069dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069e0:	2a30      	cmp	r2, #48	@ 0x30
 80069e2:	d0fa      	beq.n	80069da <_dtoa_r+0xb2a>
 80069e4:	e4b5      	b.n	8006352 <_dtoa_r+0x4a2>
 80069e6:	459a      	cmp	sl, r3
 80069e8:	d1a8      	bne.n	800693c <_dtoa_r+0xa8c>
 80069ea:	2331      	movs	r3, #49	@ 0x31
 80069ec:	f108 0801 	add.w	r8, r8, #1
 80069f0:	f88a 3000 	strb.w	r3, [sl]
 80069f4:	e4ad      	b.n	8006352 <_dtoa_r+0x4a2>
 80069f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80069f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006a54 <_dtoa_r+0xba4>
 80069fc:	b11b      	cbz	r3, 8006a06 <_dtoa_r+0xb56>
 80069fe:	f10a 0308 	add.w	r3, sl, #8
 8006a02:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	4650      	mov	r0, sl
 8006a08:	b017      	add	sp, #92	@ 0x5c
 8006a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	f77f ae2e 	ble.w	8006672 <_dtoa_r+0x7c2>
 8006a16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	e64d      	b.n	80066ba <_dtoa_r+0x80a>
 8006a1e:	f1bb 0f00 	cmp.w	fp, #0
 8006a22:	f77f aed9 	ble.w	80067d8 <_dtoa_r+0x928>
 8006a26:	4656      	mov	r6, sl
 8006a28:	4621      	mov	r1, r4
 8006a2a:	9803      	ldr	r0, [sp, #12]
 8006a2c:	f7ff f9b8 	bl	8005da0 <quorem>
 8006a30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006a34:	f806 3b01 	strb.w	r3, [r6], #1
 8006a38:	eba6 020a 	sub.w	r2, r6, sl
 8006a3c:	4593      	cmp	fp, r2
 8006a3e:	ddb4      	ble.n	80069aa <_dtoa_r+0xafa>
 8006a40:	2300      	movs	r3, #0
 8006a42:	220a      	movs	r2, #10
 8006a44:	4648      	mov	r0, r9
 8006a46:	9903      	ldr	r1, [sp, #12]
 8006a48:	f000 f966 	bl	8006d18 <__multadd>
 8006a4c:	9003      	str	r0, [sp, #12]
 8006a4e:	e7eb      	b.n	8006a28 <_dtoa_r+0xb78>
 8006a50:	08009517 	.word	0x08009517
 8006a54:	0800949b 	.word	0x0800949b

08006a58 <_free_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	d040      	beq.n	8006ae2 <_free_r+0x8a>
 8006a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a64:	1f0c      	subs	r4, r1, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bfb8      	it	lt
 8006a6a:	18e4      	addlt	r4, r4, r3
 8006a6c:	f000 f8e6 	bl	8006c3c <__malloc_lock>
 8006a70:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae4 <_free_r+0x8c>)
 8006a72:	6813      	ldr	r3, [r2, #0]
 8006a74:	b933      	cbnz	r3, 8006a84 <_free_r+0x2c>
 8006a76:	6063      	str	r3, [r4, #4]
 8006a78:	6014      	str	r4, [r2, #0]
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a80:	f000 b8e2 	b.w	8006c48 <__malloc_unlock>
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	d908      	bls.n	8006a9a <_free_r+0x42>
 8006a88:	6820      	ldr	r0, [r4, #0]
 8006a8a:	1821      	adds	r1, r4, r0
 8006a8c:	428b      	cmp	r3, r1
 8006a8e:	bf01      	itttt	eq
 8006a90:	6819      	ldreq	r1, [r3, #0]
 8006a92:	685b      	ldreq	r3, [r3, #4]
 8006a94:	1809      	addeq	r1, r1, r0
 8006a96:	6021      	streq	r1, [r4, #0]
 8006a98:	e7ed      	b.n	8006a76 <_free_r+0x1e>
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	b10b      	cbz	r3, 8006aa4 <_free_r+0x4c>
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	d9fa      	bls.n	8006a9a <_free_r+0x42>
 8006aa4:	6811      	ldr	r1, [r2, #0]
 8006aa6:	1850      	adds	r0, r2, r1
 8006aa8:	42a0      	cmp	r0, r4
 8006aaa:	d10b      	bne.n	8006ac4 <_free_r+0x6c>
 8006aac:	6820      	ldr	r0, [r4, #0]
 8006aae:	4401      	add	r1, r0
 8006ab0:	1850      	adds	r0, r2, r1
 8006ab2:	4283      	cmp	r3, r0
 8006ab4:	6011      	str	r1, [r2, #0]
 8006ab6:	d1e0      	bne.n	8006a7a <_free_r+0x22>
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	4408      	add	r0, r1
 8006abe:	6010      	str	r0, [r2, #0]
 8006ac0:	6053      	str	r3, [r2, #4]
 8006ac2:	e7da      	b.n	8006a7a <_free_r+0x22>
 8006ac4:	d902      	bls.n	8006acc <_free_r+0x74>
 8006ac6:	230c      	movs	r3, #12
 8006ac8:	602b      	str	r3, [r5, #0]
 8006aca:	e7d6      	b.n	8006a7a <_free_r+0x22>
 8006acc:	6820      	ldr	r0, [r4, #0]
 8006ace:	1821      	adds	r1, r4, r0
 8006ad0:	428b      	cmp	r3, r1
 8006ad2:	bf01      	itttt	eq
 8006ad4:	6819      	ldreq	r1, [r3, #0]
 8006ad6:	685b      	ldreq	r3, [r3, #4]
 8006ad8:	1809      	addeq	r1, r1, r0
 8006ada:	6021      	streq	r1, [r4, #0]
 8006adc:	6063      	str	r3, [r4, #4]
 8006ade:	6054      	str	r4, [r2, #4]
 8006ae0:	e7cb      	b.n	8006a7a <_free_r+0x22>
 8006ae2:	bd38      	pop	{r3, r4, r5, pc}
 8006ae4:	200005f0 	.word	0x200005f0

08006ae8 <malloc>:
 8006ae8:	4b02      	ldr	r3, [pc, #8]	@ (8006af4 <malloc+0xc>)
 8006aea:	4601      	mov	r1, r0
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	f000 b825 	b.w	8006b3c <_malloc_r>
 8006af2:	bf00      	nop
 8006af4:	20000018 	.word	0x20000018

08006af8 <sbrk_aligned>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	4e0f      	ldr	r6, [pc, #60]	@ (8006b38 <sbrk_aligned+0x40>)
 8006afc:	460c      	mov	r4, r1
 8006afe:	6831      	ldr	r1, [r6, #0]
 8006b00:	4605      	mov	r5, r0
 8006b02:	b911      	cbnz	r1, 8006b0a <sbrk_aligned+0x12>
 8006b04:	f001 fdee 	bl	80086e4 <_sbrk_r>
 8006b08:	6030      	str	r0, [r6, #0]
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f001 fde9 	bl	80086e4 <_sbrk_r>
 8006b12:	1c43      	adds	r3, r0, #1
 8006b14:	d103      	bne.n	8006b1e <sbrk_aligned+0x26>
 8006b16:	f04f 34ff 	mov.w	r4, #4294967295
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	1cc4      	adds	r4, r0, #3
 8006b20:	f024 0403 	bic.w	r4, r4, #3
 8006b24:	42a0      	cmp	r0, r4
 8006b26:	d0f8      	beq.n	8006b1a <sbrk_aligned+0x22>
 8006b28:	1a21      	subs	r1, r4, r0
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f001 fdda 	bl	80086e4 <_sbrk_r>
 8006b30:	3001      	adds	r0, #1
 8006b32:	d1f2      	bne.n	8006b1a <sbrk_aligned+0x22>
 8006b34:	e7ef      	b.n	8006b16 <sbrk_aligned+0x1e>
 8006b36:	bf00      	nop
 8006b38:	200005ec 	.word	0x200005ec

08006b3c <_malloc_r>:
 8006b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b40:	1ccd      	adds	r5, r1, #3
 8006b42:	f025 0503 	bic.w	r5, r5, #3
 8006b46:	3508      	adds	r5, #8
 8006b48:	2d0c      	cmp	r5, #12
 8006b4a:	bf38      	it	cc
 8006b4c:	250c      	movcc	r5, #12
 8006b4e:	2d00      	cmp	r5, #0
 8006b50:	4606      	mov	r6, r0
 8006b52:	db01      	blt.n	8006b58 <_malloc_r+0x1c>
 8006b54:	42a9      	cmp	r1, r5
 8006b56:	d904      	bls.n	8006b62 <_malloc_r+0x26>
 8006b58:	230c      	movs	r3, #12
 8006b5a:	6033      	str	r3, [r6, #0]
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c38 <_malloc_r+0xfc>
 8006b66:	f000 f869 	bl	8006c3c <__malloc_lock>
 8006b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b6e:	461c      	mov	r4, r3
 8006b70:	bb44      	cbnz	r4, 8006bc4 <_malloc_r+0x88>
 8006b72:	4629      	mov	r1, r5
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7ff ffbf 	bl	8006af8 <sbrk_aligned>
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	d158      	bne.n	8006c32 <_malloc_r+0xf6>
 8006b80:	f8d8 4000 	ldr.w	r4, [r8]
 8006b84:	4627      	mov	r7, r4
 8006b86:	2f00      	cmp	r7, #0
 8006b88:	d143      	bne.n	8006c12 <_malloc_r+0xd6>
 8006b8a:	2c00      	cmp	r4, #0
 8006b8c:	d04b      	beq.n	8006c26 <_malloc_r+0xea>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	4639      	mov	r1, r7
 8006b92:	4630      	mov	r0, r6
 8006b94:	eb04 0903 	add.w	r9, r4, r3
 8006b98:	f001 fda4 	bl	80086e4 <_sbrk_r>
 8006b9c:	4581      	cmp	r9, r0
 8006b9e:	d142      	bne.n	8006c26 <_malloc_r+0xea>
 8006ba0:	6821      	ldr	r1, [r4, #0]
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	1a6d      	subs	r5, r5, r1
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	f7ff ffa6 	bl	8006af8 <sbrk_aligned>
 8006bac:	3001      	adds	r0, #1
 8006bae:	d03a      	beq.n	8006c26 <_malloc_r+0xea>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	442b      	add	r3, r5
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	bb62      	cbnz	r2, 8006c18 <_malloc_r+0xdc>
 8006bbe:	f8c8 7000 	str.w	r7, [r8]
 8006bc2:	e00f      	b.n	8006be4 <_malloc_r+0xa8>
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	1b52      	subs	r2, r2, r5
 8006bc8:	d420      	bmi.n	8006c0c <_malloc_r+0xd0>
 8006bca:	2a0b      	cmp	r2, #11
 8006bcc:	d917      	bls.n	8006bfe <_malloc_r+0xc2>
 8006bce:	1961      	adds	r1, r4, r5
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	6025      	str	r5, [r4, #0]
 8006bd4:	bf18      	it	ne
 8006bd6:	6059      	strne	r1, [r3, #4]
 8006bd8:	6863      	ldr	r3, [r4, #4]
 8006bda:	bf08      	it	eq
 8006bdc:	f8c8 1000 	streq.w	r1, [r8]
 8006be0:	5162      	str	r2, [r4, r5]
 8006be2:	604b      	str	r3, [r1, #4]
 8006be4:	4630      	mov	r0, r6
 8006be6:	f000 f82f 	bl	8006c48 <__malloc_unlock>
 8006bea:	f104 000b 	add.w	r0, r4, #11
 8006bee:	1d23      	adds	r3, r4, #4
 8006bf0:	f020 0007 	bic.w	r0, r0, #7
 8006bf4:	1ac2      	subs	r2, r0, r3
 8006bf6:	bf1c      	itt	ne
 8006bf8:	1a1b      	subne	r3, r3, r0
 8006bfa:	50a3      	strne	r3, [r4, r2]
 8006bfc:	e7af      	b.n	8006b5e <_malloc_r+0x22>
 8006bfe:	6862      	ldr	r2, [r4, #4]
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	bf0c      	ite	eq
 8006c04:	f8c8 2000 	streq.w	r2, [r8]
 8006c08:	605a      	strne	r2, [r3, #4]
 8006c0a:	e7eb      	b.n	8006be4 <_malloc_r+0xa8>
 8006c0c:	4623      	mov	r3, r4
 8006c0e:	6864      	ldr	r4, [r4, #4]
 8006c10:	e7ae      	b.n	8006b70 <_malloc_r+0x34>
 8006c12:	463c      	mov	r4, r7
 8006c14:	687f      	ldr	r7, [r7, #4]
 8006c16:	e7b6      	b.n	8006b86 <_malloc_r+0x4a>
 8006c18:	461a      	mov	r2, r3
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	d1fb      	bne.n	8006c18 <_malloc_r+0xdc>
 8006c20:	2300      	movs	r3, #0
 8006c22:	6053      	str	r3, [r2, #4]
 8006c24:	e7de      	b.n	8006be4 <_malloc_r+0xa8>
 8006c26:	230c      	movs	r3, #12
 8006c28:	4630      	mov	r0, r6
 8006c2a:	6033      	str	r3, [r6, #0]
 8006c2c:	f000 f80c 	bl	8006c48 <__malloc_unlock>
 8006c30:	e794      	b.n	8006b5c <_malloc_r+0x20>
 8006c32:	6005      	str	r5, [r0, #0]
 8006c34:	e7d6      	b.n	8006be4 <_malloc_r+0xa8>
 8006c36:	bf00      	nop
 8006c38:	200005f0 	.word	0x200005f0

08006c3c <__malloc_lock>:
 8006c3c:	4801      	ldr	r0, [pc, #4]	@ (8006c44 <__malloc_lock+0x8>)
 8006c3e:	f7ff b89a 	b.w	8005d76 <__retarget_lock_acquire_recursive>
 8006c42:	bf00      	nop
 8006c44:	200005e8 	.word	0x200005e8

08006c48 <__malloc_unlock>:
 8006c48:	4801      	ldr	r0, [pc, #4]	@ (8006c50 <__malloc_unlock+0x8>)
 8006c4a:	f7ff b895 	b.w	8005d78 <__retarget_lock_release_recursive>
 8006c4e:	bf00      	nop
 8006c50:	200005e8 	.word	0x200005e8

08006c54 <_Balloc>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	69c6      	ldr	r6, [r0, #28]
 8006c58:	4604      	mov	r4, r0
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	b976      	cbnz	r6, 8006c7c <_Balloc+0x28>
 8006c5e:	2010      	movs	r0, #16
 8006c60:	f7ff ff42 	bl	8006ae8 <malloc>
 8006c64:	4602      	mov	r2, r0
 8006c66:	61e0      	str	r0, [r4, #28]
 8006c68:	b920      	cbnz	r0, 8006c74 <_Balloc+0x20>
 8006c6a:	216b      	movs	r1, #107	@ 0x6b
 8006c6c:	4b17      	ldr	r3, [pc, #92]	@ (8006ccc <_Balloc+0x78>)
 8006c6e:	4818      	ldr	r0, [pc, #96]	@ (8006cd0 <_Balloc+0x7c>)
 8006c70:	f001 fd5c 	bl	800872c <__assert_func>
 8006c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c78:	6006      	str	r6, [r0, #0]
 8006c7a:	60c6      	str	r6, [r0, #12]
 8006c7c:	69e6      	ldr	r6, [r4, #28]
 8006c7e:	68f3      	ldr	r3, [r6, #12]
 8006c80:	b183      	cbz	r3, 8006ca4 <_Balloc+0x50>
 8006c82:	69e3      	ldr	r3, [r4, #28]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c8a:	b9b8      	cbnz	r0, 8006cbc <_Balloc+0x68>
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	fa01 f605 	lsl.w	r6, r1, r5
 8006c92:	1d72      	adds	r2, r6, #5
 8006c94:	4620      	mov	r0, r4
 8006c96:	0092      	lsls	r2, r2, #2
 8006c98:	f001 fd66 	bl	8008768 <_calloc_r>
 8006c9c:	b160      	cbz	r0, 8006cb8 <_Balloc+0x64>
 8006c9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ca2:	e00e      	b.n	8006cc2 <_Balloc+0x6e>
 8006ca4:	2221      	movs	r2, #33	@ 0x21
 8006ca6:	2104      	movs	r1, #4
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f001 fd5d 	bl	8008768 <_calloc_r>
 8006cae:	69e3      	ldr	r3, [r4, #28]
 8006cb0:	60f0      	str	r0, [r6, #12]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e4      	bne.n	8006c82 <_Balloc+0x2e>
 8006cb8:	2000      	movs	r0, #0
 8006cba:	bd70      	pop	{r4, r5, r6, pc}
 8006cbc:	6802      	ldr	r2, [r0, #0]
 8006cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cc8:	e7f7      	b.n	8006cba <_Balloc+0x66>
 8006cca:	bf00      	nop
 8006ccc:	080094a8 	.word	0x080094a8
 8006cd0:	08009528 	.word	0x08009528

08006cd4 <_Bfree>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	69c6      	ldr	r6, [r0, #28]
 8006cd8:	4605      	mov	r5, r0
 8006cda:	460c      	mov	r4, r1
 8006cdc:	b976      	cbnz	r6, 8006cfc <_Bfree+0x28>
 8006cde:	2010      	movs	r0, #16
 8006ce0:	f7ff ff02 	bl	8006ae8 <malloc>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	61e8      	str	r0, [r5, #28]
 8006ce8:	b920      	cbnz	r0, 8006cf4 <_Bfree+0x20>
 8006cea:	218f      	movs	r1, #143	@ 0x8f
 8006cec:	4b08      	ldr	r3, [pc, #32]	@ (8006d10 <_Bfree+0x3c>)
 8006cee:	4809      	ldr	r0, [pc, #36]	@ (8006d14 <_Bfree+0x40>)
 8006cf0:	f001 fd1c 	bl	800872c <__assert_func>
 8006cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cf8:	6006      	str	r6, [r0, #0]
 8006cfa:	60c6      	str	r6, [r0, #12]
 8006cfc:	b13c      	cbz	r4, 8006d0e <_Bfree+0x3a>
 8006cfe:	69eb      	ldr	r3, [r5, #28]
 8006d00:	6862      	ldr	r2, [r4, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d08:	6021      	str	r1, [r4, #0]
 8006d0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	080094a8 	.word	0x080094a8
 8006d14:	08009528 	.word	0x08009528

08006d18 <__multadd>:
 8006d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	461e      	mov	r6, r3
 8006d22:	2000      	movs	r0, #0
 8006d24:	690d      	ldr	r5, [r1, #16]
 8006d26:	f101 0c14 	add.w	ip, r1, #20
 8006d2a:	f8dc 3000 	ldr.w	r3, [ip]
 8006d2e:	3001      	adds	r0, #1
 8006d30:	b299      	uxth	r1, r3
 8006d32:	fb02 6101 	mla	r1, r2, r1, r6
 8006d36:	0c1e      	lsrs	r6, r3, #16
 8006d38:	0c0b      	lsrs	r3, r1, #16
 8006d3a:	fb02 3306 	mla	r3, r2, r6, r3
 8006d3e:	b289      	uxth	r1, r1
 8006d40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d44:	4285      	cmp	r5, r0
 8006d46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d4a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d4e:	dcec      	bgt.n	8006d2a <__multadd+0x12>
 8006d50:	b30e      	cbz	r6, 8006d96 <__multadd+0x7e>
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	42ab      	cmp	r3, r5
 8006d56:	dc19      	bgt.n	8006d8c <__multadd+0x74>
 8006d58:	6861      	ldr	r1, [r4, #4]
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	3101      	adds	r1, #1
 8006d5e:	f7ff ff79 	bl	8006c54 <_Balloc>
 8006d62:	4680      	mov	r8, r0
 8006d64:	b928      	cbnz	r0, 8006d72 <__multadd+0x5a>
 8006d66:	4602      	mov	r2, r0
 8006d68:	21ba      	movs	r1, #186	@ 0xba
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d9c <__multadd+0x84>)
 8006d6c:	480c      	ldr	r0, [pc, #48]	@ (8006da0 <__multadd+0x88>)
 8006d6e:	f001 fcdd 	bl	800872c <__assert_func>
 8006d72:	6922      	ldr	r2, [r4, #16]
 8006d74:	f104 010c 	add.w	r1, r4, #12
 8006d78:	3202      	adds	r2, #2
 8006d7a:	0092      	lsls	r2, r2, #2
 8006d7c:	300c      	adds	r0, #12
 8006d7e:	f001 fcc1 	bl	8008704 <memcpy>
 8006d82:	4621      	mov	r1, r4
 8006d84:	4638      	mov	r0, r7
 8006d86:	f7ff ffa5 	bl	8006cd4 <_Bfree>
 8006d8a:	4644      	mov	r4, r8
 8006d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d90:	3501      	adds	r5, #1
 8006d92:	615e      	str	r6, [r3, #20]
 8006d94:	6125      	str	r5, [r4, #16]
 8006d96:	4620      	mov	r0, r4
 8006d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d9c:	08009517 	.word	0x08009517
 8006da0:	08009528 	.word	0x08009528

08006da4 <__s2b>:
 8006da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006da8:	4615      	mov	r5, r2
 8006daa:	2209      	movs	r2, #9
 8006dac:	461f      	mov	r7, r3
 8006dae:	3308      	adds	r3, #8
 8006db0:	460c      	mov	r4, r1
 8006db2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006db6:	4606      	mov	r6, r0
 8006db8:	2201      	movs	r2, #1
 8006dba:	2100      	movs	r1, #0
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	db09      	blt.n	8006dd4 <__s2b+0x30>
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7ff ff47 	bl	8006c54 <_Balloc>
 8006dc6:	b940      	cbnz	r0, 8006dda <__s2b+0x36>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	21d3      	movs	r1, #211	@ 0xd3
 8006dcc:	4b18      	ldr	r3, [pc, #96]	@ (8006e30 <__s2b+0x8c>)
 8006dce:	4819      	ldr	r0, [pc, #100]	@ (8006e34 <__s2b+0x90>)
 8006dd0:	f001 fcac 	bl	800872c <__assert_func>
 8006dd4:	0052      	lsls	r2, r2, #1
 8006dd6:	3101      	adds	r1, #1
 8006dd8:	e7f0      	b.n	8006dbc <__s2b+0x18>
 8006dda:	9b08      	ldr	r3, [sp, #32]
 8006ddc:	2d09      	cmp	r5, #9
 8006dde:	6143      	str	r3, [r0, #20]
 8006de0:	f04f 0301 	mov.w	r3, #1
 8006de4:	6103      	str	r3, [r0, #16]
 8006de6:	dd16      	ble.n	8006e16 <__s2b+0x72>
 8006de8:	f104 0909 	add.w	r9, r4, #9
 8006dec:	46c8      	mov	r8, r9
 8006dee:	442c      	add	r4, r5
 8006df0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006df4:	4601      	mov	r1, r0
 8006df6:	220a      	movs	r2, #10
 8006df8:	4630      	mov	r0, r6
 8006dfa:	3b30      	subs	r3, #48	@ 0x30
 8006dfc:	f7ff ff8c 	bl	8006d18 <__multadd>
 8006e00:	45a0      	cmp	r8, r4
 8006e02:	d1f5      	bne.n	8006df0 <__s2b+0x4c>
 8006e04:	f1a5 0408 	sub.w	r4, r5, #8
 8006e08:	444c      	add	r4, r9
 8006e0a:	1b2d      	subs	r5, r5, r4
 8006e0c:	1963      	adds	r3, r4, r5
 8006e0e:	42bb      	cmp	r3, r7
 8006e10:	db04      	blt.n	8006e1c <__s2b+0x78>
 8006e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e16:	2509      	movs	r5, #9
 8006e18:	340a      	adds	r4, #10
 8006e1a:	e7f6      	b.n	8006e0a <__s2b+0x66>
 8006e1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e20:	4601      	mov	r1, r0
 8006e22:	220a      	movs	r2, #10
 8006e24:	4630      	mov	r0, r6
 8006e26:	3b30      	subs	r3, #48	@ 0x30
 8006e28:	f7ff ff76 	bl	8006d18 <__multadd>
 8006e2c:	e7ee      	b.n	8006e0c <__s2b+0x68>
 8006e2e:	bf00      	nop
 8006e30:	08009517 	.word	0x08009517
 8006e34:	08009528 	.word	0x08009528

08006e38 <__hi0bits>:
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006e3e:	bf3a      	itte	cc
 8006e40:	0403      	lslcc	r3, r0, #16
 8006e42:	2010      	movcc	r0, #16
 8006e44:	2000      	movcs	r0, #0
 8006e46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e4a:	bf3c      	itt	cc
 8006e4c:	021b      	lslcc	r3, r3, #8
 8006e4e:	3008      	addcc	r0, #8
 8006e50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e54:	bf3c      	itt	cc
 8006e56:	011b      	lslcc	r3, r3, #4
 8006e58:	3004      	addcc	r0, #4
 8006e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e5e:	bf3c      	itt	cc
 8006e60:	009b      	lslcc	r3, r3, #2
 8006e62:	3002      	addcc	r0, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	db05      	blt.n	8006e74 <__hi0bits+0x3c>
 8006e68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e6c:	f100 0001 	add.w	r0, r0, #1
 8006e70:	bf08      	it	eq
 8006e72:	2020      	moveq	r0, #32
 8006e74:	4770      	bx	lr

08006e76 <__lo0bits>:
 8006e76:	6803      	ldr	r3, [r0, #0]
 8006e78:	4602      	mov	r2, r0
 8006e7a:	f013 0007 	ands.w	r0, r3, #7
 8006e7e:	d00b      	beq.n	8006e98 <__lo0bits+0x22>
 8006e80:	07d9      	lsls	r1, r3, #31
 8006e82:	d421      	bmi.n	8006ec8 <__lo0bits+0x52>
 8006e84:	0798      	lsls	r0, r3, #30
 8006e86:	bf49      	itett	mi
 8006e88:	085b      	lsrmi	r3, r3, #1
 8006e8a:	089b      	lsrpl	r3, r3, #2
 8006e8c:	2001      	movmi	r0, #1
 8006e8e:	6013      	strmi	r3, [r2, #0]
 8006e90:	bf5c      	itt	pl
 8006e92:	2002      	movpl	r0, #2
 8006e94:	6013      	strpl	r3, [r2, #0]
 8006e96:	4770      	bx	lr
 8006e98:	b299      	uxth	r1, r3
 8006e9a:	b909      	cbnz	r1, 8006ea0 <__lo0bits+0x2a>
 8006e9c:	2010      	movs	r0, #16
 8006e9e:	0c1b      	lsrs	r3, r3, #16
 8006ea0:	b2d9      	uxtb	r1, r3
 8006ea2:	b909      	cbnz	r1, 8006ea8 <__lo0bits+0x32>
 8006ea4:	3008      	adds	r0, #8
 8006ea6:	0a1b      	lsrs	r3, r3, #8
 8006ea8:	0719      	lsls	r1, r3, #28
 8006eaa:	bf04      	itt	eq
 8006eac:	091b      	lsreq	r3, r3, #4
 8006eae:	3004      	addeq	r0, #4
 8006eb0:	0799      	lsls	r1, r3, #30
 8006eb2:	bf04      	itt	eq
 8006eb4:	089b      	lsreq	r3, r3, #2
 8006eb6:	3002      	addeq	r0, #2
 8006eb8:	07d9      	lsls	r1, r3, #31
 8006eba:	d403      	bmi.n	8006ec4 <__lo0bits+0x4e>
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	f100 0001 	add.w	r0, r0, #1
 8006ec2:	d003      	beq.n	8006ecc <__lo0bits+0x56>
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	4770      	bx	lr
 8006ec8:	2000      	movs	r0, #0
 8006eca:	4770      	bx	lr
 8006ecc:	2020      	movs	r0, #32
 8006ece:	4770      	bx	lr

08006ed0 <__i2b>:
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	f7ff febd 	bl	8006c54 <_Balloc>
 8006eda:	4602      	mov	r2, r0
 8006edc:	b928      	cbnz	r0, 8006eea <__i2b+0x1a>
 8006ede:	f240 1145 	movw	r1, #325	@ 0x145
 8006ee2:	4b04      	ldr	r3, [pc, #16]	@ (8006ef4 <__i2b+0x24>)
 8006ee4:	4804      	ldr	r0, [pc, #16]	@ (8006ef8 <__i2b+0x28>)
 8006ee6:	f001 fc21 	bl	800872c <__assert_func>
 8006eea:	2301      	movs	r3, #1
 8006eec:	6144      	str	r4, [r0, #20]
 8006eee:	6103      	str	r3, [r0, #16]
 8006ef0:	bd10      	pop	{r4, pc}
 8006ef2:	bf00      	nop
 8006ef4:	08009517 	.word	0x08009517
 8006ef8:	08009528 	.word	0x08009528

08006efc <__multiply>:
 8006efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f00:	4617      	mov	r7, r2
 8006f02:	690a      	ldr	r2, [r1, #16]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	4689      	mov	r9, r1
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	bfa2      	ittt	ge
 8006f0c:	463b      	movge	r3, r7
 8006f0e:	460f      	movge	r7, r1
 8006f10:	4699      	movge	r9, r3
 8006f12:	693d      	ldr	r5, [r7, #16]
 8006f14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	eb05 060a 	add.w	r6, r5, sl
 8006f20:	42b3      	cmp	r3, r6
 8006f22:	b085      	sub	sp, #20
 8006f24:	bfb8      	it	lt
 8006f26:	3101      	addlt	r1, #1
 8006f28:	f7ff fe94 	bl	8006c54 <_Balloc>
 8006f2c:	b930      	cbnz	r0, 8006f3c <__multiply+0x40>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006f34:	4b40      	ldr	r3, [pc, #256]	@ (8007038 <__multiply+0x13c>)
 8006f36:	4841      	ldr	r0, [pc, #260]	@ (800703c <__multiply+0x140>)
 8006f38:	f001 fbf8 	bl	800872c <__assert_func>
 8006f3c:	f100 0414 	add.w	r4, r0, #20
 8006f40:	4623      	mov	r3, r4
 8006f42:	2200      	movs	r2, #0
 8006f44:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006f48:	4573      	cmp	r3, lr
 8006f4a:	d320      	bcc.n	8006f8e <__multiply+0x92>
 8006f4c:	f107 0814 	add.w	r8, r7, #20
 8006f50:	f109 0114 	add.w	r1, r9, #20
 8006f54:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006f58:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006f5c:	9302      	str	r3, [sp, #8]
 8006f5e:	1beb      	subs	r3, r5, r7
 8006f60:	3b15      	subs	r3, #21
 8006f62:	f023 0303 	bic.w	r3, r3, #3
 8006f66:	3304      	adds	r3, #4
 8006f68:	3715      	adds	r7, #21
 8006f6a:	42bd      	cmp	r5, r7
 8006f6c:	bf38      	it	cc
 8006f6e:	2304      	movcc	r3, #4
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	9b02      	ldr	r3, [sp, #8]
 8006f74:	9103      	str	r1, [sp, #12]
 8006f76:	428b      	cmp	r3, r1
 8006f78:	d80c      	bhi.n	8006f94 <__multiply+0x98>
 8006f7a:	2e00      	cmp	r6, #0
 8006f7c:	dd03      	ble.n	8006f86 <__multiply+0x8a>
 8006f7e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d055      	beq.n	8007032 <__multiply+0x136>
 8006f86:	6106      	str	r6, [r0, #16]
 8006f88:	b005      	add	sp, #20
 8006f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8e:	f843 2b04 	str.w	r2, [r3], #4
 8006f92:	e7d9      	b.n	8006f48 <__multiply+0x4c>
 8006f94:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f98:	f1ba 0f00 	cmp.w	sl, #0
 8006f9c:	d01f      	beq.n	8006fde <__multiply+0xe2>
 8006f9e:	46c4      	mov	ip, r8
 8006fa0:	46a1      	mov	r9, r4
 8006fa2:	2700      	movs	r7, #0
 8006fa4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006fa8:	f8d9 3000 	ldr.w	r3, [r9]
 8006fac:	fa1f fb82 	uxth.w	fp, r2
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	fb0a 330b 	mla	r3, sl, fp, r3
 8006fb6:	443b      	add	r3, r7
 8006fb8:	f8d9 7000 	ldr.w	r7, [r9]
 8006fbc:	0c12      	lsrs	r2, r2, #16
 8006fbe:	0c3f      	lsrs	r7, r7, #16
 8006fc0:	fb0a 7202 	mla	r2, sl, r2, r7
 8006fc4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fce:	4565      	cmp	r5, ip
 8006fd0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006fd4:	f849 3b04 	str.w	r3, [r9], #4
 8006fd8:	d8e4      	bhi.n	8006fa4 <__multiply+0xa8>
 8006fda:	9b01      	ldr	r3, [sp, #4]
 8006fdc:	50e7      	str	r7, [r4, r3]
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	3104      	adds	r1, #4
 8006fe2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006fe6:	f1b9 0f00 	cmp.w	r9, #0
 8006fea:	d020      	beq.n	800702e <__multiply+0x132>
 8006fec:	4647      	mov	r7, r8
 8006fee:	46a4      	mov	ip, r4
 8006ff0:	f04f 0a00 	mov.w	sl, #0
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	f8b7 b000 	ldrh.w	fp, [r7]
 8006ffa:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	fb09 220b 	mla	r2, r9, fp, r2
 8007004:	4452      	add	r2, sl
 8007006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800700a:	f84c 3b04 	str.w	r3, [ip], #4
 800700e:	f857 3b04 	ldr.w	r3, [r7], #4
 8007012:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007016:	f8bc 3000 	ldrh.w	r3, [ip]
 800701a:	42bd      	cmp	r5, r7
 800701c:	fb09 330a 	mla	r3, r9, sl, r3
 8007020:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007024:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007028:	d8e5      	bhi.n	8006ff6 <__multiply+0xfa>
 800702a:	9a01      	ldr	r2, [sp, #4]
 800702c:	50a3      	str	r3, [r4, r2]
 800702e:	3404      	adds	r4, #4
 8007030:	e79f      	b.n	8006f72 <__multiply+0x76>
 8007032:	3e01      	subs	r6, #1
 8007034:	e7a1      	b.n	8006f7a <__multiply+0x7e>
 8007036:	bf00      	nop
 8007038:	08009517 	.word	0x08009517
 800703c:	08009528 	.word	0x08009528

08007040 <__pow5mult>:
 8007040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007044:	4615      	mov	r5, r2
 8007046:	f012 0203 	ands.w	r2, r2, #3
 800704a:	4607      	mov	r7, r0
 800704c:	460e      	mov	r6, r1
 800704e:	d007      	beq.n	8007060 <__pow5mult+0x20>
 8007050:	4c25      	ldr	r4, [pc, #148]	@ (80070e8 <__pow5mult+0xa8>)
 8007052:	3a01      	subs	r2, #1
 8007054:	2300      	movs	r3, #0
 8007056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800705a:	f7ff fe5d 	bl	8006d18 <__multadd>
 800705e:	4606      	mov	r6, r0
 8007060:	10ad      	asrs	r5, r5, #2
 8007062:	d03d      	beq.n	80070e0 <__pow5mult+0xa0>
 8007064:	69fc      	ldr	r4, [r7, #28]
 8007066:	b97c      	cbnz	r4, 8007088 <__pow5mult+0x48>
 8007068:	2010      	movs	r0, #16
 800706a:	f7ff fd3d 	bl	8006ae8 <malloc>
 800706e:	4602      	mov	r2, r0
 8007070:	61f8      	str	r0, [r7, #28]
 8007072:	b928      	cbnz	r0, 8007080 <__pow5mult+0x40>
 8007074:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007078:	4b1c      	ldr	r3, [pc, #112]	@ (80070ec <__pow5mult+0xac>)
 800707a:	481d      	ldr	r0, [pc, #116]	@ (80070f0 <__pow5mult+0xb0>)
 800707c:	f001 fb56 	bl	800872c <__assert_func>
 8007080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007084:	6004      	str	r4, [r0, #0]
 8007086:	60c4      	str	r4, [r0, #12]
 8007088:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800708c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007090:	b94c      	cbnz	r4, 80070a6 <__pow5mult+0x66>
 8007092:	f240 2171 	movw	r1, #625	@ 0x271
 8007096:	4638      	mov	r0, r7
 8007098:	f7ff ff1a 	bl	8006ed0 <__i2b>
 800709c:	2300      	movs	r3, #0
 800709e:	4604      	mov	r4, r0
 80070a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80070a4:	6003      	str	r3, [r0, #0]
 80070a6:	f04f 0900 	mov.w	r9, #0
 80070aa:	07eb      	lsls	r3, r5, #31
 80070ac:	d50a      	bpl.n	80070c4 <__pow5mult+0x84>
 80070ae:	4631      	mov	r1, r6
 80070b0:	4622      	mov	r2, r4
 80070b2:	4638      	mov	r0, r7
 80070b4:	f7ff ff22 	bl	8006efc <__multiply>
 80070b8:	4680      	mov	r8, r0
 80070ba:	4631      	mov	r1, r6
 80070bc:	4638      	mov	r0, r7
 80070be:	f7ff fe09 	bl	8006cd4 <_Bfree>
 80070c2:	4646      	mov	r6, r8
 80070c4:	106d      	asrs	r5, r5, #1
 80070c6:	d00b      	beq.n	80070e0 <__pow5mult+0xa0>
 80070c8:	6820      	ldr	r0, [r4, #0]
 80070ca:	b938      	cbnz	r0, 80070dc <__pow5mult+0x9c>
 80070cc:	4622      	mov	r2, r4
 80070ce:	4621      	mov	r1, r4
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff ff13 	bl	8006efc <__multiply>
 80070d6:	6020      	str	r0, [r4, #0]
 80070d8:	f8c0 9000 	str.w	r9, [r0]
 80070dc:	4604      	mov	r4, r0
 80070de:	e7e4      	b.n	80070aa <__pow5mult+0x6a>
 80070e0:	4630      	mov	r0, r6
 80070e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070e6:	bf00      	nop
 80070e8:	08009638 	.word	0x08009638
 80070ec:	080094a8 	.word	0x080094a8
 80070f0:	08009528 	.word	0x08009528

080070f4 <__lshift>:
 80070f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f8:	460c      	mov	r4, r1
 80070fa:	4607      	mov	r7, r0
 80070fc:	4691      	mov	r9, r2
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	6849      	ldr	r1, [r1, #4]
 8007102:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800710c:	f108 0601 	add.w	r6, r8, #1
 8007110:	42b3      	cmp	r3, r6
 8007112:	db0b      	blt.n	800712c <__lshift+0x38>
 8007114:	4638      	mov	r0, r7
 8007116:	f7ff fd9d 	bl	8006c54 <_Balloc>
 800711a:	4605      	mov	r5, r0
 800711c:	b948      	cbnz	r0, 8007132 <__lshift+0x3e>
 800711e:	4602      	mov	r2, r0
 8007120:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007124:	4b27      	ldr	r3, [pc, #156]	@ (80071c4 <__lshift+0xd0>)
 8007126:	4828      	ldr	r0, [pc, #160]	@ (80071c8 <__lshift+0xd4>)
 8007128:	f001 fb00 	bl	800872c <__assert_func>
 800712c:	3101      	adds	r1, #1
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	e7ee      	b.n	8007110 <__lshift+0x1c>
 8007132:	2300      	movs	r3, #0
 8007134:	f100 0114 	add.w	r1, r0, #20
 8007138:	f100 0210 	add.w	r2, r0, #16
 800713c:	4618      	mov	r0, r3
 800713e:	4553      	cmp	r3, sl
 8007140:	db33      	blt.n	80071aa <__lshift+0xb6>
 8007142:	6920      	ldr	r0, [r4, #16]
 8007144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007148:	f104 0314 	add.w	r3, r4, #20
 800714c:	f019 091f 	ands.w	r9, r9, #31
 8007150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007154:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007158:	d02b      	beq.n	80071b2 <__lshift+0xbe>
 800715a:	468a      	mov	sl, r1
 800715c:	2200      	movs	r2, #0
 800715e:	f1c9 0e20 	rsb	lr, r9, #32
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	fa00 f009 	lsl.w	r0, r0, r9
 8007168:	4310      	orrs	r0, r2
 800716a:	f84a 0b04 	str.w	r0, [sl], #4
 800716e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007172:	459c      	cmp	ip, r3
 8007174:	fa22 f20e 	lsr.w	r2, r2, lr
 8007178:	d8f3      	bhi.n	8007162 <__lshift+0x6e>
 800717a:	ebac 0304 	sub.w	r3, ip, r4
 800717e:	3b15      	subs	r3, #21
 8007180:	f023 0303 	bic.w	r3, r3, #3
 8007184:	3304      	adds	r3, #4
 8007186:	f104 0015 	add.w	r0, r4, #21
 800718a:	4560      	cmp	r0, ip
 800718c:	bf88      	it	hi
 800718e:	2304      	movhi	r3, #4
 8007190:	50ca      	str	r2, [r1, r3]
 8007192:	b10a      	cbz	r2, 8007198 <__lshift+0xa4>
 8007194:	f108 0602 	add.w	r6, r8, #2
 8007198:	3e01      	subs	r6, #1
 800719a:	4638      	mov	r0, r7
 800719c:	4621      	mov	r1, r4
 800719e:	612e      	str	r6, [r5, #16]
 80071a0:	f7ff fd98 	bl	8006cd4 <_Bfree>
 80071a4:	4628      	mov	r0, r5
 80071a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80071ae:	3301      	adds	r3, #1
 80071b0:	e7c5      	b.n	800713e <__lshift+0x4a>
 80071b2:	3904      	subs	r1, #4
 80071b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b8:	459c      	cmp	ip, r3
 80071ba:	f841 2f04 	str.w	r2, [r1, #4]!
 80071be:	d8f9      	bhi.n	80071b4 <__lshift+0xc0>
 80071c0:	e7ea      	b.n	8007198 <__lshift+0xa4>
 80071c2:	bf00      	nop
 80071c4:	08009517 	.word	0x08009517
 80071c8:	08009528 	.word	0x08009528

080071cc <__mcmp>:
 80071cc:	4603      	mov	r3, r0
 80071ce:	690a      	ldr	r2, [r1, #16]
 80071d0:	6900      	ldr	r0, [r0, #16]
 80071d2:	b530      	push	{r4, r5, lr}
 80071d4:	1a80      	subs	r0, r0, r2
 80071d6:	d10e      	bne.n	80071f6 <__mcmp+0x2a>
 80071d8:	3314      	adds	r3, #20
 80071da:	3114      	adds	r1, #20
 80071dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80071e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80071e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071ec:	4295      	cmp	r5, r2
 80071ee:	d003      	beq.n	80071f8 <__mcmp+0x2c>
 80071f0:	d205      	bcs.n	80071fe <__mcmp+0x32>
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295
 80071f6:	bd30      	pop	{r4, r5, pc}
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	d3f3      	bcc.n	80071e4 <__mcmp+0x18>
 80071fc:	e7fb      	b.n	80071f6 <__mcmp+0x2a>
 80071fe:	2001      	movs	r0, #1
 8007200:	e7f9      	b.n	80071f6 <__mcmp+0x2a>
	...

08007204 <__mdiff>:
 8007204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	4689      	mov	r9, r1
 800720a:	4606      	mov	r6, r0
 800720c:	4611      	mov	r1, r2
 800720e:	4648      	mov	r0, r9
 8007210:	4614      	mov	r4, r2
 8007212:	f7ff ffdb 	bl	80071cc <__mcmp>
 8007216:	1e05      	subs	r5, r0, #0
 8007218:	d112      	bne.n	8007240 <__mdiff+0x3c>
 800721a:	4629      	mov	r1, r5
 800721c:	4630      	mov	r0, r6
 800721e:	f7ff fd19 	bl	8006c54 <_Balloc>
 8007222:	4602      	mov	r2, r0
 8007224:	b928      	cbnz	r0, 8007232 <__mdiff+0x2e>
 8007226:	f240 2137 	movw	r1, #567	@ 0x237
 800722a:	4b3e      	ldr	r3, [pc, #248]	@ (8007324 <__mdiff+0x120>)
 800722c:	483e      	ldr	r0, [pc, #248]	@ (8007328 <__mdiff+0x124>)
 800722e:	f001 fa7d 	bl	800872c <__assert_func>
 8007232:	2301      	movs	r3, #1
 8007234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007238:	4610      	mov	r0, r2
 800723a:	b003      	add	sp, #12
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	bfbc      	itt	lt
 8007242:	464b      	movlt	r3, r9
 8007244:	46a1      	movlt	r9, r4
 8007246:	4630      	mov	r0, r6
 8007248:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800724c:	bfba      	itte	lt
 800724e:	461c      	movlt	r4, r3
 8007250:	2501      	movlt	r5, #1
 8007252:	2500      	movge	r5, #0
 8007254:	f7ff fcfe 	bl	8006c54 <_Balloc>
 8007258:	4602      	mov	r2, r0
 800725a:	b918      	cbnz	r0, 8007264 <__mdiff+0x60>
 800725c:	f240 2145 	movw	r1, #581	@ 0x245
 8007260:	4b30      	ldr	r3, [pc, #192]	@ (8007324 <__mdiff+0x120>)
 8007262:	e7e3      	b.n	800722c <__mdiff+0x28>
 8007264:	f100 0b14 	add.w	fp, r0, #20
 8007268:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800726c:	f109 0310 	add.w	r3, r9, #16
 8007270:	60c5      	str	r5, [r0, #12]
 8007272:	f04f 0c00 	mov.w	ip, #0
 8007276:	f109 0514 	add.w	r5, r9, #20
 800727a:	46d9      	mov	r9, fp
 800727c:	6926      	ldr	r6, [r4, #16]
 800727e:	f104 0e14 	add.w	lr, r4, #20
 8007282:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007286:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800728a:	9301      	str	r3, [sp, #4]
 800728c:	9b01      	ldr	r3, [sp, #4]
 800728e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007292:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007296:	b281      	uxth	r1, r0
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	fa1f f38a 	uxth.w	r3, sl
 800729e:	1a5b      	subs	r3, r3, r1
 80072a0:	0c00      	lsrs	r0, r0, #16
 80072a2:	4463      	add	r3, ip
 80072a4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80072a8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80072b2:	4576      	cmp	r6, lr
 80072b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072b8:	f849 3b04 	str.w	r3, [r9], #4
 80072bc:	d8e6      	bhi.n	800728c <__mdiff+0x88>
 80072be:	1b33      	subs	r3, r6, r4
 80072c0:	3b15      	subs	r3, #21
 80072c2:	f023 0303 	bic.w	r3, r3, #3
 80072c6:	3415      	adds	r4, #21
 80072c8:	3304      	adds	r3, #4
 80072ca:	42a6      	cmp	r6, r4
 80072cc:	bf38      	it	cc
 80072ce:	2304      	movcc	r3, #4
 80072d0:	441d      	add	r5, r3
 80072d2:	445b      	add	r3, fp
 80072d4:	461e      	mov	r6, r3
 80072d6:	462c      	mov	r4, r5
 80072d8:	4544      	cmp	r4, r8
 80072da:	d30e      	bcc.n	80072fa <__mdiff+0xf6>
 80072dc:	f108 0103 	add.w	r1, r8, #3
 80072e0:	1b49      	subs	r1, r1, r5
 80072e2:	f021 0103 	bic.w	r1, r1, #3
 80072e6:	3d03      	subs	r5, #3
 80072e8:	45a8      	cmp	r8, r5
 80072ea:	bf38      	it	cc
 80072ec:	2100      	movcc	r1, #0
 80072ee:	440b      	add	r3, r1
 80072f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072f4:	b199      	cbz	r1, 800731e <__mdiff+0x11a>
 80072f6:	6117      	str	r7, [r2, #16]
 80072f8:	e79e      	b.n	8007238 <__mdiff+0x34>
 80072fa:	46e6      	mov	lr, ip
 80072fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007300:	fa1f fc81 	uxth.w	ip, r1
 8007304:	44f4      	add	ip, lr
 8007306:	0c08      	lsrs	r0, r1, #16
 8007308:	4471      	add	r1, lr
 800730a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800730e:	b289      	uxth	r1, r1
 8007310:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007314:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007318:	f846 1b04 	str.w	r1, [r6], #4
 800731c:	e7dc      	b.n	80072d8 <__mdiff+0xd4>
 800731e:	3f01      	subs	r7, #1
 8007320:	e7e6      	b.n	80072f0 <__mdiff+0xec>
 8007322:	bf00      	nop
 8007324:	08009517 	.word	0x08009517
 8007328:	08009528 	.word	0x08009528

0800732c <__ulp>:
 800732c:	4b0e      	ldr	r3, [pc, #56]	@ (8007368 <__ulp+0x3c>)
 800732e:	400b      	ands	r3, r1
 8007330:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007334:	2b00      	cmp	r3, #0
 8007336:	dc08      	bgt.n	800734a <__ulp+0x1e>
 8007338:	425b      	negs	r3, r3
 800733a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800733e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007342:	da04      	bge.n	800734e <__ulp+0x22>
 8007344:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007348:	4113      	asrs	r3, r2
 800734a:	2200      	movs	r2, #0
 800734c:	e008      	b.n	8007360 <__ulp+0x34>
 800734e:	f1a2 0314 	sub.w	r3, r2, #20
 8007352:	2b1e      	cmp	r3, #30
 8007354:	bfd6      	itet	le
 8007356:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800735a:	2201      	movgt	r2, #1
 800735c:	40da      	lsrle	r2, r3
 800735e:	2300      	movs	r3, #0
 8007360:	4619      	mov	r1, r3
 8007362:	4610      	mov	r0, r2
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	7ff00000 	.word	0x7ff00000

0800736c <__b2d>:
 800736c:	6902      	ldr	r2, [r0, #16]
 800736e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007370:	f100 0614 	add.w	r6, r0, #20
 8007374:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007378:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800737c:	4f1e      	ldr	r7, [pc, #120]	@ (80073f8 <__b2d+0x8c>)
 800737e:	4620      	mov	r0, r4
 8007380:	f7ff fd5a 	bl	8006e38 <__hi0bits>
 8007384:	4603      	mov	r3, r0
 8007386:	f1c0 0020 	rsb	r0, r0, #32
 800738a:	2b0a      	cmp	r3, #10
 800738c:	f1a2 0504 	sub.w	r5, r2, #4
 8007390:	6008      	str	r0, [r1, #0]
 8007392:	dc12      	bgt.n	80073ba <__b2d+0x4e>
 8007394:	42ae      	cmp	r6, r5
 8007396:	bf2c      	ite	cs
 8007398:	2200      	movcs	r2, #0
 800739a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800739e:	f1c3 0c0b 	rsb	ip, r3, #11
 80073a2:	3315      	adds	r3, #21
 80073a4:	fa24 fe0c 	lsr.w	lr, r4, ip
 80073a8:	fa04 f303 	lsl.w	r3, r4, r3
 80073ac:	fa22 f20c 	lsr.w	r2, r2, ip
 80073b0:	ea4e 0107 	orr.w	r1, lr, r7
 80073b4:	431a      	orrs	r2, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ba:	42ae      	cmp	r6, r5
 80073bc:	bf36      	itet	cc
 80073be:	f1a2 0508 	subcc.w	r5, r2, #8
 80073c2:	2200      	movcs	r2, #0
 80073c4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80073c8:	3b0b      	subs	r3, #11
 80073ca:	d012      	beq.n	80073f2 <__b2d+0x86>
 80073cc:	f1c3 0720 	rsb	r7, r3, #32
 80073d0:	fa22 f107 	lsr.w	r1, r2, r7
 80073d4:	409c      	lsls	r4, r3
 80073d6:	430c      	orrs	r4, r1
 80073d8:	42b5      	cmp	r5, r6
 80073da:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80073de:	bf94      	ite	ls
 80073e0:	2400      	movls	r4, #0
 80073e2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80073e6:	409a      	lsls	r2, r3
 80073e8:	40fc      	lsrs	r4, r7
 80073ea:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80073ee:	4322      	orrs	r2, r4
 80073f0:	e7e1      	b.n	80073b6 <__b2d+0x4a>
 80073f2:	ea44 0107 	orr.w	r1, r4, r7
 80073f6:	e7de      	b.n	80073b6 <__b2d+0x4a>
 80073f8:	3ff00000 	.word	0x3ff00000

080073fc <__d2b>:
 80073fc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007400:	2101      	movs	r1, #1
 8007402:	4690      	mov	r8, r2
 8007404:	4699      	mov	r9, r3
 8007406:	9e08      	ldr	r6, [sp, #32]
 8007408:	f7ff fc24 	bl	8006c54 <_Balloc>
 800740c:	4604      	mov	r4, r0
 800740e:	b930      	cbnz	r0, 800741e <__d2b+0x22>
 8007410:	4602      	mov	r2, r0
 8007412:	f240 310f 	movw	r1, #783	@ 0x30f
 8007416:	4b23      	ldr	r3, [pc, #140]	@ (80074a4 <__d2b+0xa8>)
 8007418:	4823      	ldr	r0, [pc, #140]	@ (80074a8 <__d2b+0xac>)
 800741a:	f001 f987 	bl	800872c <__assert_func>
 800741e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007422:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007426:	b10d      	cbz	r5, 800742c <__d2b+0x30>
 8007428:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	f1b8 0300 	subs.w	r3, r8, #0
 8007432:	d024      	beq.n	800747e <__d2b+0x82>
 8007434:	4668      	mov	r0, sp
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	f7ff fd1d 	bl	8006e76 <__lo0bits>
 800743c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007440:	b1d8      	cbz	r0, 800747a <__d2b+0x7e>
 8007442:	f1c0 0320 	rsb	r3, r0, #32
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	430b      	orrs	r3, r1
 800744c:	40c2      	lsrs	r2, r0
 800744e:	6163      	str	r3, [r4, #20]
 8007450:	9201      	str	r2, [sp, #4]
 8007452:	9b01      	ldr	r3, [sp, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	bf0c      	ite	eq
 8007458:	2201      	moveq	r2, #1
 800745a:	2202      	movne	r2, #2
 800745c:	61a3      	str	r3, [r4, #24]
 800745e:	6122      	str	r2, [r4, #16]
 8007460:	b1ad      	cbz	r5, 800748e <__d2b+0x92>
 8007462:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007466:	4405      	add	r5, r0
 8007468:	6035      	str	r5, [r6, #0]
 800746a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800746e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007470:	6018      	str	r0, [r3, #0]
 8007472:	4620      	mov	r0, r4
 8007474:	b002      	add	sp, #8
 8007476:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800747a:	6161      	str	r1, [r4, #20]
 800747c:	e7e9      	b.n	8007452 <__d2b+0x56>
 800747e:	a801      	add	r0, sp, #4
 8007480:	f7ff fcf9 	bl	8006e76 <__lo0bits>
 8007484:	9b01      	ldr	r3, [sp, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	6163      	str	r3, [r4, #20]
 800748a:	3020      	adds	r0, #32
 800748c:	e7e7      	b.n	800745e <__d2b+0x62>
 800748e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007492:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007496:	6030      	str	r0, [r6, #0]
 8007498:	6918      	ldr	r0, [r3, #16]
 800749a:	f7ff fccd 	bl	8006e38 <__hi0bits>
 800749e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074a2:	e7e4      	b.n	800746e <__d2b+0x72>
 80074a4:	08009517 	.word	0x08009517
 80074a8:	08009528 	.word	0x08009528

080074ac <__ratio>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	b085      	sub	sp, #20
 80074b2:	e9cd 1000 	strd	r1, r0, [sp]
 80074b6:	a902      	add	r1, sp, #8
 80074b8:	f7ff ff58 	bl	800736c <__b2d>
 80074bc:	468b      	mov	fp, r1
 80074be:	4606      	mov	r6, r0
 80074c0:	460f      	mov	r7, r1
 80074c2:	9800      	ldr	r0, [sp, #0]
 80074c4:	a903      	add	r1, sp, #12
 80074c6:	f7ff ff51 	bl	800736c <__b2d>
 80074ca:	460d      	mov	r5, r1
 80074cc:	9b01      	ldr	r3, [sp, #4]
 80074ce:	4689      	mov	r9, r1
 80074d0:	6919      	ldr	r1, [r3, #16]
 80074d2:	9b00      	ldr	r3, [sp, #0]
 80074d4:	4604      	mov	r4, r0
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	4630      	mov	r0, r6
 80074da:	1ac9      	subs	r1, r1, r3
 80074dc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bfcd      	iteet	gt
 80074ea:	463a      	movgt	r2, r7
 80074ec:	462a      	movle	r2, r5
 80074ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80074f2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80074f6:	bfd8      	it	le
 80074f8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80074fc:	464b      	mov	r3, r9
 80074fe:	4622      	mov	r2, r4
 8007500:	4659      	mov	r1, fp
 8007502:	f7f9 f913 	bl	800072c <__aeabi_ddiv>
 8007506:	b005      	add	sp, #20
 8007508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800750c <__copybits>:
 800750c:	3901      	subs	r1, #1
 800750e:	b570      	push	{r4, r5, r6, lr}
 8007510:	1149      	asrs	r1, r1, #5
 8007512:	6914      	ldr	r4, [r2, #16]
 8007514:	3101      	adds	r1, #1
 8007516:	f102 0314 	add.w	r3, r2, #20
 800751a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800751e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007522:	1f05      	subs	r5, r0, #4
 8007524:	42a3      	cmp	r3, r4
 8007526:	d30c      	bcc.n	8007542 <__copybits+0x36>
 8007528:	1aa3      	subs	r3, r4, r2
 800752a:	3b11      	subs	r3, #17
 800752c:	f023 0303 	bic.w	r3, r3, #3
 8007530:	3211      	adds	r2, #17
 8007532:	42a2      	cmp	r2, r4
 8007534:	bf88      	it	hi
 8007536:	2300      	movhi	r3, #0
 8007538:	4418      	add	r0, r3
 800753a:	2300      	movs	r3, #0
 800753c:	4288      	cmp	r0, r1
 800753e:	d305      	bcc.n	800754c <__copybits+0x40>
 8007540:	bd70      	pop	{r4, r5, r6, pc}
 8007542:	f853 6b04 	ldr.w	r6, [r3], #4
 8007546:	f845 6f04 	str.w	r6, [r5, #4]!
 800754a:	e7eb      	b.n	8007524 <__copybits+0x18>
 800754c:	f840 3b04 	str.w	r3, [r0], #4
 8007550:	e7f4      	b.n	800753c <__copybits+0x30>

08007552 <__any_on>:
 8007552:	f100 0214 	add.w	r2, r0, #20
 8007556:	6900      	ldr	r0, [r0, #16]
 8007558:	114b      	asrs	r3, r1, #5
 800755a:	4298      	cmp	r0, r3
 800755c:	b510      	push	{r4, lr}
 800755e:	db11      	blt.n	8007584 <__any_on+0x32>
 8007560:	dd0a      	ble.n	8007578 <__any_on+0x26>
 8007562:	f011 011f 	ands.w	r1, r1, #31
 8007566:	d007      	beq.n	8007578 <__any_on+0x26>
 8007568:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800756c:	fa24 f001 	lsr.w	r0, r4, r1
 8007570:	fa00 f101 	lsl.w	r1, r0, r1
 8007574:	428c      	cmp	r4, r1
 8007576:	d10b      	bne.n	8007590 <__any_on+0x3e>
 8007578:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800757c:	4293      	cmp	r3, r2
 800757e:	d803      	bhi.n	8007588 <__any_on+0x36>
 8007580:	2000      	movs	r0, #0
 8007582:	bd10      	pop	{r4, pc}
 8007584:	4603      	mov	r3, r0
 8007586:	e7f7      	b.n	8007578 <__any_on+0x26>
 8007588:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800758c:	2900      	cmp	r1, #0
 800758e:	d0f5      	beq.n	800757c <__any_on+0x2a>
 8007590:	2001      	movs	r0, #1
 8007592:	e7f6      	b.n	8007582 <__any_on+0x30>

08007594 <sulp>:
 8007594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007598:	460f      	mov	r7, r1
 800759a:	4690      	mov	r8, r2
 800759c:	f7ff fec6 	bl	800732c <__ulp>
 80075a0:	4604      	mov	r4, r0
 80075a2:	460d      	mov	r5, r1
 80075a4:	f1b8 0f00 	cmp.w	r8, #0
 80075a8:	d011      	beq.n	80075ce <sulp+0x3a>
 80075aa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80075ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	dd0b      	ble.n	80075ce <sulp+0x3a>
 80075b6:	2400      	movs	r4, #0
 80075b8:	051b      	lsls	r3, r3, #20
 80075ba:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80075be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80075c2:	4622      	mov	r2, r4
 80075c4:	462b      	mov	r3, r5
 80075c6:	f7f8 ff87 	bl	80004d8 <__aeabi_dmul>
 80075ca:	4604      	mov	r4, r0
 80075cc:	460d      	mov	r5, r1
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080075d8 <_strtod_l>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	b09f      	sub	sp, #124	@ 0x7c
 80075de:	9217      	str	r2, [sp, #92]	@ 0x5c
 80075e0:	2200      	movs	r2, #0
 80075e2:	460c      	mov	r4, r1
 80075e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80075e6:	f04f 0a00 	mov.w	sl, #0
 80075ea:	f04f 0b00 	mov.w	fp, #0
 80075ee:	460a      	mov	r2, r1
 80075f0:	9005      	str	r0, [sp, #20]
 80075f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80075f4:	7811      	ldrb	r1, [r2, #0]
 80075f6:	292b      	cmp	r1, #43	@ 0x2b
 80075f8:	d048      	beq.n	800768c <_strtod_l+0xb4>
 80075fa:	d836      	bhi.n	800766a <_strtod_l+0x92>
 80075fc:	290d      	cmp	r1, #13
 80075fe:	d830      	bhi.n	8007662 <_strtod_l+0x8a>
 8007600:	2908      	cmp	r1, #8
 8007602:	d830      	bhi.n	8007666 <_strtod_l+0x8e>
 8007604:	2900      	cmp	r1, #0
 8007606:	d039      	beq.n	800767c <_strtod_l+0xa4>
 8007608:	2200      	movs	r2, #0
 800760a:	920e      	str	r2, [sp, #56]	@ 0x38
 800760c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800760e:	782a      	ldrb	r2, [r5, #0]
 8007610:	2a30      	cmp	r2, #48	@ 0x30
 8007612:	f040 80b0 	bne.w	8007776 <_strtod_l+0x19e>
 8007616:	786a      	ldrb	r2, [r5, #1]
 8007618:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800761c:	2a58      	cmp	r2, #88	@ 0x58
 800761e:	d16c      	bne.n	80076fa <_strtod_l+0x122>
 8007620:	9302      	str	r3, [sp, #8]
 8007622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007624:	4a8f      	ldr	r2, [pc, #572]	@ (8007864 <_strtod_l+0x28c>)
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	ab1a      	add	r3, sp, #104	@ 0x68
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	9805      	ldr	r0, [sp, #20]
 800762e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007630:	a919      	add	r1, sp, #100	@ 0x64
 8007632:	f001 f915 	bl	8008860 <__gethex>
 8007636:	f010 060f 	ands.w	r6, r0, #15
 800763a:	4604      	mov	r4, r0
 800763c:	d005      	beq.n	800764a <_strtod_l+0x72>
 800763e:	2e06      	cmp	r6, #6
 8007640:	d126      	bne.n	8007690 <_strtod_l+0xb8>
 8007642:	2300      	movs	r3, #0
 8007644:	3501      	adds	r5, #1
 8007646:	9519      	str	r5, [sp, #100]	@ 0x64
 8007648:	930e      	str	r3, [sp, #56]	@ 0x38
 800764a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800764c:	2b00      	cmp	r3, #0
 800764e:	f040 8582 	bne.w	8008156 <_strtod_l+0xb7e>
 8007652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007654:	b1bb      	cbz	r3, 8007686 <_strtod_l+0xae>
 8007656:	4650      	mov	r0, sl
 8007658:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800765c:	b01f      	add	sp, #124	@ 0x7c
 800765e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007662:	2920      	cmp	r1, #32
 8007664:	d1d0      	bne.n	8007608 <_strtod_l+0x30>
 8007666:	3201      	adds	r2, #1
 8007668:	e7c3      	b.n	80075f2 <_strtod_l+0x1a>
 800766a:	292d      	cmp	r1, #45	@ 0x2d
 800766c:	d1cc      	bne.n	8007608 <_strtod_l+0x30>
 800766e:	2101      	movs	r1, #1
 8007670:	910e      	str	r1, [sp, #56]	@ 0x38
 8007672:	1c51      	adds	r1, r2, #1
 8007674:	9119      	str	r1, [sp, #100]	@ 0x64
 8007676:	7852      	ldrb	r2, [r2, #1]
 8007678:	2a00      	cmp	r2, #0
 800767a:	d1c7      	bne.n	800760c <_strtod_l+0x34>
 800767c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800767e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007680:	2b00      	cmp	r3, #0
 8007682:	f040 8566 	bne.w	8008152 <_strtod_l+0xb7a>
 8007686:	4650      	mov	r0, sl
 8007688:	4659      	mov	r1, fp
 800768a:	e7e7      	b.n	800765c <_strtod_l+0x84>
 800768c:	2100      	movs	r1, #0
 800768e:	e7ef      	b.n	8007670 <_strtod_l+0x98>
 8007690:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007692:	b13a      	cbz	r2, 80076a4 <_strtod_l+0xcc>
 8007694:	2135      	movs	r1, #53	@ 0x35
 8007696:	a81c      	add	r0, sp, #112	@ 0x70
 8007698:	f7ff ff38 	bl	800750c <__copybits>
 800769c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800769e:	9805      	ldr	r0, [sp, #20]
 80076a0:	f7ff fb18 	bl	8006cd4 <_Bfree>
 80076a4:	3e01      	subs	r6, #1
 80076a6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80076a8:	2e04      	cmp	r6, #4
 80076aa:	d806      	bhi.n	80076ba <_strtod_l+0xe2>
 80076ac:	e8df f006 	tbb	[pc, r6]
 80076b0:	201d0314 	.word	0x201d0314
 80076b4:	14          	.byte	0x14
 80076b5:	00          	.byte	0x00
 80076b6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80076ba:	05e1      	lsls	r1, r4, #23
 80076bc:	bf48      	it	mi
 80076be:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80076c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076c6:	0d1b      	lsrs	r3, r3, #20
 80076c8:	051b      	lsls	r3, r3, #20
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1bd      	bne.n	800764a <_strtod_l+0x72>
 80076ce:	f7fe fb27 	bl	8005d20 <__errno>
 80076d2:	2322      	movs	r3, #34	@ 0x22
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	e7b8      	b.n	800764a <_strtod_l+0x72>
 80076d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80076dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80076e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80076e4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80076e8:	e7e7      	b.n	80076ba <_strtod_l+0xe2>
 80076ea:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007868 <_strtod_l+0x290>
 80076ee:	e7e4      	b.n	80076ba <_strtod_l+0xe2>
 80076f0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80076f4:	f04f 3aff 	mov.w	sl, #4294967295
 80076f8:	e7df      	b.n	80076ba <_strtod_l+0xe2>
 80076fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076fc:	1c5a      	adds	r2, r3, #1
 80076fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b30      	cmp	r3, #48	@ 0x30
 8007704:	d0f9      	beq.n	80076fa <_strtod_l+0x122>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d09f      	beq.n	800764a <_strtod_l+0x72>
 800770a:	2301      	movs	r3, #1
 800770c:	2700      	movs	r7, #0
 800770e:	220a      	movs	r2, #10
 8007710:	46b9      	mov	r9, r7
 8007712:	9308      	str	r3, [sp, #32]
 8007714:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007716:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007718:	930c      	str	r3, [sp, #48]	@ 0x30
 800771a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800771c:	7805      	ldrb	r5, [r0, #0]
 800771e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007722:	b2d9      	uxtb	r1, r3
 8007724:	2909      	cmp	r1, #9
 8007726:	d928      	bls.n	800777a <_strtod_l+0x1a2>
 8007728:	2201      	movs	r2, #1
 800772a:	4950      	ldr	r1, [pc, #320]	@ (800786c <_strtod_l+0x294>)
 800772c:	f000 ffc8 	bl	80086c0 <strncmp>
 8007730:	2800      	cmp	r0, #0
 8007732:	d032      	beq.n	800779a <_strtod_l+0x1c2>
 8007734:	2000      	movs	r0, #0
 8007736:	462a      	mov	r2, r5
 8007738:	4603      	mov	r3, r0
 800773a:	464d      	mov	r5, r9
 800773c:	900a      	str	r0, [sp, #40]	@ 0x28
 800773e:	2a65      	cmp	r2, #101	@ 0x65
 8007740:	d001      	beq.n	8007746 <_strtod_l+0x16e>
 8007742:	2a45      	cmp	r2, #69	@ 0x45
 8007744:	d114      	bne.n	8007770 <_strtod_l+0x198>
 8007746:	b91d      	cbnz	r5, 8007750 <_strtod_l+0x178>
 8007748:	9a08      	ldr	r2, [sp, #32]
 800774a:	4302      	orrs	r2, r0
 800774c:	d096      	beq.n	800767c <_strtod_l+0xa4>
 800774e:	2500      	movs	r5, #0
 8007750:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007752:	1c62      	adds	r2, r4, #1
 8007754:	9219      	str	r2, [sp, #100]	@ 0x64
 8007756:	7862      	ldrb	r2, [r4, #1]
 8007758:	2a2b      	cmp	r2, #43	@ 0x2b
 800775a:	d07a      	beq.n	8007852 <_strtod_l+0x27a>
 800775c:	2a2d      	cmp	r2, #45	@ 0x2d
 800775e:	d07e      	beq.n	800785e <_strtod_l+0x286>
 8007760:	f04f 0c00 	mov.w	ip, #0
 8007764:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007768:	2909      	cmp	r1, #9
 800776a:	f240 8085 	bls.w	8007878 <_strtod_l+0x2a0>
 800776e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007770:	f04f 0800 	mov.w	r8, #0
 8007774:	e0a5      	b.n	80078c2 <_strtod_l+0x2ea>
 8007776:	2300      	movs	r3, #0
 8007778:	e7c8      	b.n	800770c <_strtod_l+0x134>
 800777a:	f1b9 0f08 	cmp.w	r9, #8
 800777e:	bfd8      	it	le
 8007780:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007782:	f100 0001 	add.w	r0, r0, #1
 8007786:	bfd6      	itet	le
 8007788:	fb02 3301 	mlale	r3, r2, r1, r3
 800778c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007790:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007792:	f109 0901 	add.w	r9, r9, #1
 8007796:	9019      	str	r0, [sp, #100]	@ 0x64
 8007798:	e7bf      	b.n	800771a <_strtod_l+0x142>
 800779a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	9219      	str	r2, [sp, #100]	@ 0x64
 80077a0:	785a      	ldrb	r2, [r3, #1]
 80077a2:	f1b9 0f00 	cmp.w	r9, #0
 80077a6:	d03b      	beq.n	8007820 <_strtod_l+0x248>
 80077a8:	464d      	mov	r5, r9
 80077aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80077ac:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80077b0:	2b09      	cmp	r3, #9
 80077b2:	d912      	bls.n	80077da <_strtod_l+0x202>
 80077b4:	2301      	movs	r3, #1
 80077b6:	e7c2      	b.n	800773e <_strtod_l+0x166>
 80077b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077ba:	3001      	adds	r0, #1
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	9219      	str	r2, [sp, #100]	@ 0x64
 80077c0:	785a      	ldrb	r2, [r3, #1]
 80077c2:	2a30      	cmp	r2, #48	@ 0x30
 80077c4:	d0f8      	beq.n	80077b8 <_strtod_l+0x1e0>
 80077c6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80077ca:	2b08      	cmp	r3, #8
 80077cc:	f200 84c8 	bhi.w	8008160 <_strtod_l+0xb88>
 80077d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80077d2:	2000      	movs	r0, #0
 80077d4:	4605      	mov	r5, r0
 80077d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80077da:	3a30      	subs	r2, #48	@ 0x30
 80077dc:	f100 0301 	add.w	r3, r0, #1
 80077e0:	d018      	beq.n	8007814 <_strtod_l+0x23c>
 80077e2:	462e      	mov	r6, r5
 80077e4:	f04f 0e0a 	mov.w	lr, #10
 80077e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077ea:	4419      	add	r1, r3
 80077ec:	910a      	str	r1, [sp, #40]	@ 0x28
 80077ee:	1c71      	adds	r1, r6, #1
 80077f0:	eba1 0c05 	sub.w	ip, r1, r5
 80077f4:	4563      	cmp	r3, ip
 80077f6:	dc15      	bgt.n	8007824 <_strtod_l+0x24c>
 80077f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80077fc:	182b      	adds	r3, r5, r0
 80077fe:	2b08      	cmp	r3, #8
 8007800:	f105 0501 	add.w	r5, r5, #1
 8007804:	4405      	add	r5, r0
 8007806:	dc1a      	bgt.n	800783e <_strtod_l+0x266>
 8007808:	230a      	movs	r3, #10
 800780a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800780c:	fb03 2301 	mla	r3, r3, r1, r2
 8007810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007812:	2300      	movs	r3, #0
 8007814:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007816:	4618      	mov	r0, r3
 8007818:	1c51      	adds	r1, r2, #1
 800781a:	9119      	str	r1, [sp, #100]	@ 0x64
 800781c:	7852      	ldrb	r2, [r2, #1]
 800781e:	e7c5      	b.n	80077ac <_strtod_l+0x1d4>
 8007820:	4648      	mov	r0, r9
 8007822:	e7ce      	b.n	80077c2 <_strtod_l+0x1ea>
 8007824:	2e08      	cmp	r6, #8
 8007826:	dc05      	bgt.n	8007834 <_strtod_l+0x25c>
 8007828:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800782a:	fb0e f606 	mul.w	r6, lr, r6
 800782e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007830:	460e      	mov	r6, r1
 8007832:	e7dc      	b.n	80077ee <_strtod_l+0x216>
 8007834:	2910      	cmp	r1, #16
 8007836:	bfd8      	it	le
 8007838:	fb0e f707 	mulle.w	r7, lr, r7
 800783c:	e7f8      	b.n	8007830 <_strtod_l+0x258>
 800783e:	2b0f      	cmp	r3, #15
 8007840:	bfdc      	itt	le
 8007842:	230a      	movle	r3, #10
 8007844:	fb03 2707 	mlale	r7, r3, r7, r2
 8007848:	e7e3      	b.n	8007812 <_strtod_l+0x23a>
 800784a:	2300      	movs	r3, #0
 800784c:	930a      	str	r3, [sp, #40]	@ 0x28
 800784e:	2301      	movs	r3, #1
 8007850:	e77a      	b.n	8007748 <_strtod_l+0x170>
 8007852:	f04f 0c00 	mov.w	ip, #0
 8007856:	1ca2      	adds	r2, r4, #2
 8007858:	9219      	str	r2, [sp, #100]	@ 0x64
 800785a:	78a2      	ldrb	r2, [r4, #2]
 800785c:	e782      	b.n	8007764 <_strtod_l+0x18c>
 800785e:	f04f 0c01 	mov.w	ip, #1
 8007862:	e7f8      	b.n	8007856 <_strtod_l+0x27e>
 8007864:	0800974c 	.word	0x0800974c
 8007868:	7ff00000 	.word	0x7ff00000
 800786c:	08009581 	.word	0x08009581
 8007870:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007872:	1c51      	adds	r1, r2, #1
 8007874:	9119      	str	r1, [sp, #100]	@ 0x64
 8007876:	7852      	ldrb	r2, [r2, #1]
 8007878:	2a30      	cmp	r2, #48	@ 0x30
 800787a:	d0f9      	beq.n	8007870 <_strtod_l+0x298>
 800787c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007880:	2908      	cmp	r1, #8
 8007882:	f63f af75 	bhi.w	8007770 <_strtod_l+0x198>
 8007886:	f04f 080a 	mov.w	r8, #10
 800788a:	3a30      	subs	r2, #48	@ 0x30
 800788c:	9209      	str	r2, [sp, #36]	@ 0x24
 800788e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007890:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007892:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007894:	1c56      	adds	r6, r2, #1
 8007896:	9619      	str	r6, [sp, #100]	@ 0x64
 8007898:	7852      	ldrb	r2, [r2, #1]
 800789a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800789e:	f1be 0f09 	cmp.w	lr, #9
 80078a2:	d939      	bls.n	8007918 <_strtod_l+0x340>
 80078a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80078a6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80078aa:	1a76      	subs	r6, r6, r1
 80078ac:	2e08      	cmp	r6, #8
 80078ae:	dc03      	bgt.n	80078b8 <_strtod_l+0x2e0>
 80078b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078b2:	4588      	cmp	r8, r1
 80078b4:	bfa8      	it	ge
 80078b6:	4688      	movge	r8, r1
 80078b8:	f1bc 0f00 	cmp.w	ip, #0
 80078bc:	d001      	beq.n	80078c2 <_strtod_l+0x2ea>
 80078be:	f1c8 0800 	rsb	r8, r8, #0
 80078c2:	2d00      	cmp	r5, #0
 80078c4:	d14e      	bne.n	8007964 <_strtod_l+0x38c>
 80078c6:	9908      	ldr	r1, [sp, #32]
 80078c8:	4308      	orrs	r0, r1
 80078ca:	f47f aebe 	bne.w	800764a <_strtod_l+0x72>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f47f aed4 	bne.w	800767c <_strtod_l+0xa4>
 80078d4:	2a69      	cmp	r2, #105	@ 0x69
 80078d6:	d028      	beq.n	800792a <_strtod_l+0x352>
 80078d8:	dc25      	bgt.n	8007926 <_strtod_l+0x34e>
 80078da:	2a49      	cmp	r2, #73	@ 0x49
 80078dc:	d025      	beq.n	800792a <_strtod_l+0x352>
 80078de:	2a4e      	cmp	r2, #78	@ 0x4e
 80078e0:	f47f aecc 	bne.w	800767c <_strtod_l+0xa4>
 80078e4:	4999      	ldr	r1, [pc, #612]	@ (8007b4c <_strtod_l+0x574>)
 80078e6:	a819      	add	r0, sp, #100	@ 0x64
 80078e8:	f001 f9dc 	bl	8008ca4 <__match>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f43f aec5 	beq.w	800767c <_strtod_l+0xa4>
 80078f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	2b28      	cmp	r3, #40	@ 0x28
 80078f8:	d12e      	bne.n	8007958 <_strtod_l+0x380>
 80078fa:	4995      	ldr	r1, [pc, #596]	@ (8007b50 <_strtod_l+0x578>)
 80078fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80078fe:	a819      	add	r0, sp, #100	@ 0x64
 8007900:	f001 f9e4 	bl	8008ccc <__hexnan>
 8007904:	2805      	cmp	r0, #5
 8007906:	d127      	bne.n	8007958 <_strtod_l+0x380>
 8007908:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800790a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800790e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007912:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007916:	e698      	b.n	800764a <_strtod_l+0x72>
 8007918:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800791a:	fb08 2101 	mla	r1, r8, r1, r2
 800791e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007922:	9209      	str	r2, [sp, #36]	@ 0x24
 8007924:	e7b5      	b.n	8007892 <_strtod_l+0x2ba>
 8007926:	2a6e      	cmp	r2, #110	@ 0x6e
 8007928:	e7da      	b.n	80078e0 <_strtod_l+0x308>
 800792a:	498a      	ldr	r1, [pc, #552]	@ (8007b54 <_strtod_l+0x57c>)
 800792c:	a819      	add	r0, sp, #100	@ 0x64
 800792e:	f001 f9b9 	bl	8008ca4 <__match>
 8007932:	2800      	cmp	r0, #0
 8007934:	f43f aea2 	beq.w	800767c <_strtod_l+0xa4>
 8007938:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800793a:	4987      	ldr	r1, [pc, #540]	@ (8007b58 <_strtod_l+0x580>)
 800793c:	3b01      	subs	r3, #1
 800793e:	a819      	add	r0, sp, #100	@ 0x64
 8007940:	9319      	str	r3, [sp, #100]	@ 0x64
 8007942:	f001 f9af 	bl	8008ca4 <__match>
 8007946:	b910      	cbnz	r0, 800794e <_strtod_l+0x376>
 8007948:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800794a:	3301      	adds	r3, #1
 800794c:	9319      	str	r3, [sp, #100]	@ 0x64
 800794e:	f04f 0a00 	mov.w	sl, #0
 8007952:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8007b5c <_strtod_l+0x584>
 8007956:	e678      	b.n	800764a <_strtod_l+0x72>
 8007958:	4881      	ldr	r0, [pc, #516]	@ (8007b60 <_strtod_l+0x588>)
 800795a:	f000 fee1 	bl	8008720 <nan>
 800795e:	4682      	mov	sl, r0
 8007960:	468b      	mov	fp, r1
 8007962:	e672      	b.n	800764a <_strtod_l+0x72>
 8007964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007966:	f1b9 0f00 	cmp.w	r9, #0
 800796a:	bf08      	it	eq
 800796c:	46a9      	moveq	r9, r5
 800796e:	eba8 0303 	sub.w	r3, r8, r3
 8007972:	2d10      	cmp	r5, #16
 8007974:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007976:	462c      	mov	r4, r5
 8007978:	9309      	str	r3, [sp, #36]	@ 0x24
 800797a:	bfa8      	it	ge
 800797c:	2410      	movge	r4, #16
 800797e:	f7f8 fd31 	bl	80003e4 <__aeabi_ui2d>
 8007982:	2d09      	cmp	r5, #9
 8007984:	4682      	mov	sl, r0
 8007986:	468b      	mov	fp, r1
 8007988:	dc11      	bgt.n	80079ae <_strtod_l+0x3d6>
 800798a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800798c:	2b00      	cmp	r3, #0
 800798e:	f43f ae5c 	beq.w	800764a <_strtod_l+0x72>
 8007992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007994:	dd76      	ble.n	8007a84 <_strtod_l+0x4ac>
 8007996:	2b16      	cmp	r3, #22
 8007998:	dc5d      	bgt.n	8007a56 <_strtod_l+0x47e>
 800799a:	4972      	ldr	r1, [pc, #456]	@ (8007b64 <_strtod_l+0x58c>)
 800799c:	4652      	mov	r2, sl
 800799e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079a2:	465b      	mov	r3, fp
 80079a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079a8:	f7f8 fd96 	bl	80004d8 <__aeabi_dmul>
 80079ac:	e7d7      	b.n	800795e <_strtod_l+0x386>
 80079ae:	4b6d      	ldr	r3, [pc, #436]	@ (8007b64 <_strtod_l+0x58c>)
 80079b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80079b8:	f7f8 fd8e 	bl	80004d8 <__aeabi_dmul>
 80079bc:	4682      	mov	sl, r0
 80079be:	4638      	mov	r0, r7
 80079c0:	468b      	mov	fp, r1
 80079c2:	f7f8 fd0f 	bl	80003e4 <__aeabi_ui2d>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4650      	mov	r0, sl
 80079cc:	4659      	mov	r1, fp
 80079ce:	f7f8 fbcd 	bl	800016c <__adddf3>
 80079d2:	2d0f      	cmp	r5, #15
 80079d4:	4682      	mov	sl, r0
 80079d6:	468b      	mov	fp, r1
 80079d8:	ddd7      	ble.n	800798a <_strtod_l+0x3b2>
 80079da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079dc:	1b2c      	subs	r4, r5, r4
 80079de:	441c      	add	r4, r3
 80079e0:	2c00      	cmp	r4, #0
 80079e2:	f340 8093 	ble.w	8007b0c <_strtod_l+0x534>
 80079e6:	f014 030f 	ands.w	r3, r4, #15
 80079ea:	d00a      	beq.n	8007a02 <_strtod_l+0x42a>
 80079ec:	495d      	ldr	r1, [pc, #372]	@ (8007b64 <_strtod_l+0x58c>)
 80079ee:	4652      	mov	r2, sl
 80079f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079f8:	465b      	mov	r3, fp
 80079fa:	f7f8 fd6d 	bl	80004d8 <__aeabi_dmul>
 80079fe:	4682      	mov	sl, r0
 8007a00:	468b      	mov	fp, r1
 8007a02:	f034 040f 	bics.w	r4, r4, #15
 8007a06:	d073      	beq.n	8007af0 <_strtod_l+0x518>
 8007a08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007a0c:	dd49      	ble.n	8007aa2 <_strtod_l+0x4ca>
 8007a0e:	2400      	movs	r4, #0
 8007a10:	46a0      	mov	r8, r4
 8007a12:	46a1      	mov	r9, r4
 8007a14:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a16:	2322      	movs	r3, #34	@ 0x22
 8007a18:	f04f 0a00 	mov.w	sl, #0
 8007a1c:	9a05      	ldr	r2, [sp, #20]
 8007a1e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8007b5c <_strtod_l+0x584>
 8007a22:	6013      	str	r3, [r2, #0]
 8007a24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f43f ae0f 	beq.w	800764a <_strtod_l+0x72>
 8007a2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a2e:	9805      	ldr	r0, [sp, #20]
 8007a30:	f7ff f950 	bl	8006cd4 <_Bfree>
 8007a34:	4649      	mov	r1, r9
 8007a36:	9805      	ldr	r0, [sp, #20]
 8007a38:	f7ff f94c 	bl	8006cd4 <_Bfree>
 8007a3c:	4641      	mov	r1, r8
 8007a3e:	9805      	ldr	r0, [sp, #20]
 8007a40:	f7ff f948 	bl	8006cd4 <_Bfree>
 8007a44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a46:	9805      	ldr	r0, [sp, #20]
 8007a48:	f7ff f944 	bl	8006cd4 <_Bfree>
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	9805      	ldr	r0, [sp, #20]
 8007a50:	f7ff f940 	bl	8006cd4 <_Bfree>
 8007a54:	e5f9      	b.n	800764a <_strtod_l+0x72>
 8007a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	dbbc      	blt.n	80079da <_strtod_l+0x402>
 8007a60:	4c40      	ldr	r4, [pc, #256]	@ (8007b64 <_strtod_l+0x58c>)
 8007a62:	f1c5 050f 	rsb	r5, r5, #15
 8007a66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a70:	465b      	mov	r3, fp
 8007a72:	f7f8 fd31 	bl	80004d8 <__aeabi_dmul>
 8007a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a78:	1b5d      	subs	r5, r3, r5
 8007a7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a82:	e791      	b.n	80079a8 <_strtod_l+0x3d0>
 8007a84:	3316      	adds	r3, #22
 8007a86:	dba8      	blt.n	80079da <_strtod_l+0x402>
 8007a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	eba3 0808 	sub.w	r8, r3, r8
 8007a90:	4b34      	ldr	r3, [pc, #208]	@ (8007b64 <_strtod_l+0x58c>)
 8007a92:	4659      	mov	r1, fp
 8007a94:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007a98:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007a9c:	f7f8 fe46 	bl	800072c <__aeabi_ddiv>
 8007aa0:	e75d      	b.n	800795e <_strtod_l+0x386>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	4650      	mov	r0, sl
 8007aa6:	4659      	mov	r1, fp
 8007aa8:	461e      	mov	r6, r3
 8007aaa:	4f2f      	ldr	r7, [pc, #188]	@ (8007b68 <_strtod_l+0x590>)
 8007aac:	1124      	asrs	r4, r4, #4
 8007aae:	2c01      	cmp	r4, #1
 8007ab0:	dc21      	bgt.n	8007af6 <_strtod_l+0x51e>
 8007ab2:	b10b      	cbz	r3, 8007ab8 <_strtod_l+0x4e0>
 8007ab4:	4682      	mov	sl, r0
 8007ab6:	468b      	mov	fp, r1
 8007ab8:	492b      	ldr	r1, [pc, #172]	@ (8007b68 <_strtod_l+0x590>)
 8007aba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007abe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007ac2:	4652      	mov	r2, sl
 8007ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ac8:	465b      	mov	r3, fp
 8007aca:	f7f8 fd05 	bl	80004d8 <__aeabi_dmul>
 8007ace:	4b23      	ldr	r3, [pc, #140]	@ (8007b5c <_strtod_l+0x584>)
 8007ad0:	460a      	mov	r2, r1
 8007ad2:	400b      	ands	r3, r1
 8007ad4:	4925      	ldr	r1, [pc, #148]	@ (8007b6c <_strtod_l+0x594>)
 8007ad6:	4682      	mov	sl, r0
 8007ad8:	428b      	cmp	r3, r1
 8007ada:	d898      	bhi.n	8007a0e <_strtod_l+0x436>
 8007adc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007ae0:	428b      	cmp	r3, r1
 8007ae2:	bf86      	itte	hi
 8007ae4:	f04f 3aff 	movhi.w	sl, #4294967295
 8007ae8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8007b70 <_strtod_l+0x598>
 8007aec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007af0:	2300      	movs	r3, #0
 8007af2:	9308      	str	r3, [sp, #32]
 8007af4:	e076      	b.n	8007be4 <_strtod_l+0x60c>
 8007af6:	07e2      	lsls	r2, r4, #31
 8007af8:	d504      	bpl.n	8007b04 <_strtod_l+0x52c>
 8007afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007afe:	f7f8 fceb 	bl	80004d8 <__aeabi_dmul>
 8007b02:	2301      	movs	r3, #1
 8007b04:	3601      	adds	r6, #1
 8007b06:	1064      	asrs	r4, r4, #1
 8007b08:	3708      	adds	r7, #8
 8007b0a:	e7d0      	b.n	8007aae <_strtod_l+0x4d6>
 8007b0c:	d0f0      	beq.n	8007af0 <_strtod_l+0x518>
 8007b0e:	4264      	negs	r4, r4
 8007b10:	f014 020f 	ands.w	r2, r4, #15
 8007b14:	d00a      	beq.n	8007b2c <_strtod_l+0x554>
 8007b16:	4b13      	ldr	r3, [pc, #76]	@ (8007b64 <_strtod_l+0x58c>)
 8007b18:	4650      	mov	r0, sl
 8007b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b1e:	4659      	mov	r1, fp
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	f7f8 fe02 	bl	800072c <__aeabi_ddiv>
 8007b28:	4682      	mov	sl, r0
 8007b2a:	468b      	mov	fp, r1
 8007b2c:	1124      	asrs	r4, r4, #4
 8007b2e:	d0df      	beq.n	8007af0 <_strtod_l+0x518>
 8007b30:	2c1f      	cmp	r4, #31
 8007b32:	dd1f      	ble.n	8007b74 <_strtod_l+0x59c>
 8007b34:	2400      	movs	r4, #0
 8007b36:	46a0      	mov	r8, r4
 8007b38:	46a1      	mov	r9, r4
 8007b3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b3c:	2322      	movs	r3, #34	@ 0x22
 8007b3e:	9a05      	ldr	r2, [sp, #20]
 8007b40:	f04f 0a00 	mov.w	sl, #0
 8007b44:	f04f 0b00 	mov.w	fp, #0
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	e76b      	b.n	8007a24 <_strtod_l+0x44c>
 8007b4c:	0800946f 	.word	0x0800946f
 8007b50:	08009738 	.word	0x08009738
 8007b54:	08009467 	.word	0x08009467
 8007b58:	0800949e 	.word	0x0800949e
 8007b5c:	7ff00000 	.word	0x7ff00000
 8007b60:	080095d7 	.word	0x080095d7
 8007b64:	08009670 	.word	0x08009670
 8007b68:	08009648 	.word	0x08009648
 8007b6c:	7ca00000 	.word	0x7ca00000
 8007b70:	7fefffff 	.word	0x7fefffff
 8007b74:	f014 0310 	ands.w	r3, r4, #16
 8007b78:	bf18      	it	ne
 8007b7a:	236a      	movne	r3, #106	@ 0x6a
 8007b7c:	4650      	mov	r0, sl
 8007b7e:	9308      	str	r3, [sp, #32]
 8007b80:	4659      	mov	r1, fp
 8007b82:	2300      	movs	r3, #0
 8007b84:	4e77      	ldr	r6, [pc, #476]	@ (8007d64 <_strtod_l+0x78c>)
 8007b86:	07e7      	lsls	r7, r4, #31
 8007b88:	d504      	bpl.n	8007b94 <_strtod_l+0x5bc>
 8007b8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b8e:	f7f8 fca3 	bl	80004d8 <__aeabi_dmul>
 8007b92:	2301      	movs	r3, #1
 8007b94:	1064      	asrs	r4, r4, #1
 8007b96:	f106 0608 	add.w	r6, r6, #8
 8007b9a:	d1f4      	bne.n	8007b86 <_strtod_l+0x5ae>
 8007b9c:	b10b      	cbz	r3, 8007ba2 <_strtod_l+0x5ca>
 8007b9e:	4682      	mov	sl, r0
 8007ba0:	468b      	mov	fp, r1
 8007ba2:	9b08      	ldr	r3, [sp, #32]
 8007ba4:	b1b3      	cbz	r3, 8007bd4 <_strtod_l+0x5fc>
 8007ba6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007baa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	4659      	mov	r1, fp
 8007bb2:	dd0f      	ble.n	8007bd4 <_strtod_l+0x5fc>
 8007bb4:	2b1f      	cmp	r3, #31
 8007bb6:	dd58      	ble.n	8007c6a <_strtod_l+0x692>
 8007bb8:	2b34      	cmp	r3, #52	@ 0x34
 8007bba:	bfd8      	it	le
 8007bbc:	f04f 33ff 	movle.w	r3, #4294967295
 8007bc0:	f04f 0a00 	mov.w	sl, #0
 8007bc4:	bfcf      	iteee	gt
 8007bc6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007bca:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007bce:	4093      	lslle	r3, r2
 8007bd0:	ea03 0b01 	andle.w	fp, r3, r1
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	4650      	mov	r0, sl
 8007bda:	4659      	mov	r1, fp
 8007bdc:	f7f8 fee4 	bl	80009a8 <__aeabi_dcmpeq>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d1a7      	bne.n	8007b34 <_strtod_l+0x55c>
 8007be4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007be6:	464a      	mov	r2, r9
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007bec:	462b      	mov	r3, r5
 8007bee:	9805      	ldr	r0, [sp, #20]
 8007bf0:	f7ff f8d8 	bl	8006da4 <__s2b>
 8007bf4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	f43f af09 	beq.w	8007a0e <_strtod_l+0x436>
 8007bfc:	2400      	movs	r4, #0
 8007bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c02:	2a00      	cmp	r2, #0
 8007c04:	eba3 0308 	sub.w	r3, r3, r8
 8007c08:	bfa8      	it	ge
 8007c0a:	2300      	movge	r3, #0
 8007c0c:	46a0      	mov	r8, r4
 8007c0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c10:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007c14:	9316      	str	r3, [sp, #88]	@ 0x58
 8007c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c18:	9805      	ldr	r0, [sp, #20]
 8007c1a:	6859      	ldr	r1, [r3, #4]
 8007c1c:	f7ff f81a 	bl	8006c54 <_Balloc>
 8007c20:	4681      	mov	r9, r0
 8007c22:	2800      	cmp	r0, #0
 8007c24:	f43f aef7 	beq.w	8007a16 <_strtod_l+0x43e>
 8007c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c2a:	300c      	adds	r0, #12
 8007c2c:	691a      	ldr	r2, [r3, #16]
 8007c2e:	f103 010c 	add.w	r1, r3, #12
 8007c32:	3202      	adds	r2, #2
 8007c34:	0092      	lsls	r2, r2, #2
 8007c36:	f000 fd65 	bl	8008704 <memcpy>
 8007c3a:	ab1c      	add	r3, sp, #112	@ 0x70
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	4652      	mov	r2, sl
 8007c44:	465b      	mov	r3, fp
 8007c46:	9805      	ldr	r0, [sp, #20]
 8007c48:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007c4c:	f7ff fbd6 	bl	80073fc <__d2b>
 8007c50:	901a      	str	r0, [sp, #104]	@ 0x68
 8007c52:	2800      	cmp	r0, #0
 8007c54:	f43f aedf 	beq.w	8007a16 <_strtod_l+0x43e>
 8007c58:	2101      	movs	r1, #1
 8007c5a:	9805      	ldr	r0, [sp, #20]
 8007c5c:	f7ff f938 	bl	8006ed0 <__i2b>
 8007c60:	4680      	mov	r8, r0
 8007c62:	b948      	cbnz	r0, 8007c78 <_strtod_l+0x6a0>
 8007c64:	f04f 0800 	mov.w	r8, #0
 8007c68:	e6d5      	b.n	8007a16 <_strtod_l+0x43e>
 8007c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c72:	ea03 0a0a 	and.w	sl, r3, sl
 8007c76:	e7ad      	b.n	8007bd4 <_strtod_l+0x5fc>
 8007c78:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007c7a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007c7c:	2d00      	cmp	r5, #0
 8007c7e:	bfab      	itete	ge
 8007c80:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007c82:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007c84:	18ef      	addge	r7, r5, r3
 8007c86:	1b5e      	sublt	r6, r3, r5
 8007c88:	9b08      	ldr	r3, [sp, #32]
 8007c8a:	bfa8      	it	ge
 8007c8c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007c8e:	eba5 0503 	sub.w	r5, r5, r3
 8007c92:	4415      	add	r5, r2
 8007c94:	4b34      	ldr	r3, [pc, #208]	@ (8007d68 <_strtod_l+0x790>)
 8007c96:	f105 35ff 	add.w	r5, r5, #4294967295
 8007c9a:	bfb8      	it	lt
 8007c9c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007c9e:	429d      	cmp	r5, r3
 8007ca0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007ca4:	da50      	bge.n	8007d48 <_strtod_l+0x770>
 8007ca6:	1b5b      	subs	r3, r3, r5
 8007ca8:	2b1f      	cmp	r3, #31
 8007caa:	f04f 0101 	mov.w	r1, #1
 8007cae:	eba2 0203 	sub.w	r2, r2, r3
 8007cb2:	dc3d      	bgt.n	8007d30 <_strtod_l+0x758>
 8007cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9310      	str	r3, [sp, #64]	@ 0x40
 8007cbe:	18bd      	adds	r5, r7, r2
 8007cc0:	9b08      	ldr	r3, [sp, #32]
 8007cc2:	42af      	cmp	r7, r5
 8007cc4:	4416      	add	r6, r2
 8007cc6:	441e      	add	r6, r3
 8007cc8:	463b      	mov	r3, r7
 8007cca:	bfa8      	it	ge
 8007ccc:	462b      	movge	r3, r5
 8007cce:	42b3      	cmp	r3, r6
 8007cd0:	bfa8      	it	ge
 8007cd2:	4633      	movge	r3, r6
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bfc2      	ittt	gt
 8007cd8:	1aed      	subgt	r5, r5, r3
 8007cda:	1af6      	subgt	r6, r6, r3
 8007cdc:	1aff      	subgt	r7, r7, r3
 8007cde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	dd16      	ble.n	8007d12 <_strtod_l+0x73a>
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	9805      	ldr	r0, [sp, #20]
 8007cea:	f7ff f9a9 	bl	8007040 <__pow5mult>
 8007cee:	4680      	mov	r8, r0
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d0b7      	beq.n	8007c64 <_strtod_l+0x68c>
 8007cf4:	4601      	mov	r1, r0
 8007cf6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007cf8:	9805      	ldr	r0, [sp, #20]
 8007cfa:	f7ff f8ff 	bl	8006efc <__multiply>
 8007cfe:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f43f ae88 	beq.w	8007a16 <_strtod_l+0x43e>
 8007d06:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d08:	9805      	ldr	r0, [sp, #20]
 8007d0a:	f7fe ffe3 	bl	8006cd4 <_Bfree>
 8007d0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d10:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d12:	2d00      	cmp	r5, #0
 8007d14:	dc1d      	bgt.n	8007d52 <_strtod_l+0x77a>
 8007d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dd27      	ble.n	8007d6c <_strtod_l+0x794>
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007d20:	9805      	ldr	r0, [sp, #20]
 8007d22:	f7ff f98d 	bl	8007040 <__pow5mult>
 8007d26:	4681      	mov	r9, r0
 8007d28:	bb00      	cbnz	r0, 8007d6c <_strtod_l+0x794>
 8007d2a:	f04f 0900 	mov.w	r9, #0
 8007d2e:	e672      	b.n	8007a16 <_strtod_l+0x43e>
 8007d30:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007d34:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007d38:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007d3c:	35e2      	adds	r5, #226	@ 0xe2
 8007d3e:	fa01 f305 	lsl.w	r3, r1, r5
 8007d42:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d44:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007d46:	e7ba      	b.n	8007cbe <_strtod_l+0x6e6>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d50:	e7b5      	b.n	8007cbe <_strtod_l+0x6e6>
 8007d52:	462a      	mov	r2, r5
 8007d54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d56:	9805      	ldr	r0, [sp, #20]
 8007d58:	f7ff f9cc 	bl	80070f4 <__lshift>
 8007d5c:	901a      	str	r0, [sp, #104]	@ 0x68
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d1d9      	bne.n	8007d16 <_strtod_l+0x73e>
 8007d62:	e658      	b.n	8007a16 <_strtod_l+0x43e>
 8007d64:	08009760 	.word	0x08009760
 8007d68:	fffffc02 	.word	0xfffffc02
 8007d6c:	2e00      	cmp	r6, #0
 8007d6e:	dd07      	ble.n	8007d80 <_strtod_l+0x7a8>
 8007d70:	4649      	mov	r1, r9
 8007d72:	4632      	mov	r2, r6
 8007d74:	9805      	ldr	r0, [sp, #20]
 8007d76:	f7ff f9bd 	bl	80070f4 <__lshift>
 8007d7a:	4681      	mov	r9, r0
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d0d4      	beq.n	8007d2a <_strtod_l+0x752>
 8007d80:	2f00      	cmp	r7, #0
 8007d82:	dd08      	ble.n	8007d96 <_strtod_l+0x7be>
 8007d84:	4641      	mov	r1, r8
 8007d86:	463a      	mov	r2, r7
 8007d88:	9805      	ldr	r0, [sp, #20]
 8007d8a:	f7ff f9b3 	bl	80070f4 <__lshift>
 8007d8e:	4680      	mov	r8, r0
 8007d90:	2800      	cmp	r0, #0
 8007d92:	f43f ae40 	beq.w	8007a16 <_strtod_l+0x43e>
 8007d96:	464a      	mov	r2, r9
 8007d98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d9a:	9805      	ldr	r0, [sp, #20]
 8007d9c:	f7ff fa32 	bl	8007204 <__mdiff>
 8007da0:	4604      	mov	r4, r0
 8007da2:	2800      	cmp	r0, #0
 8007da4:	f43f ae37 	beq.w	8007a16 <_strtod_l+0x43e>
 8007da8:	68c3      	ldr	r3, [r0, #12]
 8007daa:	4641      	mov	r1, r8
 8007dac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007dae:	2300      	movs	r3, #0
 8007db0:	60c3      	str	r3, [r0, #12]
 8007db2:	f7ff fa0b 	bl	80071cc <__mcmp>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	da3d      	bge.n	8007e36 <_strtod_l+0x85e>
 8007dba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dbc:	ea53 030a 	orrs.w	r3, r3, sl
 8007dc0:	d163      	bne.n	8007e8a <_strtod_l+0x8b2>
 8007dc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d15f      	bne.n	8007e8a <_strtod_l+0x8b2>
 8007dca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007dce:	0d1b      	lsrs	r3, r3, #20
 8007dd0:	051b      	lsls	r3, r3, #20
 8007dd2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007dd6:	d958      	bls.n	8007e8a <_strtod_l+0x8b2>
 8007dd8:	6963      	ldr	r3, [r4, #20]
 8007dda:	b913      	cbnz	r3, 8007de2 <_strtod_l+0x80a>
 8007ddc:	6923      	ldr	r3, [r4, #16]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	dd53      	ble.n	8007e8a <_strtod_l+0x8b2>
 8007de2:	4621      	mov	r1, r4
 8007de4:	2201      	movs	r2, #1
 8007de6:	9805      	ldr	r0, [sp, #20]
 8007de8:	f7ff f984 	bl	80070f4 <__lshift>
 8007dec:	4641      	mov	r1, r8
 8007dee:	4604      	mov	r4, r0
 8007df0:	f7ff f9ec 	bl	80071cc <__mcmp>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	dd48      	ble.n	8007e8a <_strtod_l+0x8b2>
 8007df8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007dfc:	9a08      	ldr	r2, [sp, #32]
 8007dfe:	0d1b      	lsrs	r3, r3, #20
 8007e00:	051b      	lsls	r3, r3, #20
 8007e02:	2a00      	cmp	r2, #0
 8007e04:	d062      	beq.n	8007ecc <_strtod_l+0x8f4>
 8007e06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e0a:	d85f      	bhi.n	8007ecc <_strtod_l+0x8f4>
 8007e0c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007e10:	f67f ae94 	bls.w	8007b3c <_strtod_l+0x564>
 8007e14:	4650      	mov	r0, sl
 8007e16:	4659      	mov	r1, fp
 8007e18:	4ba3      	ldr	r3, [pc, #652]	@ (80080a8 <_strtod_l+0xad0>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f7f8 fb5c 	bl	80004d8 <__aeabi_dmul>
 8007e20:	4ba2      	ldr	r3, [pc, #648]	@ (80080ac <_strtod_l+0xad4>)
 8007e22:	4682      	mov	sl, r0
 8007e24:	400b      	ands	r3, r1
 8007e26:	468b      	mov	fp, r1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f47f adff 	bne.w	8007a2c <_strtod_l+0x454>
 8007e2e:	2322      	movs	r3, #34	@ 0x22
 8007e30:	9a05      	ldr	r2, [sp, #20]
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	e5fa      	b.n	8007a2c <_strtod_l+0x454>
 8007e36:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007e3a:	d165      	bne.n	8007f08 <_strtod_l+0x930>
 8007e3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e42:	b35a      	cbz	r2, 8007e9c <_strtod_l+0x8c4>
 8007e44:	4a9a      	ldr	r2, [pc, #616]	@ (80080b0 <_strtod_l+0xad8>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d12b      	bne.n	8007ea2 <_strtod_l+0x8ca>
 8007e4a:	9b08      	ldr	r3, [sp, #32]
 8007e4c:	4651      	mov	r1, sl
 8007e4e:	b303      	cbz	r3, 8007e92 <_strtod_l+0x8ba>
 8007e50:	465a      	mov	r2, fp
 8007e52:	4b96      	ldr	r3, [pc, #600]	@ (80080ac <_strtod_l+0xad4>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5e:	d81b      	bhi.n	8007e98 <_strtod_l+0x8c0>
 8007e60:	0d1b      	lsrs	r3, r3, #20
 8007e62:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007e66:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6a:	4299      	cmp	r1, r3
 8007e6c:	d119      	bne.n	8007ea2 <_strtod_l+0x8ca>
 8007e6e:	4b91      	ldr	r3, [pc, #580]	@ (80080b4 <_strtod_l+0xadc>)
 8007e70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d102      	bne.n	8007e7c <_strtod_l+0x8a4>
 8007e76:	3101      	adds	r1, #1
 8007e78:	f43f adcd 	beq.w	8007a16 <_strtod_l+0x43e>
 8007e7c:	f04f 0a00 	mov.w	sl, #0
 8007e80:	4b8a      	ldr	r3, [pc, #552]	@ (80080ac <_strtod_l+0xad4>)
 8007e82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e84:	401a      	ands	r2, r3
 8007e86:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007e8a:	9b08      	ldr	r3, [sp, #32]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1c1      	bne.n	8007e14 <_strtod_l+0x83c>
 8007e90:	e5cc      	b.n	8007a2c <_strtod_l+0x454>
 8007e92:	f04f 33ff 	mov.w	r3, #4294967295
 8007e96:	e7e8      	b.n	8007e6a <_strtod_l+0x892>
 8007e98:	4613      	mov	r3, r2
 8007e9a:	e7e6      	b.n	8007e6a <_strtod_l+0x892>
 8007e9c:	ea53 030a 	orrs.w	r3, r3, sl
 8007ea0:	d0aa      	beq.n	8007df8 <_strtod_l+0x820>
 8007ea2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ea4:	b1db      	cbz	r3, 8007ede <_strtod_l+0x906>
 8007ea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ea8:	4213      	tst	r3, r2
 8007eaa:	d0ee      	beq.n	8007e8a <_strtod_l+0x8b2>
 8007eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eae:	4650      	mov	r0, sl
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	9a08      	ldr	r2, [sp, #32]
 8007eb4:	b1bb      	cbz	r3, 8007ee6 <_strtod_l+0x90e>
 8007eb6:	f7ff fb6d 	bl	8007594 <sulp>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ec2:	f7f8 f953 	bl	800016c <__adddf3>
 8007ec6:	4682      	mov	sl, r0
 8007ec8:	468b      	mov	fp, r1
 8007eca:	e7de      	b.n	8007e8a <_strtod_l+0x8b2>
 8007ecc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007ed0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007ed4:	f04f 3aff 	mov.w	sl, #4294967295
 8007ed8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007edc:	e7d5      	b.n	8007e8a <_strtod_l+0x8b2>
 8007ede:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ee0:	ea13 0f0a 	tst.w	r3, sl
 8007ee4:	e7e1      	b.n	8007eaa <_strtod_l+0x8d2>
 8007ee6:	f7ff fb55 	bl	8007594 <sulp>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ef2:	f7f8 f939 	bl	8000168 <__aeabi_dsub>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4682      	mov	sl, r0
 8007efc:	468b      	mov	fp, r1
 8007efe:	f7f8 fd53 	bl	80009a8 <__aeabi_dcmpeq>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d0c1      	beq.n	8007e8a <_strtod_l+0x8b2>
 8007f06:	e619      	b.n	8007b3c <_strtod_l+0x564>
 8007f08:	4641      	mov	r1, r8
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f7ff face 	bl	80074ac <__ratio>
 8007f10:	2200      	movs	r2, #0
 8007f12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007f16:	4606      	mov	r6, r0
 8007f18:	460f      	mov	r7, r1
 8007f1a:	f7f8 fd59 	bl	80009d0 <__aeabi_dcmple>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d06d      	beq.n	8007ffe <_strtod_l+0xa26>
 8007f22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d178      	bne.n	800801a <_strtod_l+0xa42>
 8007f28:	f1ba 0f00 	cmp.w	sl, #0
 8007f2c:	d156      	bne.n	8007fdc <_strtod_l+0xa04>
 8007f2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d158      	bne.n	8007fea <_strtod_l+0xa12>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	4b5e      	ldr	r3, [pc, #376]	@ (80080b8 <_strtod_l+0xae0>)
 8007f40:	f7f8 fd3c 	bl	80009bc <__aeabi_dcmplt>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d157      	bne.n	8007ff8 <_strtod_l+0xa20>
 8007f48:	4630      	mov	r0, r6
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80080bc <_strtod_l+0xae4>)
 8007f50:	f7f8 fac2 	bl	80004d8 <__aeabi_dmul>
 8007f54:	4606      	mov	r6, r0
 8007f56:	460f      	mov	r7, r1
 8007f58:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007f5c:	9606      	str	r6, [sp, #24]
 8007f5e:	9307      	str	r3, [sp, #28]
 8007f60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f64:	4d51      	ldr	r5, [pc, #324]	@ (80080ac <_strtod_l+0xad4>)
 8007f66:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f6c:	401d      	ands	r5, r3
 8007f6e:	4b54      	ldr	r3, [pc, #336]	@ (80080c0 <_strtod_l+0xae8>)
 8007f70:	429d      	cmp	r5, r3
 8007f72:	f040 80ab 	bne.w	80080cc <_strtod_l+0xaf4>
 8007f76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f78:	4650      	mov	r0, sl
 8007f7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007f7e:	4659      	mov	r1, fp
 8007f80:	f7ff f9d4 	bl	800732c <__ulp>
 8007f84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f88:	f7f8 faa6 	bl	80004d8 <__aeabi_dmul>
 8007f8c:	4652      	mov	r2, sl
 8007f8e:	465b      	mov	r3, fp
 8007f90:	f7f8 f8ec 	bl	800016c <__adddf3>
 8007f94:	460b      	mov	r3, r1
 8007f96:	4945      	ldr	r1, [pc, #276]	@ (80080ac <_strtod_l+0xad4>)
 8007f98:	4a4a      	ldr	r2, [pc, #296]	@ (80080c4 <_strtod_l+0xaec>)
 8007f9a:	4019      	ands	r1, r3
 8007f9c:	4291      	cmp	r1, r2
 8007f9e:	4682      	mov	sl, r0
 8007fa0:	d942      	bls.n	8008028 <_strtod_l+0xa50>
 8007fa2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007fa4:	4b43      	ldr	r3, [pc, #268]	@ (80080b4 <_strtod_l+0xadc>)
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d103      	bne.n	8007fb2 <_strtod_l+0x9da>
 8007faa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007fac:	3301      	adds	r3, #1
 8007fae:	f43f ad32 	beq.w	8007a16 <_strtod_l+0x43e>
 8007fb2:	f04f 3aff 	mov.w	sl, #4294967295
 8007fb6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80080b4 <_strtod_l+0xadc>
 8007fba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fbc:	9805      	ldr	r0, [sp, #20]
 8007fbe:	f7fe fe89 	bl	8006cd4 <_Bfree>
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	9805      	ldr	r0, [sp, #20]
 8007fc6:	f7fe fe85 	bl	8006cd4 <_Bfree>
 8007fca:	4641      	mov	r1, r8
 8007fcc:	9805      	ldr	r0, [sp, #20]
 8007fce:	f7fe fe81 	bl	8006cd4 <_Bfree>
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	9805      	ldr	r0, [sp, #20]
 8007fd6:	f7fe fe7d 	bl	8006cd4 <_Bfree>
 8007fda:	e61c      	b.n	8007c16 <_strtod_l+0x63e>
 8007fdc:	f1ba 0f01 	cmp.w	sl, #1
 8007fe0:	d103      	bne.n	8007fea <_strtod_l+0xa12>
 8007fe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f43f ada9 	beq.w	8007b3c <_strtod_l+0x564>
 8007fea:	2200      	movs	r2, #0
 8007fec:	4b36      	ldr	r3, [pc, #216]	@ (80080c8 <_strtod_l+0xaf0>)
 8007fee:	2600      	movs	r6, #0
 8007ff0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ff4:	4f30      	ldr	r7, [pc, #192]	@ (80080b8 <_strtod_l+0xae0>)
 8007ff6:	e7b3      	b.n	8007f60 <_strtod_l+0x988>
 8007ff8:	2600      	movs	r6, #0
 8007ffa:	4f30      	ldr	r7, [pc, #192]	@ (80080bc <_strtod_l+0xae4>)
 8007ffc:	e7ac      	b.n	8007f58 <_strtod_l+0x980>
 8007ffe:	4630      	mov	r0, r6
 8008000:	4639      	mov	r1, r7
 8008002:	4b2e      	ldr	r3, [pc, #184]	@ (80080bc <_strtod_l+0xae4>)
 8008004:	2200      	movs	r2, #0
 8008006:	f7f8 fa67 	bl	80004d8 <__aeabi_dmul>
 800800a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800800c:	4606      	mov	r6, r0
 800800e:	460f      	mov	r7, r1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0a1      	beq.n	8007f58 <_strtod_l+0x980>
 8008014:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008018:	e7a2      	b.n	8007f60 <_strtod_l+0x988>
 800801a:	2200      	movs	r2, #0
 800801c:	4b26      	ldr	r3, [pc, #152]	@ (80080b8 <_strtod_l+0xae0>)
 800801e:	4616      	mov	r6, r2
 8008020:	461f      	mov	r7, r3
 8008022:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008026:	e79b      	b.n	8007f60 <_strtod_l+0x988>
 8008028:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800802c:	9b08      	ldr	r3, [sp, #32]
 800802e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1c1      	bne.n	8007fba <_strtod_l+0x9e2>
 8008036:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800803a:	0d1b      	lsrs	r3, r3, #20
 800803c:	051b      	lsls	r3, r3, #20
 800803e:	429d      	cmp	r5, r3
 8008040:	d1bb      	bne.n	8007fba <_strtod_l+0x9e2>
 8008042:	4630      	mov	r0, r6
 8008044:	4639      	mov	r1, r7
 8008046:	f7f9 f889 	bl	800115c <__aeabi_d2lz>
 800804a:	f7f8 fa17 	bl	800047c <__aeabi_l2d>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 f887 	bl	8000168 <__aeabi_dsub>
 800805a:	460b      	mov	r3, r1
 800805c:	4602      	mov	r2, r0
 800805e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008062:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008066:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008068:	ea46 060a 	orr.w	r6, r6, sl
 800806c:	431e      	orrs	r6, r3
 800806e:	d06a      	beq.n	8008146 <_strtod_l+0xb6e>
 8008070:	a309      	add	r3, pc, #36	@ (adr r3, 8008098 <_strtod_l+0xac0>)
 8008072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008076:	f7f8 fca1 	bl	80009bc <__aeabi_dcmplt>
 800807a:	2800      	cmp	r0, #0
 800807c:	f47f acd6 	bne.w	8007a2c <_strtod_l+0x454>
 8008080:	a307      	add	r3, pc, #28	@ (adr r3, 80080a0 <_strtod_l+0xac8>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800808a:	f7f8 fcb5 	bl	80009f8 <__aeabi_dcmpgt>
 800808e:	2800      	cmp	r0, #0
 8008090:	d093      	beq.n	8007fba <_strtod_l+0x9e2>
 8008092:	e4cb      	b.n	8007a2c <_strtod_l+0x454>
 8008094:	f3af 8000 	nop.w
 8008098:	94a03595 	.word	0x94a03595
 800809c:	3fdfffff 	.word	0x3fdfffff
 80080a0:	35afe535 	.word	0x35afe535
 80080a4:	3fe00000 	.word	0x3fe00000
 80080a8:	39500000 	.word	0x39500000
 80080ac:	7ff00000 	.word	0x7ff00000
 80080b0:	000fffff 	.word	0x000fffff
 80080b4:	7fefffff 	.word	0x7fefffff
 80080b8:	3ff00000 	.word	0x3ff00000
 80080bc:	3fe00000 	.word	0x3fe00000
 80080c0:	7fe00000 	.word	0x7fe00000
 80080c4:	7c9fffff 	.word	0x7c9fffff
 80080c8:	bff00000 	.word	0xbff00000
 80080cc:	9b08      	ldr	r3, [sp, #32]
 80080ce:	b323      	cbz	r3, 800811a <_strtod_l+0xb42>
 80080d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80080d4:	d821      	bhi.n	800811a <_strtod_l+0xb42>
 80080d6:	a328      	add	r3, pc, #160	@ (adr r3, 8008178 <_strtod_l+0xba0>)
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	4630      	mov	r0, r6
 80080de:	4639      	mov	r1, r7
 80080e0:	f7f8 fc76 	bl	80009d0 <__aeabi_dcmple>
 80080e4:	b1a0      	cbz	r0, 8008110 <_strtod_l+0xb38>
 80080e6:	4639      	mov	r1, r7
 80080e8:	4630      	mov	r0, r6
 80080ea:	f7f8 fccd 	bl	8000a88 <__aeabi_d2uiz>
 80080ee:	2801      	cmp	r0, #1
 80080f0:	bf38      	it	cc
 80080f2:	2001      	movcc	r0, #1
 80080f4:	f7f8 f976 	bl	80003e4 <__aeabi_ui2d>
 80080f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080fa:	4606      	mov	r6, r0
 80080fc:	460f      	mov	r7, r1
 80080fe:	b9fb      	cbnz	r3, 8008140 <_strtod_l+0xb68>
 8008100:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008104:	9014      	str	r0, [sp, #80]	@ 0x50
 8008106:	9315      	str	r3, [sp, #84]	@ 0x54
 8008108:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800810c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008110:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008112:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008116:	1b5b      	subs	r3, r3, r5
 8008118:	9311      	str	r3, [sp, #68]	@ 0x44
 800811a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800811e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008122:	f7ff f903 	bl	800732c <__ulp>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4650      	mov	r0, sl
 800812c:	4659      	mov	r1, fp
 800812e:	f7f8 f9d3 	bl	80004d8 <__aeabi_dmul>
 8008132:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008136:	f7f8 f819 	bl	800016c <__adddf3>
 800813a:	4682      	mov	sl, r0
 800813c:	468b      	mov	fp, r1
 800813e:	e775      	b.n	800802c <_strtod_l+0xa54>
 8008140:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008144:	e7e0      	b.n	8008108 <_strtod_l+0xb30>
 8008146:	a30e      	add	r3, pc, #56	@ (adr r3, 8008180 <_strtod_l+0xba8>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f7f8 fc36 	bl	80009bc <__aeabi_dcmplt>
 8008150:	e79d      	b.n	800808e <_strtod_l+0xab6>
 8008152:	2300      	movs	r3, #0
 8008154:	930e      	str	r3, [sp, #56]	@ 0x38
 8008156:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008158:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800815a:	6013      	str	r3, [r2, #0]
 800815c:	f7ff ba79 	b.w	8007652 <_strtod_l+0x7a>
 8008160:	2a65      	cmp	r2, #101	@ 0x65
 8008162:	f43f ab72 	beq.w	800784a <_strtod_l+0x272>
 8008166:	2a45      	cmp	r2, #69	@ 0x45
 8008168:	f43f ab6f 	beq.w	800784a <_strtod_l+0x272>
 800816c:	2301      	movs	r3, #1
 800816e:	f7ff bbaa 	b.w	80078c6 <_strtod_l+0x2ee>
 8008172:	bf00      	nop
 8008174:	f3af 8000 	nop.w
 8008178:	ffc00000 	.word	0xffc00000
 800817c:	41dfffff 	.word	0x41dfffff
 8008180:	94a03595 	.word	0x94a03595
 8008184:	3fcfffff 	.word	0x3fcfffff

08008188 <_strtod_r>:
 8008188:	4b01      	ldr	r3, [pc, #4]	@ (8008190 <_strtod_r+0x8>)
 800818a:	f7ff ba25 	b.w	80075d8 <_strtod_l>
 800818e:	bf00      	nop
 8008190:	20000068 	.word	0x20000068

08008194 <_strtol_l.isra.0>:
 8008194:	2b24      	cmp	r3, #36	@ 0x24
 8008196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800819a:	4686      	mov	lr, r0
 800819c:	4690      	mov	r8, r2
 800819e:	d801      	bhi.n	80081a4 <_strtol_l.isra.0+0x10>
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d106      	bne.n	80081b2 <_strtol_l.isra.0+0x1e>
 80081a4:	f7fd fdbc 	bl	8005d20 <__errno>
 80081a8:	2316      	movs	r3, #22
 80081aa:	6003      	str	r3, [r0, #0]
 80081ac:	2000      	movs	r0, #0
 80081ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b2:	460d      	mov	r5, r1
 80081b4:	4833      	ldr	r0, [pc, #204]	@ (8008284 <_strtol_l.isra.0+0xf0>)
 80081b6:	462a      	mov	r2, r5
 80081b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081bc:	5d06      	ldrb	r6, [r0, r4]
 80081be:	f016 0608 	ands.w	r6, r6, #8
 80081c2:	d1f8      	bne.n	80081b6 <_strtol_l.isra.0+0x22>
 80081c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80081c6:	d110      	bne.n	80081ea <_strtol_l.isra.0+0x56>
 80081c8:	2601      	movs	r6, #1
 80081ca:	782c      	ldrb	r4, [r5, #0]
 80081cc:	1c95      	adds	r5, r2, #2
 80081ce:	f033 0210 	bics.w	r2, r3, #16
 80081d2:	d115      	bne.n	8008200 <_strtol_l.isra.0+0x6c>
 80081d4:	2c30      	cmp	r4, #48	@ 0x30
 80081d6:	d10d      	bne.n	80081f4 <_strtol_l.isra.0+0x60>
 80081d8:	782a      	ldrb	r2, [r5, #0]
 80081da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80081de:	2a58      	cmp	r2, #88	@ 0x58
 80081e0:	d108      	bne.n	80081f4 <_strtol_l.isra.0+0x60>
 80081e2:	786c      	ldrb	r4, [r5, #1]
 80081e4:	3502      	adds	r5, #2
 80081e6:	2310      	movs	r3, #16
 80081e8:	e00a      	b.n	8008200 <_strtol_l.isra.0+0x6c>
 80081ea:	2c2b      	cmp	r4, #43	@ 0x2b
 80081ec:	bf04      	itt	eq
 80081ee:	782c      	ldrbeq	r4, [r5, #0]
 80081f0:	1c95      	addeq	r5, r2, #2
 80081f2:	e7ec      	b.n	80081ce <_strtol_l.isra.0+0x3a>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1f6      	bne.n	80081e6 <_strtol_l.isra.0+0x52>
 80081f8:	2c30      	cmp	r4, #48	@ 0x30
 80081fa:	bf14      	ite	ne
 80081fc:	230a      	movne	r3, #10
 80081fe:	2308      	moveq	r3, #8
 8008200:	2200      	movs	r2, #0
 8008202:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008206:	f10c 3cff 	add.w	ip, ip, #4294967295
 800820a:	fbbc f9f3 	udiv	r9, ip, r3
 800820e:	4610      	mov	r0, r2
 8008210:	fb03 ca19 	mls	sl, r3, r9, ip
 8008214:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008218:	2f09      	cmp	r7, #9
 800821a:	d80f      	bhi.n	800823c <_strtol_l.isra.0+0xa8>
 800821c:	463c      	mov	r4, r7
 800821e:	42a3      	cmp	r3, r4
 8008220:	dd1b      	ble.n	800825a <_strtol_l.isra.0+0xc6>
 8008222:	1c57      	adds	r7, r2, #1
 8008224:	d007      	beq.n	8008236 <_strtol_l.isra.0+0xa2>
 8008226:	4581      	cmp	r9, r0
 8008228:	d314      	bcc.n	8008254 <_strtol_l.isra.0+0xc0>
 800822a:	d101      	bne.n	8008230 <_strtol_l.isra.0+0x9c>
 800822c:	45a2      	cmp	sl, r4
 800822e:	db11      	blt.n	8008254 <_strtol_l.isra.0+0xc0>
 8008230:	2201      	movs	r2, #1
 8008232:	fb00 4003 	mla	r0, r0, r3, r4
 8008236:	f815 4b01 	ldrb.w	r4, [r5], #1
 800823a:	e7eb      	b.n	8008214 <_strtol_l.isra.0+0x80>
 800823c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008240:	2f19      	cmp	r7, #25
 8008242:	d801      	bhi.n	8008248 <_strtol_l.isra.0+0xb4>
 8008244:	3c37      	subs	r4, #55	@ 0x37
 8008246:	e7ea      	b.n	800821e <_strtol_l.isra.0+0x8a>
 8008248:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800824c:	2f19      	cmp	r7, #25
 800824e:	d804      	bhi.n	800825a <_strtol_l.isra.0+0xc6>
 8008250:	3c57      	subs	r4, #87	@ 0x57
 8008252:	e7e4      	b.n	800821e <_strtol_l.isra.0+0x8a>
 8008254:	f04f 32ff 	mov.w	r2, #4294967295
 8008258:	e7ed      	b.n	8008236 <_strtol_l.isra.0+0xa2>
 800825a:	1c53      	adds	r3, r2, #1
 800825c:	d108      	bne.n	8008270 <_strtol_l.isra.0+0xdc>
 800825e:	2322      	movs	r3, #34	@ 0x22
 8008260:	4660      	mov	r0, ip
 8008262:	f8ce 3000 	str.w	r3, [lr]
 8008266:	f1b8 0f00 	cmp.w	r8, #0
 800826a:	d0a0      	beq.n	80081ae <_strtol_l.isra.0+0x1a>
 800826c:	1e69      	subs	r1, r5, #1
 800826e:	e006      	b.n	800827e <_strtol_l.isra.0+0xea>
 8008270:	b106      	cbz	r6, 8008274 <_strtol_l.isra.0+0xe0>
 8008272:	4240      	negs	r0, r0
 8008274:	f1b8 0f00 	cmp.w	r8, #0
 8008278:	d099      	beq.n	80081ae <_strtol_l.isra.0+0x1a>
 800827a:	2a00      	cmp	r2, #0
 800827c:	d1f6      	bne.n	800826c <_strtol_l.isra.0+0xd8>
 800827e:	f8c8 1000 	str.w	r1, [r8]
 8008282:	e794      	b.n	80081ae <_strtol_l.isra.0+0x1a>
 8008284:	08009789 	.word	0x08009789

08008288 <_strtol_r>:
 8008288:	f7ff bf84 	b.w	8008194 <_strtol_l.isra.0>

0800828c <__ssputs_r>:
 800828c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008290:	461f      	mov	r7, r3
 8008292:	688e      	ldr	r6, [r1, #8]
 8008294:	4682      	mov	sl, r0
 8008296:	42be      	cmp	r6, r7
 8008298:	460c      	mov	r4, r1
 800829a:	4690      	mov	r8, r2
 800829c:	680b      	ldr	r3, [r1, #0]
 800829e:	d82d      	bhi.n	80082fc <__ssputs_r+0x70>
 80082a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082a8:	d026      	beq.n	80082f8 <__ssputs_r+0x6c>
 80082aa:	6965      	ldr	r5, [r4, #20]
 80082ac:	6909      	ldr	r1, [r1, #16]
 80082ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082b2:	eba3 0901 	sub.w	r9, r3, r1
 80082b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082ba:	1c7b      	adds	r3, r7, #1
 80082bc:	444b      	add	r3, r9
 80082be:	106d      	asrs	r5, r5, #1
 80082c0:	429d      	cmp	r5, r3
 80082c2:	bf38      	it	cc
 80082c4:	461d      	movcc	r5, r3
 80082c6:	0553      	lsls	r3, r2, #21
 80082c8:	d527      	bpl.n	800831a <__ssputs_r+0x8e>
 80082ca:	4629      	mov	r1, r5
 80082cc:	f7fe fc36 	bl	8006b3c <_malloc_r>
 80082d0:	4606      	mov	r6, r0
 80082d2:	b360      	cbz	r0, 800832e <__ssputs_r+0xa2>
 80082d4:	464a      	mov	r2, r9
 80082d6:	6921      	ldr	r1, [r4, #16]
 80082d8:	f000 fa14 	bl	8008704 <memcpy>
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	6126      	str	r6, [r4, #16]
 80082ea:	444e      	add	r6, r9
 80082ec:	6026      	str	r6, [r4, #0]
 80082ee:	463e      	mov	r6, r7
 80082f0:	6165      	str	r5, [r4, #20]
 80082f2:	eba5 0509 	sub.w	r5, r5, r9
 80082f6:	60a5      	str	r5, [r4, #8]
 80082f8:	42be      	cmp	r6, r7
 80082fa:	d900      	bls.n	80082fe <__ssputs_r+0x72>
 80082fc:	463e      	mov	r6, r7
 80082fe:	4632      	mov	r2, r6
 8008300:	4641      	mov	r1, r8
 8008302:	6820      	ldr	r0, [r4, #0]
 8008304:	f000 f9c2 	bl	800868c <memmove>
 8008308:	2000      	movs	r0, #0
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	1b9b      	subs	r3, r3, r6
 800830e:	60a3      	str	r3, [r4, #8]
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	4433      	add	r3, r6
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800831a:	462a      	mov	r2, r5
 800831c:	f000 fd83 	bl	8008e26 <_realloc_r>
 8008320:	4606      	mov	r6, r0
 8008322:	2800      	cmp	r0, #0
 8008324:	d1e0      	bne.n	80082e8 <__ssputs_r+0x5c>
 8008326:	4650      	mov	r0, sl
 8008328:	6921      	ldr	r1, [r4, #16]
 800832a:	f7fe fb95 	bl	8006a58 <_free_r>
 800832e:	230c      	movs	r3, #12
 8008330:	f8ca 3000 	str.w	r3, [sl]
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	f04f 30ff 	mov.w	r0, #4294967295
 800833a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	e7e9      	b.n	8008316 <__ssputs_r+0x8a>
	...

08008344 <_svfiprintf_r>:
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	4698      	mov	r8, r3
 800834a:	898b      	ldrh	r3, [r1, #12]
 800834c:	4607      	mov	r7, r0
 800834e:	061b      	lsls	r3, r3, #24
 8008350:	460d      	mov	r5, r1
 8008352:	4614      	mov	r4, r2
 8008354:	b09d      	sub	sp, #116	@ 0x74
 8008356:	d510      	bpl.n	800837a <_svfiprintf_r+0x36>
 8008358:	690b      	ldr	r3, [r1, #16]
 800835a:	b973      	cbnz	r3, 800837a <_svfiprintf_r+0x36>
 800835c:	2140      	movs	r1, #64	@ 0x40
 800835e:	f7fe fbed 	bl	8006b3c <_malloc_r>
 8008362:	6028      	str	r0, [r5, #0]
 8008364:	6128      	str	r0, [r5, #16]
 8008366:	b930      	cbnz	r0, 8008376 <_svfiprintf_r+0x32>
 8008368:	230c      	movs	r3, #12
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	f04f 30ff 	mov.w	r0, #4294967295
 8008370:	b01d      	add	sp, #116	@ 0x74
 8008372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008376:	2340      	movs	r3, #64	@ 0x40
 8008378:	616b      	str	r3, [r5, #20]
 800837a:	2300      	movs	r3, #0
 800837c:	9309      	str	r3, [sp, #36]	@ 0x24
 800837e:	2320      	movs	r3, #32
 8008380:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008384:	2330      	movs	r3, #48	@ 0x30
 8008386:	f04f 0901 	mov.w	r9, #1
 800838a:	f8cd 800c 	str.w	r8, [sp, #12]
 800838e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008528 <_svfiprintf_r+0x1e4>
 8008392:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008396:	4623      	mov	r3, r4
 8008398:	469a      	mov	sl, r3
 800839a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800839e:	b10a      	cbz	r2, 80083a4 <_svfiprintf_r+0x60>
 80083a0:	2a25      	cmp	r2, #37	@ 0x25
 80083a2:	d1f9      	bne.n	8008398 <_svfiprintf_r+0x54>
 80083a4:	ebba 0b04 	subs.w	fp, sl, r4
 80083a8:	d00b      	beq.n	80083c2 <_svfiprintf_r+0x7e>
 80083aa:	465b      	mov	r3, fp
 80083ac:	4622      	mov	r2, r4
 80083ae:	4629      	mov	r1, r5
 80083b0:	4638      	mov	r0, r7
 80083b2:	f7ff ff6b 	bl	800828c <__ssputs_r>
 80083b6:	3001      	adds	r0, #1
 80083b8:	f000 80a7 	beq.w	800850a <_svfiprintf_r+0x1c6>
 80083bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083be:	445a      	add	r2, fp
 80083c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80083c2:	f89a 3000 	ldrb.w	r3, [sl]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 809f 	beq.w	800850a <_svfiprintf_r+0x1c6>
 80083cc:	2300      	movs	r3, #0
 80083ce:	f04f 32ff 	mov.w	r2, #4294967295
 80083d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083d6:	f10a 0a01 	add.w	sl, sl, #1
 80083da:	9304      	str	r3, [sp, #16]
 80083dc:	9307      	str	r3, [sp, #28]
 80083de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80083e4:	4654      	mov	r4, sl
 80083e6:	2205      	movs	r2, #5
 80083e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ec:	484e      	ldr	r0, [pc, #312]	@ (8008528 <_svfiprintf_r+0x1e4>)
 80083ee:	f7fd fcc4 	bl	8005d7a <memchr>
 80083f2:	9a04      	ldr	r2, [sp, #16]
 80083f4:	b9d8      	cbnz	r0, 800842e <_svfiprintf_r+0xea>
 80083f6:	06d0      	lsls	r0, r2, #27
 80083f8:	bf44      	itt	mi
 80083fa:	2320      	movmi	r3, #32
 80083fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008400:	0711      	lsls	r1, r2, #28
 8008402:	bf44      	itt	mi
 8008404:	232b      	movmi	r3, #43	@ 0x2b
 8008406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800840a:	f89a 3000 	ldrb.w	r3, [sl]
 800840e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008410:	d015      	beq.n	800843e <_svfiprintf_r+0xfa>
 8008412:	4654      	mov	r4, sl
 8008414:	2000      	movs	r0, #0
 8008416:	f04f 0c0a 	mov.w	ip, #10
 800841a:	9a07      	ldr	r2, [sp, #28]
 800841c:	4621      	mov	r1, r4
 800841e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008422:	3b30      	subs	r3, #48	@ 0x30
 8008424:	2b09      	cmp	r3, #9
 8008426:	d94b      	bls.n	80084c0 <_svfiprintf_r+0x17c>
 8008428:	b1b0      	cbz	r0, 8008458 <_svfiprintf_r+0x114>
 800842a:	9207      	str	r2, [sp, #28]
 800842c:	e014      	b.n	8008458 <_svfiprintf_r+0x114>
 800842e:	eba0 0308 	sub.w	r3, r0, r8
 8008432:	fa09 f303 	lsl.w	r3, r9, r3
 8008436:	4313      	orrs	r3, r2
 8008438:	46a2      	mov	sl, r4
 800843a:	9304      	str	r3, [sp, #16]
 800843c:	e7d2      	b.n	80083e4 <_svfiprintf_r+0xa0>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	1d19      	adds	r1, r3, #4
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	9103      	str	r1, [sp, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	bfbb      	ittet	lt
 800844a:	425b      	neglt	r3, r3
 800844c:	f042 0202 	orrlt.w	r2, r2, #2
 8008450:	9307      	strge	r3, [sp, #28]
 8008452:	9307      	strlt	r3, [sp, #28]
 8008454:	bfb8      	it	lt
 8008456:	9204      	strlt	r2, [sp, #16]
 8008458:	7823      	ldrb	r3, [r4, #0]
 800845a:	2b2e      	cmp	r3, #46	@ 0x2e
 800845c:	d10a      	bne.n	8008474 <_svfiprintf_r+0x130>
 800845e:	7863      	ldrb	r3, [r4, #1]
 8008460:	2b2a      	cmp	r3, #42	@ 0x2a
 8008462:	d132      	bne.n	80084ca <_svfiprintf_r+0x186>
 8008464:	9b03      	ldr	r3, [sp, #12]
 8008466:	3402      	adds	r4, #2
 8008468:	1d1a      	adds	r2, r3, #4
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	9203      	str	r2, [sp, #12]
 800846e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008472:	9305      	str	r3, [sp, #20]
 8008474:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800852c <_svfiprintf_r+0x1e8>
 8008478:	2203      	movs	r2, #3
 800847a:	4650      	mov	r0, sl
 800847c:	7821      	ldrb	r1, [r4, #0]
 800847e:	f7fd fc7c 	bl	8005d7a <memchr>
 8008482:	b138      	cbz	r0, 8008494 <_svfiprintf_r+0x150>
 8008484:	2240      	movs	r2, #64	@ 0x40
 8008486:	9b04      	ldr	r3, [sp, #16]
 8008488:	eba0 000a 	sub.w	r0, r0, sl
 800848c:	4082      	lsls	r2, r0
 800848e:	4313      	orrs	r3, r2
 8008490:	3401      	adds	r4, #1
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008498:	2206      	movs	r2, #6
 800849a:	4825      	ldr	r0, [pc, #148]	@ (8008530 <_svfiprintf_r+0x1ec>)
 800849c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084a0:	f7fd fc6b 	bl	8005d7a <memchr>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d036      	beq.n	8008516 <_svfiprintf_r+0x1d2>
 80084a8:	4b22      	ldr	r3, [pc, #136]	@ (8008534 <_svfiprintf_r+0x1f0>)
 80084aa:	bb1b      	cbnz	r3, 80084f4 <_svfiprintf_r+0x1b0>
 80084ac:	9b03      	ldr	r3, [sp, #12]
 80084ae:	3307      	adds	r3, #7
 80084b0:	f023 0307 	bic.w	r3, r3, #7
 80084b4:	3308      	adds	r3, #8
 80084b6:	9303      	str	r3, [sp, #12]
 80084b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ba:	4433      	add	r3, r6
 80084bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80084be:	e76a      	b.n	8008396 <_svfiprintf_r+0x52>
 80084c0:	460c      	mov	r4, r1
 80084c2:	2001      	movs	r0, #1
 80084c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80084c8:	e7a8      	b.n	800841c <_svfiprintf_r+0xd8>
 80084ca:	2300      	movs	r3, #0
 80084cc:	f04f 0c0a 	mov.w	ip, #10
 80084d0:	4619      	mov	r1, r3
 80084d2:	3401      	adds	r4, #1
 80084d4:	9305      	str	r3, [sp, #20]
 80084d6:	4620      	mov	r0, r4
 80084d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084dc:	3a30      	subs	r2, #48	@ 0x30
 80084de:	2a09      	cmp	r2, #9
 80084e0:	d903      	bls.n	80084ea <_svfiprintf_r+0x1a6>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0c6      	beq.n	8008474 <_svfiprintf_r+0x130>
 80084e6:	9105      	str	r1, [sp, #20]
 80084e8:	e7c4      	b.n	8008474 <_svfiprintf_r+0x130>
 80084ea:	4604      	mov	r4, r0
 80084ec:	2301      	movs	r3, #1
 80084ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80084f2:	e7f0      	b.n	80084d6 <_svfiprintf_r+0x192>
 80084f4:	ab03      	add	r3, sp, #12
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	462a      	mov	r2, r5
 80084fa:	4638      	mov	r0, r7
 80084fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008538 <_svfiprintf_r+0x1f4>)
 80084fe:	a904      	add	r1, sp, #16
 8008500:	f7fc fcce 	bl	8004ea0 <_printf_float>
 8008504:	1c42      	adds	r2, r0, #1
 8008506:	4606      	mov	r6, r0
 8008508:	d1d6      	bne.n	80084b8 <_svfiprintf_r+0x174>
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	065b      	lsls	r3, r3, #25
 800850e:	f53f af2d 	bmi.w	800836c <_svfiprintf_r+0x28>
 8008512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008514:	e72c      	b.n	8008370 <_svfiprintf_r+0x2c>
 8008516:	ab03      	add	r3, sp, #12
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	462a      	mov	r2, r5
 800851c:	4638      	mov	r0, r7
 800851e:	4b06      	ldr	r3, [pc, #24]	@ (8008538 <_svfiprintf_r+0x1f4>)
 8008520:	a904      	add	r1, sp, #16
 8008522:	f7fc ff5b 	bl	80053dc <_printf_i>
 8008526:	e7ed      	b.n	8008504 <_svfiprintf_r+0x1c0>
 8008528:	08009583 	.word	0x08009583
 800852c:	08009589 	.word	0x08009589
 8008530:	0800958d 	.word	0x0800958d
 8008534:	08004ea1 	.word	0x08004ea1
 8008538:	0800828d 	.word	0x0800828d

0800853c <__sflush_r>:
 800853c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008542:	0716      	lsls	r6, r2, #28
 8008544:	4605      	mov	r5, r0
 8008546:	460c      	mov	r4, r1
 8008548:	d454      	bmi.n	80085f4 <__sflush_r+0xb8>
 800854a:	684b      	ldr	r3, [r1, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	dc02      	bgt.n	8008556 <__sflush_r+0x1a>
 8008550:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008552:	2b00      	cmp	r3, #0
 8008554:	dd48      	ble.n	80085e8 <__sflush_r+0xac>
 8008556:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008558:	2e00      	cmp	r6, #0
 800855a:	d045      	beq.n	80085e8 <__sflush_r+0xac>
 800855c:	2300      	movs	r3, #0
 800855e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008562:	682f      	ldr	r7, [r5, #0]
 8008564:	6a21      	ldr	r1, [r4, #32]
 8008566:	602b      	str	r3, [r5, #0]
 8008568:	d030      	beq.n	80085cc <__sflush_r+0x90>
 800856a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	0759      	lsls	r1, r3, #29
 8008570:	d505      	bpl.n	800857e <__sflush_r+0x42>
 8008572:	6863      	ldr	r3, [r4, #4]
 8008574:	1ad2      	subs	r2, r2, r3
 8008576:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008578:	b10b      	cbz	r3, 800857e <__sflush_r+0x42>
 800857a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800857c:	1ad2      	subs	r2, r2, r3
 800857e:	2300      	movs	r3, #0
 8008580:	4628      	mov	r0, r5
 8008582:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008584:	6a21      	ldr	r1, [r4, #32]
 8008586:	47b0      	blx	r6
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	d106      	bne.n	800859c <__sflush_r+0x60>
 800858e:	6829      	ldr	r1, [r5, #0]
 8008590:	291d      	cmp	r1, #29
 8008592:	d82b      	bhi.n	80085ec <__sflush_r+0xb0>
 8008594:	4a28      	ldr	r2, [pc, #160]	@ (8008638 <__sflush_r+0xfc>)
 8008596:	40ca      	lsrs	r2, r1
 8008598:	07d6      	lsls	r6, r2, #31
 800859a:	d527      	bpl.n	80085ec <__sflush_r+0xb0>
 800859c:	2200      	movs	r2, #0
 800859e:	6062      	str	r2, [r4, #4]
 80085a0:	6922      	ldr	r2, [r4, #16]
 80085a2:	04d9      	lsls	r1, r3, #19
 80085a4:	6022      	str	r2, [r4, #0]
 80085a6:	d504      	bpl.n	80085b2 <__sflush_r+0x76>
 80085a8:	1c42      	adds	r2, r0, #1
 80085aa:	d101      	bne.n	80085b0 <__sflush_r+0x74>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b903      	cbnz	r3, 80085b2 <__sflush_r+0x76>
 80085b0:	6560      	str	r0, [r4, #84]	@ 0x54
 80085b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085b4:	602f      	str	r7, [r5, #0]
 80085b6:	b1b9      	cbz	r1, 80085e8 <__sflush_r+0xac>
 80085b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085bc:	4299      	cmp	r1, r3
 80085be:	d002      	beq.n	80085c6 <__sflush_r+0x8a>
 80085c0:	4628      	mov	r0, r5
 80085c2:	f7fe fa49 	bl	8006a58 <_free_r>
 80085c6:	2300      	movs	r3, #0
 80085c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80085ca:	e00d      	b.n	80085e8 <__sflush_r+0xac>
 80085cc:	2301      	movs	r3, #1
 80085ce:	4628      	mov	r0, r5
 80085d0:	47b0      	blx	r6
 80085d2:	4602      	mov	r2, r0
 80085d4:	1c50      	adds	r0, r2, #1
 80085d6:	d1c9      	bne.n	800856c <__sflush_r+0x30>
 80085d8:	682b      	ldr	r3, [r5, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0c6      	beq.n	800856c <__sflush_r+0x30>
 80085de:	2b1d      	cmp	r3, #29
 80085e0:	d001      	beq.n	80085e6 <__sflush_r+0xaa>
 80085e2:	2b16      	cmp	r3, #22
 80085e4:	d11d      	bne.n	8008622 <__sflush_r+0xe6>
 80085e6:	602f      	str	r7, [r5, #0]
 80085e8:	2000      	movs	r0, #0
 80085ea:	e021      	b.n	8008630 <__sflush_r+0xf4>
 80085ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085f0:	b21b      	sxth	r3, r3
 80085f2:	e01a      	b.n	800862a <__sflush_r+0xee>
 80085f4:	690f      	ldr	r7, [r1, #16]
 80085f6:	2f00      	cmp	r7, #0
 80085f8:	d0f6      	beq.n	80085e8 <__sflush_r+0xac>
 80085fa:	0793      	lsls	r3, r2, #30
 80085fc:	bf18      	it	ne
 80085fe:	2300      	movne	r3, #0
 8008600:	680e      	ldr	r6, [r1, #0]
 8008602:	bf08      	it	eq
 8008604:	694b      	ldreq	r3, [r1, #20]
 8008606:	1bf6      	subs	r6, r6, r7
 8008608:	600f      	str	r7, [r1, #0]
 800860a:	608b      	str	r3, [r1, #8]
 800860c:	2e00      	cmp	r6, #0
 800860e:	ddeb      	ble.n	80085e8 <__sflush_r+0xac>
 8008610:	4633      	mov	r3, r6
 8008612:	463a      	mov	r2, r7
 8008614:	4628      	mov	r0, r5
 8008616:	6a21      	ldr	r1, [r4, #32]
 8008618:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800861c:	47e0      	blx	ip
 800861e:	2800      	cmp	r0, #0
 8008620:	dc07      	bgt.n	8008632 <__sflush_r+0xf6>
 8008622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800862a:	f04f 30ff 	mov.w	r0, #4294967295
 800862e:	81a3      	strh	r3, [r4, #12]
 8008630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008632:	4407      	add	r7, r0
 8008634:	1a36      	subs	r6, r6, r0
 8008636:	e7e9      	b.n	800860c <__sflush_r+0xd0>
 8008638:	20400001 	.word	0x20400001

0800863c <_fflush_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	690b      	ldr	r3, [r1, #16]
 8008640:	4605      	mov	r5, r0
 8008642:	460c      	mov	r4, r1
 8008644:	b913      	cbnz	r3, 800864c <_fflush_r+0x10>
 8008646:	2500      	movs	r5, #0
 8008648:	4628      	mov	r0, r5
 800864a:	bd38      	pop	{r3, r4, r5, pc}
 800864c:	b118      	cbz	r0, 8008656 <_fflush_r+0x1a>
 800864e:	6a03      	ldr	r3, [r0, #32]
 8008650:	b90b      	cbnz	r3, 8008656 <_fflush_r+0x1a>
 8008652:	f7fd fa77 	bl	8005b44 <__sinit>
 8008656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0f3      	beq.n	8008646 <_fflush_r+0xa>
 800865e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008660:	07d0      	lsls	r0, r2, #31
 8008662:	d404      	bmi.n	800866e <_fflush_r+0x32>
 8008664:	0599      	lsls	r1, r3, #22
 8008666:	d402      	bmi.n	800866e <_fflush_r+0x32>
 8008668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800866a:	f7fd fb84 	bl	8005d76 <__retarget_lock_acquire_recursive>
 800866e:	4628      	mov	r0, r5
 8008670:	4621      	mov	r1, r4
 8008672:	f7ff ff63 	bl	800853c <__sflush_r>
 8008676:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008678:	4605      	mov	r5, r0
 800867a:	07da      	lsls	r2, r3, #31
 800867c:	d4e4      	bmi.n	8008648 <_fflush_r+0xc>
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	059b      	lsls	r3, r3, #22
 8008682:	d4e1      	bmi.n	8008648 <_fflush_r+0xc>
 8008684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008686:	f7fd fb77 	bl	8005d78 <__retarget_lock_release_recursive>
 800868a:	e7dd      	b.n	8008648 <_fflush_r+0xc>

0800868c <memmove>:
 800868c:	4288      	cmp	r0, r1
 800868e:	b510      	push	{r4, lr}
 8008690:	eb01 0402 	add.w	r4, r1, r2
 8008694:	d902      	bls.n	800869c <memmove+0x10>
 8008696:	4284      	cmp	r4, r0
 8008698:	4623      	mov	r3, r4
 800869a:	d807      	bhi.n	80086ac <memmove+0x20>
 800869c:	1e43      	subs	r3, r0, #1
 800869e:	42a1      	cmp	r1, r4
 80086a0:	d008      	beq.n	80086b4 <memmove+0x28>
 80086a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086aa:	e7f8      	b.n	800869e <memmove+0x12>
 80086ac:	4601      	mov	r1, r0
 80086ae:	4402      	add	r2, r0
 80086b0:	428a      	cmp	r2, r1
 80086b2:	d100      	bne.n	80086b6 <memmove+0x2a>
 80086b4:	bd10      	pop	{r4, pc}
 80086b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086be:	e7f7      	b.n	80086b0 <memmove+0x24>

080086c0 <strncmp>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	b16a      	cbz	r2, 80086e0 <strncmp+0x20>
 80086c4:	3901      	subs	r1, #1
 80086c6:	1884      	adds	r4, r0, r2
 80086c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d103      	bne.n	80086dc <strncmp+0x1c>
 80086d4:	42a0      	cmp	r0, r4
 80086d6:	d001      	beq.n	80086dc <strncmp+0x1c>
 80086d8:	2a00      	cmp	r2, #0
 80086da:	d1f5      	bne.n	80086c8 <strncmp+0x8>
 80086dc:	1ad0      	subs	r0, r2, r3
 80086de:	bd10      	pop	{r4, pc}
 80086e0:	4610      	mov	r0, r2
 80086e2:	e7fc      	b.n	80086de <strncmp+0x1e>

080086e4 <_sbrk_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	2300      	movs	r3, #0
 80086e8:	4d05      	ldr	r5, [pc, #20]	@ (8008700 <_sbrk_r+0x1c>)
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	602b      	str	r3, [r5, #0]
 80086f0:	f7f9 fdec 	bl	80022cc <_sbrk>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	d102      	bne.n	80086fe <_sbrk_r+0x1a>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	b103      	cbz	r3, 80086fe <_sbrk_r+0x1a>
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	200005e4 	.word	0x200005e4

08008704 <memcpy>:
 8008704:	440a      	add	r2, r1
 8008706:	4291      	cmp	r1, r2
 8008708:	f100 33ff 	add.w	r3, r0, #4294967295
 800870c:	d100      	bne.n	8008710 <memcpy+0xc>
 800870e:	4770      	bx	lr
 8008710:	b510      	push	{r4, lr}
 8008712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008716:	4291      	cmp	r1, r2
 8008718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800871c:	d1f9      	bne.n	8008712 <memcpy+0xe>
 800871e:	bd10      	pop	{r4, pc}

08008720 <nan>:
 8008720:	2000      	movs	r0, #0
 8008722:	4901      	ldr	r1, [pc, #4]	@ (8008728 <nan+0x8>)
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	7ff80000 	.word	0x7ff80000

0800872c <__assert_func>:
 800872c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800872e:	4614      	mov	r4, r2
 8008730:	461a      	mov	r2, r3
 8008732:	4b09      	ldr	r3, [pc, #36]	@ (8008758 <__assert_func+0x2c>)
 8008734:	4605      	mov	r5, r0
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68d8      	ldr	r0, [r3, #12]
 800873a:	b14c      	cbz	r4, 8008750 <__assert_func+0x24>
 800873c:	4b07      	ldr	r3, [pc, #28]	@ (800875c <__assert_func+0x30>)
 800873e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008742:	9100      	str	r1, [sp, #0]
 8008744:	462b      	mov	r3, r5
 8008746:	4906      	ldr	r1, [pc, #24]	@ (8008760 <__assert_func+0x34>)
 8008748:	f000 fba8 	bl	8008e9c <fiprintf>
 800874c:	f000 fbb8 	bl	8008ec0 <abort>
 8008750:	4b04      	ldr	r3, [pc, #16]	@ (8008764 <__assert_func+0x38>)
 8008752:	461c      	mov	r4, r3
 8008754:	e7f3      	b.n	800873e <__assert_func+0x12>
 8008756:	bf00      	nop
 8008758:	20000018 	.word	0x20000018
 800875c:	0800959c 	.word	0x0800959c
 8008760:	080095a9 	.word	0x080095a9
 8008764:	080095d7 	.word	0x080095d7

08008768 <_calloc_r>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	fba1 5402 	umull	r5, r4, r1, r2
 800876e:	b934      	cbnz	r4, 800877e <_calloc_r+0x16>
 8008770:	4629      	mov	r1, r5
 8008772:	f7fe f9e3 	bl	8006b3c <_malloc_r>
 8008776:	4606      	mov	r6, r0
 8008778:	b928      	cbnz	r0, 8008786 <_calloc_r+0x1e>
 800877a:	4630      	mov	r0, r6
 800877c:	bd70      	pop	{r4, r5, r6, pc}
 800877e:	220c      	movs	r2, #12
 8008780:	2600      	movs	r6, #0
 8008782:	6002      	str	r2, [r0, #0]
 8008784:	e7f9      	b.n	800877a <_calloc_r+0x12>
 8008786:	462a      	mov	r2, r5
 8008788:	4621      	mov	r1, r4
 800878a:	f7fd fa76 	bl	8005c7a <memset>
 800878e:	e7f4      	b.n	800877a <_calloc_r+0x12>

08008790 <rshift>:
 8008790:	6903      	ldr	r3, [r0, #16]
 8008792:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008796:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800879a:	f100 0414 	add.w	r4, r0, #20
 800879e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80087a2:	dd46      	ble.n	8008832 <rshift+0xa2>
 80087a4:	f011 011f 	ands.w	r1, r1, #31
 80087a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80087ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80087b0:	d10c      	bne.n	80087cc <rshift+0x3c>
 80087b2:	4629      	mov	r1, r5
 80087b4:	f100 0710 	add.w	r7, r0, #16
 80087b8:	42b1      	cmp	r1, r6
 80087ba:	d335      	bcc.n	8008828 <rshift+0x98>
 80087bc:	1a9b      	subs	r3, r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	1eea      	subs	r2, r5, #3
 80087c2:	4296      	cmp	r6, r2
 80087c4:	bf38      	it	cc
 80087c6:	2300      	movcc	r3, #0
 80087c8:	4423      	add	r3, r4
 80087ca:	e015      	b.n	80087f8 <rshift+0x68>
 80087cc:	46a1      	mov	r9, r4
 80087ce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80087d2:	f1c1 0820 	rsb	r8, r1, #32
 80087d6:	40cf      	lsrs	r7, r1
 80087d8:	f105 0e04 	add.w	lr, r5, #4
 80087dc:	4576      	cmp	r6, lr
 80087de:	46f4      	mov	ip, lr
 80087e0:	d816      	bhi.n	8008810 <rshift+0x80>
 80087e2:	1a9a      	subs	r2, r3, r2
 80087e4:	0092      	lsls	r2, r2, #2
 80087e6:	3a04      	subs	r2, #4
 80087e8:	3501      	adds	r5, #1
 80087ea:	42ae      	cmp	r6, r5
 80087ec:	bf38      	it	cc
 80087ee:	2200      	movcc	r2, #0
 80087f0:	18a3      	adds	r3, r4, r2
 80087f2:	50a7      	str	r7, [r4, r2]
 80087f4:	b107      	cbz	r7, 80087f8 <rshift+0x68>
 80087f6:	3304      	adds	r3, #4
 80087f8:	42a3      	cmp	r3, r4
 80087fa:	eba3 0204 	sub.w	r2, r3, r4
 80087fe:	bf08      	it	eq
 8008800:	2300      	moveq	r3, #0
 8008802:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008806:	6102      	str	r2, [r0, #16]
 8008808:	bf08      	it	eq
 800880a:	6143      	streq	r3, [r0, #20]
 800880c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008810:	f8dc c000 	ldr.w	ip, [ip]
 8008814:	fa0c fc08 	lsl.w	ip, ip, r8
 8008818:	ea4c 0707 	orr.w	r7, ip, r7
 800881c:	f849 7b04 	str.w	r7, [r9], #4
 8008820:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008824:	40cf      	lsrs	r7, r1
 8008826:	e7d9      	b.n	80087dc <rshift+0x4c>
 8008828:	f851 cb04 	ldr.w	ip, [r1], #4
 800882c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008830:	e7c2      	b.n	80087b8 <rshift+0x28>
 8008832:	4623      	mov	r3, r4
 8008834:	e7e0      	b.n	80087f8 <rshift+0x68>

08008836 <__hexdig_fun>:
 8008836:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800883a:	2b09      	cmp	r3, #9
 800883c:	d802      	bhi.n	8008844 <__hexdig_fun+0xe>
 800883e:	3820      	subs	r0, #32
 8008840:	b2c0      	uxtb	r0, r0
 8008842:	4770      	bx	lr
 8008844:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008848:	2b05      	cmp	r3, #5
 800884a:	d801      	bhi.n	8008850 <__hexdig_fun+0x1a>
 800884c:	3847      	subs	r0, #71	@ 0x47
 800884e:	e7f7      	b.n	8008840 <__hexdig_fun+0xa>
 8008850:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008854:	2b05      	cmp	r3, #5
 8008856:	d801      	bhi.n	800885c <__hexdig_fun+0x26>
 8008858:	3827      	subs	r0, #39	@ 0x27
 800885a:	e7f1      	b.n	8008840 <__hexdig_fun+0xa>
 800885c:	2000      	movs	r0, #0
 800885e:	4770      	bx	lr

08008860 <__gethex>:
 8008860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	468a      	mov	sl, r1
 8008866:	4690      	mov	r8, r2
 8008868:	b085      	sub	sp, #20
 800886a:	9302      	str	r3, [sp, #8]
 800886c:	680b      	ldr	r3, [r1, #0]
 800886e:	9001      	str	r0, [sp, #4]
 8008870:	1c9c      	adds	r4, r3, #2
 8008872:	46a1      	mov	r9, r4
 8008874:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008878:	2830      	cmp	r0, #48	@ 0x30
 800887a:	d0fa      	beq.n	8008872 <__gethex+0x12>
 800887c:	eba9 0303 	sub.w	r3, r9, r3
 8008880:	f1a3 0b02 	sub.w	fp, r3, #2
 8008884:	f7ff ffd7 	bl	8008836 <__hexdig_fun>
 8008888:	4605      	mov	r5, r0
 800888a:	2800      	cmp	r0, #0
 800888c:	d168      	bne.n	8008960 <__gethex+0x100>
 800888e:	2201      	movs	r2, #1
 8008890:	4648      	mov	r0, r9
 8008892:	499f      	ldr	r1, [pc, #636]	@ (8008b10 <__gethex+0x2b0>)
 8008894:	f7ff ff14 	bl	80086c0 <strncmp>
 8008898:	4607      	mov	r7, r0
 800889a:	2800      	cmp	r0, #0
 800889c:	d167      	bne.n	800896e <__gethex+0x10e>
 800889e:	f899 0001 	ldrb.w	r0, [r9, #1]
 80088a2:	4626      	mov	r6, r4
 80088a4:	f7ff ffc7 	bl	8008836 <__hexdig_fun>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d062      	beq.n	8008972 <__gethex+0x112>
 80088ac:	4623      	mov	r3, r4
 80088ae:	7818      	ldrb	r0, [r3, #0]
 80088b0:	4699      	mov	r9, r3
 80088b2:	2830      	cmp	r0, #48	@ 0x30
 80088b4:	f103 0301 	add.w	r3, r3, #1
 80088b8:	d0f9      	beq.n	80088ae <__gethex+0x4e>
 80088ba:	f7ff ffbc 	bl	8008836 <__hexdig_fun>
 80088be:	fab0 f580 	clz	r5, r0
 80088c2:	f04f 0b01 	mov.w	fp, #1
 80088c6:	096d      	lsrs	r5, r5, #5
 80088c8:	464a      	mov	r2, r9
 80088ca:	4616      	mov	r6, r2
 80088cc:	7830      	ldrb	r0, [r6, #0]
 80088ce:	3201      	adds	r2, #1
 80088d0:	f7ff ffb1 	bl	8008836 <__hexdig_fun>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d1f8      	bne.n	80088ca <__gethex+0x6a>
 80088d8:	2201      	movs	r2, #1
 80088da:	4630      	mov	r0, r6
 80088dc:	498c      	ldr	r1, [pc, #560]	@ (8008b10 <__gethex+0x2b0>)
 80088de:	f7ff feef 	bl	80086c0 <strncmp>
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d13f      	bne.n	8008966 <__gethex+0x106>
 80088e6:	b944      	cbnz	r4, 80088fa <__gethex+0x9a>
 80088e8:	1c74      	adds	r4, r6, #1
 80088ea:	4622      	mov	r2, r4
 80088ec:	4616      	mov	r6, r2
 80088ee:	7830      	ldrb	r0, [r6, #0]
 80088f0:	3201      	adds	r2, #1
 80088f2:	f7ff ffa0 	bl	8008836 <__hexdig_fun>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d1f8      	bne.n	80088ec <__gethex+0x8c>
 80088fa:	1ba4      	subs	r4, r4, r6
 80088fc:	00a7      	lsls	r7, r4, #2
 80088fe:	7833      	ldrb	r3, [r6, #0]
 8008900:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008904:	2b50      	cmp	r3, #80	@ 0x50
 8008906:	d13e      	bne.n	8008986 <__gethex+0x126>
 8008908:	7873      	ldrb	r3, [r6, #1]
 800890a:	2b2b      	cmp	r3, #43	@ 0x2b
 800890c:	d033      	beq.n	8008976 <__gethex+0x116>
 800890e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008910:	d034      	beq.n	800897c <__gethex+0x11c>
 8008912:	2400      	movs	r4, #0
 8008914:	1c71      	adds	r1, r6, #1
 8008916:	7808      	ldrb	r0, [r1, #0]
 8008918:	f7ff ff8d 	bl	8008836 <__hexdig_fun>
 800891c:	1e43      	subs	r3, r0, #1
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b18      	cmp	r3, #24
 8008922:	d830      	bhi.n	8008986 <__gethex+0x126>
 8008924:	f1a0 0210 	sub.w	r2, r0, #16
 8008928:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800892c:	f7ff ff83 	bl	8008836 <__hexdig_fun>
 8008930:	f100 3cff 	add.w	ip, r0, #4294967295
 8008934:	fa5f fc8c 	uxtb.w	ip, ip
 8008938:	f1bc 0f18 	cmp.w	ip, #24
 800893c:	f04f 030a 	mov.w	r3, #10
 8008940:	d91e      	bls.n	8008980 <__gethex+0x120>
 8008942:	b104      	cbz	r4, 8008946 <__gethex+0xe6>
 8008944:	4252      	negs	r2, r2
 8008946:	4417      	add	r7, r2
 8008948:	f8ca 1000 	str.w	r1, [sl]
 800894c:	b1ed      	cbz	r5, 800898a <__gethex+0x12a>
 800894e:	f1bb 0f00 	cmp.w	fp, #0
 8008952:	bf0c      	ite	eq
 8008954:	2506      	moveq	r5, #6
 8008956:	2500      	movne	r5, #0
 8008958:	4628      	mov	r0, r5
 800895a:	b005      	add	sp, #20
 800895c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008960:	2500      	movs	r5, #0
 8008962:	462c      	mov	r4, r5
 8008964:	e7b0      	b.n	80088c8 <__gethex+0x68>
 8008966:	2c00      	cmp	r4, #0
 8008968:	d1c7      	bne.n	80088fa <__gethex+0x9a>
 800896a:	4627      	mov	r7, r4
 800896c:	e7c7      	b.n	80088fe <__gethex+0x9e>
 800896e:	464e      	mov	r6, r9
 8008970:	462f      	mov	r7, r5
 8008972:	2501      	movs	r5, #1
 8008974:	e7c3      	b.n	80088fe <__gethex+0x9e>
 8008976:	2400      	movs	r4, #0
 8008978:	1cb1      	adds	r1, r6, #2
 800897a:	e7cc      	b.n	8008916 <__gethex+0xb6>
 800897c:	2401      	movs	r4, #1
 800897e:	e7fb      	b.n	8008978 <__gethex+0x118>
 8008980:	fb03 0002 	mla	r0, r3, r2, r0
 8008984:	e7ce      	b.n	8008924 <__gethex+0xc4>
 8008986:	4631      	mov	r1, r6
 8008988:	e7de      	b.n	8008948 <__gethex+0xe8>
 800898a:	4629      	mov	r1, r5
 800898c:	eba6 0309 	sub.w	r3, r6, r9
 8008990:	3b01      	subs	r3, #1
 8008992:	2b07      	cmp	r3, #7
 8008994:	dc0a      	bgt.n	80089ac <__gethex+0x14c>
 8008996:	9801      	ldr	r0, [sp, #4]
 8008998:	f7fe f95c 	bl	8006c54 <_Balloc>
 800899c:	4604      	mov	r4, r0
 800899e:	b940      	cbnz	r0, 80089b2 <__gethex+0x152>
 80089a0:	4602      	mov	r2, r0
 80089a2:	21e4      	movs	r1, #228	@ 0xe4
 80089a4:	4b5b      	ldr	r3, [pc, #364]	@ (8008b14 <__gethex+0x2b4>)
 80089a6:	485c      	ldr	r0, [pc, #368]	@ (8008b18 <__gethex+0x2b8>)
 80089a8:	f7ff fec0 	bl	800872c <__assert_func>
 80089ac:	3101      	adds	r1, #1
 80089ae:	105b      	asrs	r3, r3, #1
 80089b0:	e7ef      	b.n	8008992 <__gethex+0x132>
 80089b2:	2300      	movs	r3, #0
 80089b4:	f100 0a14 	add.w	sl, r0, #20
 80089b8:	4655      	mov	r5, sl
 80089ba:	469b      	mov	fp, r3
 80089bc:	45b1      	cmp	r9, r6
 80089be:	d337      	bcc.n	8008a30 <__gethex+0x1d0>
 80089c0:	f845 bb04 	str.w	fp, [r5], #4
 80089c4:	eba5 050a 	sub.w	r5, r5, sl
 80089c8:	10ad      	asrs	r5, r5, #2
 80089ca:	6125      	str	r5, [r4, #16]
 80089cc:	4658      	mov	r0, fp
 80089ce:	f7fe fa33 	bl	8006e38 <__hi0bits>
 80089d2:	016d      	lsls	r5, r5, #5
 80089d4:	f8d8 6000 	ldr.w	r6, [r8]
 80089d8:	1a2d      	subs	r5, r5, r0
 80089da:	42b5      	cmp	r5, r6
 80089dc:	dd54      	ble.n	8008a88 <__gethex+0x228>
 80089de:	1bad      	subs	r5, r5, r6
 80089e0:	4629      	mov	r1, r5
 80089e2:	4620      	mov	r0, r4
 80089e4:	f7fe fdb5 	bl	8007552 <__any_on>
 80089e8:	4681      	mov	r9, r0
 80089ea:	b178      	cbz	r0, 8008a0c <__gethex+0x1ac>
 80089ec:	f04f 0901 	mov.w	r9, #1
 80089f0:	1e6b      	subs	r3, r5, #1
 80089f2:	1159      	asrs	r1, r3, #5
 80089f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80089f8:	f003 021f 	and.w	r2, r3, #31
 80089fc:	fa09 f202 	lsl.w	r2, r9, r2
 8008a00:	420a      	tst	r2, r1
 8008a02:	d003      	beq.n	8008a0c <__gethex+0x1ac>
 8008a04:	454b      	cmp	r3, r9
 8008a06:	dc36      	bgt.n	8008a76 <__gethex+0x216>
 8008a08:	f04f 0902 	mov.w	r9, #2
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f7ff febe 	bl	8008790 <rshift>
 8008a14:	442f      	add	r7, r5
 8008a16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a1a:	42bb      	cmp	r3, r7
 8008a1c:	da42      	bge.n	8008aa4 <__gethex+0x244>
 8008a1e:	4621      	mov	r1, r4
 8008a20:	9801      	ldr	r0, [sp, #4]
 8008a22:	f7fe f957 	bl	8006cd4 <_Bfree>
 8008a26:	2300      	movs	r3, #0
 8008a28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a2a:	25a3      	movs	r5, #163	@ 0xa3
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	e793      	b.n	8008958 <__gethex+0xf8>
 8008a30:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008a34:	2a2e      	cmp	r2, #46	@ 0x2e
 8008a36:	d012      	beq.n	8008a5e <__gethex+0x1fe>
 8008a38:	2b20      	cmp	r3, #32
 8008a3a:	d104      	bne.n	8008a46 <__gethex+0x1e6>
 8008a3c:	f845 bb04 	str.w	fp, [r5], #4
 8008a40:	f04f 0b00 	mov.w	fp, #0
 8008a44:	465b      	mov	r3, fp
 8008a46:	7830      	ldrb	r0, [r6, #0]
 8008a48:	9303      	str	r3, [sp, #12]
 8008a4a:	f7ff fef4 	bl	8008836 <__hexdig_fun>
 8008a4e:	9b03      	ldr	r3, [sp, #12]
 8008a50:	f000 000f 	and.w	r0, r0, #15
 8008a54:	4098      	lsls	r0, r3
 8008a56:	ea4b 0b00 	orr.w	fp, fp, r0
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	e7ae      	b.n	80089bc <__gethex+0x15c>
 8008a5e:	45b1      	cmp	r9, r6
 8008a60:	d8ea      	bhi.n	8008a38 <__gethex+0x1d8>
 8008a62:	2201      	movs	r2, #1
 8008a64:	4630      	mov	r0, r6
 8008a66:	492a      	ldr	r1, [pc, #168]	@ (8008b10 <__gethex+0x2b0>)
 8008a68:	9303      	str	r3, [sp, #12]
 8008a6a:	f7ff fe29 	bl	80086c0 <strncmp>
 8008a6e:	9b03      	ldr	r3, [sp, #12]
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d1e1      	bne.n	8008a38 <__gethex+0x1d8>
 8008a74:	e7a2      	b.n	80089bc <__gethex+0x15c>
 8008a76:	4620      	mov	r0, r4
 8008a78:	1ea9      	subs	r1, r5, #2
 8008a7a:	f7fe fd6a 	bl	8007552 <__any_on>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d0c2      	beq.n	8008a08 <__gethex+0x1a8>
 8008a82:	f04f 0903 	mov.w	r9, #3
 8008a86:	e7c1      	b.n	8008a0c <__gethex+0x1ac>
 8008a88:	da09      	bge.n	8008a9e <__gethex+0x23e>
 8008a8a:	1b75      	subs	r5, r6, r5
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	462a      	mov	r2, r5
 8008a90:	9801      	ldr	r0, [sp, #4]
 8008a92:	f7fe fb2f 	bl	80070f4 <__lshift>
 8008a96:	4604      	mov	r4, r0
 8008a98:	1b7f      	subs	r7, r7, r5
 8008a9a:	f100 0a14 	add.w	sl, r0, #20
 8008a9e:	f04f 0900 	mov.w	r9, #0
 8008aa2:	e7b8      	b.n	8008a16 <__gethex+0x1b6>
 8008aa4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008aa8:	42bd      	cmp	r5, r7
 8008aaa:	dd6f      	ble.n	8008b8c <__gethex+0x32c>
 8008aac:	1bed      	subs	r5, r5, r7
 8008aae:	42ae      	cmp	r6, r5
 8008ab0:	dc34      	bgt.n	8008b1c <__gethex+0x2bc>
 8008ab2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d022      	beq.n	8008b00 <__gethex+0x2a0>
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d024      	beq.n	8008b08 <__gethex+0x2a8>
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d115      	bne.n	8008aee <__gethex+0x28e>
 8008ac2:	42ae      	cmp	r6, r5
 8008ac4:	d113      	bne.n	8008aee <__gethex+0x28e>
 8008ac6:	2e01      	cmp	r6, #1
 8008ac8:	d10b      	bne.n	8008ae2 <__gethex+0x282>
 8008aca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ace:	9a02      	ldr	r2, [sp, #8]
 8008ad0:	2562      	movs	r5, #98	@ 0x62
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	6123      	str	r3, [r4, #16]
 8008ad8:	f8ca 3000 	str.w	r3, [sl]
 8008adc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ade:	601c      	str	r4, [r3, #0]
 8008ae0:	e73a      	b.n	8008958 <__gethex+0xf8>
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	1e71      	subs	r1, r6, #1
 8008ae6:	f7fe fd34 	bl	8007552 <__any_on>
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d1ed      	bne.n	8008aca <__gethex+0x26a>
 8008aee:	4621      	mov	r1, r4
 8008af0:	9801      	ldr	r0, [sp, #4]
 8008af2:	f7fe f8ef 	bl	8006cd4 <_Bfree>
 8008af6:	2300      	movs	r3, #0
 8008af8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008afa:	2550      	movs	r5, #80	@ 0x50
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	e72b      	b.n	8008958 <__gethex+0xf8>
 8008b00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1f3      	bne.n	8008aee <__gethex+0x28e>
 8008b06:	e7e0      	b.n	8008aca <__gethex+0x26a>
 8008b08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1dd      	bne.n	8008aca <__gethex+0x26a>
 8008b0e:	e7ee      	b.n	8008aee <__gethex+0x28e>
 8008b10:	08009581 	.word	0x08009581
 8008b14:	08009517 	.word	0x08009517
 8008b18:	080095d8 	.word	0x080095d8
 8008b1c:	1e6f      	subs	r7, r5, #1
 8008b1e:	f1b9 0f00 	cmp.w	r9, #0
 8008b22:	d130      	bne.n	8008b86 <__gethex+0x326>
 8008b24:	b127      	cbz	r7, 8008b30 <__gethex+0x2d0>
 8008b26:	4639      	mov	r1, r7
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f7fe fd12 	bl	8007552 <__any_on>
 8008b2e:	4681      	mov	r9, r0
 8008b30:	2301      	movs	r3, #1
 8008b32:	4629      	mov	r1, r5
 8008b34:	1b76      	subs	r6, r6, r5
 8008b36:	2502      	movs	r5, #2
 8008b38:	117a      	asrs	r2, r7, #5
 8008b3a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008b3e:	f007 071f 	and.w	r7, r7, #31
 8008b42:	40bb      	lsls	r3, r7
 8008b44:	4213      	tst	r3, r2
 8008b46:	4620      	mov	r0, r4
 8008b48:	bf18      	it	ne
 8008b4a:	f049 0902 	orrne.w	r9, r9, #2
 8008b4e:	f7ff fe1f 	bl	8008790 <rshift>
 8008b52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008b56:	f1b9 0f00 	cmp.w	r9, #0
 8008b5a:	d047      	beq.n	8008bec <__gethex+0x38c>
 8008b5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d015      	beq.n	8008b90 <__gethex+0x330>
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d017      	beq.n	8008b98 <__gethex+0x338>
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d109      	bne.n	8008b80 <__gethex+0x320>
 8008b6c:	f019 0f02 	tst.w	r9, #2
 8008b70:	d006      	beq.n	8008b80 <__gethex+0x320>
 8008b72:	f8da 3000 	ldr.w	r3, [sl]
 8008b76:	ea49 0903 	orr.w	r9, r9, r3
 8008b7a:	f019 0f01 	tst.w	r9, #1
 8008b7e:	d10e      	bne.n	8008b9e <__gethex+0x33e>
 8008b80:	f045 0510 	orr.w	r5, r5, #16
 8008b84:	e032      	b.n	8008bec <__gethex+0x38c>
 8008b86:	f04f 0901 	mov.w	r9, #1
 8008b8a:	e7d1      	b.n	8008b30 <__gethex+0x2d0>
 8008b8c:	2501      	movs	r5, #1
 8008b8e:	e7e2      	b.n	8008b56 <__gethex+0x2f6>
 8008b90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b92:	f1c3 0301 	rsb	r3, r3, #1
 8008b96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0f0      	beq.n	8008b80 <__gethex+0x320>
 8008b9e:	f04f 0c00 	mov.w	ip, #0
 8008ba2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ba6:	f104 0314 	add.w	r3, r4, #20
 8008baa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008bae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008bbc:	d01b      	beq.n	8008bf6 <__gethex+0x396>
 8008bbe:	3201      	adds	r2, #1
 8008bc0:	6002      	str	r2, [r0, #0]
 8008bc2:	2d02      	cmp	r5, #2
 8008bc4:	f104 0314 	add.w	r3, r4, #20
 8008bc8:	d13c      	bne.n	8008c44 <__gethex+0x3e4>
 8008bca:	f8d8 2000 	ldr.w	r2, [r8]
 8008bce:	3a01      	subs	r2, #1
 8008bd0:	42b2      	cmp	r2, r6
 8008bd2:	d109      	bne.n	8008be8 <__gethex+0x388>
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	1171      	asrs	r1, r6, #5
 8008bd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bdc:	f006 061f 	and.w	r6, r6, #31
 8008be0:	fa02 f606 	lsl.w	r6, r2, r6
 8008be4:	421e      	tst	r6, r3
 8008be6:	d13a      	bne.n	8008c5e <__gethex+0x3fe>
 8008be8:	f045 0520 	orr.w	r5, r5, #32
 8008bec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bee:	601c      	str	r4, [r3, #0]
 8008bf0:	9b02      	ldr	r3, [sp, #8]
 8008bf2:	601f      	str	r7, [r3, #0]
 8008bf4:	e6b0      	b.n	8008958 <__gethex+0xf8>
 8008bf6:	4299      	cmp	r1, r3
 8008bf8:	f843 cc04 	str.w	ip, [r3, #-4]
 8008bfc:	d8d9      	bhi.n	8008bb2 <__gethex+0x352>
 8008bfe:	68a3      	ldr	r3, [r4, #8]
 8008c00:	459b      	cmp	fp, r3
 8008c02:	db17      	blt.n	8008c34 <__gethex+0x3d4>
 8008c04:	6861      	ldr	r1, [r4, #4]
 8008c06:	9801      	ldr	r0, [sp, #4]
 8008c08:	3101      	adds	r1, #1
 8008c0a:	f7fe f823 	bl	8006c54 <_Balloc>
 8008c0e:	4681      	mov	r9, r0
 8008c10:	b918      	cbnz	r0, 8008c1a <__gethex+0x3ba>
 8008c12:	4602      	mov	r2, r0
 8008c14:	2184      	movs	r1, #132	@ 0x84
 8008c16:	4b19      	ldr	r3, [pc, #100]	@ (8008c7c <__gethex+0x41c>)
 8008c18:	e6c5      	b.n	80089a6 <__gethex+0x146>
 8008c1a:	6922      	ldr	r2, [r4, #16]
 8008c1c:	f104 010c 	add.w	r1, r4, #12
 8008c20:	3202      	adds	r2, #2
 8008c22:	0092      	lsls	r2, r2, #2
 8008c24:	300c      	adds	r0, #12
 8008c26:	f7ff fd6d 	bl	8008704 <memcpy>
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	9801      	ldr	r0, [sp, #4]
 8008c2e:	f7fe f851 	bl	8006cd4 <_Bfree>
 8008c32:	464c      	mov	r4, r9
 8008c34:	6923      	ldr	r3, [r4, #16]
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	6122      	str	r2, [r4, #16]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c40:	615a      	str	r2, [r3, #20]
 8008c42:	e7be      	b.n	8008bc2 <__gethex+0x362>
 8008c44:	6922      	ldr	r2, [r4, #16]
 8008c46:	455a      	cmp	r2, fp
 8008c48:	dd0b      	ble.n	8008c62 <__gethex+0x402>
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f7ff fd9f 	bl	8008790 <rshift>
 8008c52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c56:	3701      	adds	r7, #1
 8008c58:	42bb      	cmp	r3, r7
 8008c5a:	f6ff aee0 	blt.w	8008a1e <__gethex+0x1be>
 8008c5e:	2501      	movs	r5, #1
 8008c60:	e7c2      	b.n	8008be8 <__gethex+0x388>
 8008c62:	f016 061f 	ands.w	r6, r6, #31
 8008c66:	d0fa      	beq.n	8008c5e <__gethex+0x3fe>
 8008c68:	4453      	add	r3, sl
 8008c6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c6e:	f7fe f8e3 	bl	8006e38 <__hi0bits>
 8008c72:	f1c6 0620 	rsb	r6, r6, #32
 8008c76:	42b0      	cmp	r0, r6
 8008c78:	dbe7      	blt.n	8008c4a <__gethex+0x3ea>
 8008c7a:	e7f0      	b.n	8008c5e <__gethex+0x3fe>
 8008c7c:	08009517 	.word	0x08009517

08008c80 <L_shift>:
 8008c80:	f1c2 0208 	rsb	r2, r2, #8
 8008c84:	0092      	lsls	r2, r2, #2
 8008c86:	b570      	push	{r4, r5, r6, lr}
 8008c88:	f1c2 0620 	rsb	r6, r2, #32
 8008c8c:	6843      	ldr	r3, [r0, #4]
 8008c8e:	6804      	ldr	r4, [r0, #0]
 8008c90:	fa03 f506 	lsl.w	r5, r3, r6
 8008c94:	432c      	orrs	r4, r5
 8008c96:	40d3      	lsrs	r3, r2
 8008c98:	6004      	str	r4, [r0, #0]
 8008c9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c9e:	4288      	cmp	r0, r1
 8008ca0:	d3f4      	bcc.n	8008c8c <L_shift+0xc>
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}

08008ca4 <__match>:
 8008ca4:	b530      	push	{r4, r5, lr}
 8008ca6:	6803      	ldr	r3, [r0, #0]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cae:	b914      	cbnz	r4, 8008cb6 <__match+0x12>
 8008cb0:	6003      	str	r3, [r0, #0]
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	bd30      	pop	{r4, r5, pc}
 8008cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cba:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008cbe:	2d19      	cmp	r5, #25
 8008cc0:	bf98      	it	ls
 8008cc2:	3220      	addls	r2, #32
 8008cc4:	42a2      	cmp	r2, r4
 8008cc6:	d0f0      	beq.n	8008caa <__match+0x6>
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e7f3      	b.n	8008cb4 <__match+0x10>

08008ccc <__hexnan>:
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	2500      	movs	r5, #0
 8008cd2:	680b      	ldr	r3, [r1, #0]
 8008cd4:	4682      	mov	sl, r0
 8008cd6:	115e      	asrs	r6, r3, #5
 8008cd8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cdc:	f013 031f 	ands.w	r3, r3, #31
 8008ce0:	bf18      	it	ne
 8008ce2:	3604      	addne	r6, #4
 8008ce4:	1f37      	subs	r7, r6, #4
 8008ce6:	4690      	mov	r8, r2
 8008ce8:	46b9      	mov	r9, r7
 8008cea:	463c      	mov	r4, r7
 8008cec:	46ab      	mov	fp, r5
 8008cee:	b087      	sub	sp, #28
 8008cf0:	6801      	ldr	r1, [r0, #0]
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	f846 5c04 	str.w	r5, [r6, #-4]
 8008cf8:	9502      	str	r5, [sp, #8]
 8008cfa:	784a      	ldrb	r2, [r1, #1]
 8008cfc:	1c4b      	adds	r3, r1, #1
 8008cfe:	9303      	str	r3, [sp, #12]
 8008d00:	b342      	cbz	r2, 8008d54 <__hexnan+0x88>
 8008d02:	4610      	mov	r0, r2
 8008d04:	9105      	str	r1, [sp, #20]
 8008d06:	9204      	str	r2, [sp, #16]
 8008d08:	f7ff fd95 	bl	8008836 <__hexdig_fun>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	d151      	bne.n	8008db4 <__hexnan+0xe8>
 8008d10:	9a04      	ldr	r2, [sp, #16]
 8008d12:	9905      	ldr	r1, [sp, #20]
 8008d14:	2a20      	cmp	r2, #32
 8008d16:	d818      	bhi.n	8008d4a <__hexnan+0x7e>
 8008d18:	9b02      	ldr	r3, [sp, #8]
 8008d1a:	459b      	cmp	fp, r3
 8008d1c:	dd13      	ble.n	8008d46 <__hexnan+0x7a>
 8008d1e:	454c      	cmp	r4, r9
 8008d20:	d206      	bcs.n	8008d30 <__hexnan+0x64>
 8008d22:	2d07      	cmp	r5, #7
 8008d24:	dc04      	bgt.n	8008d30 <__hexnan+0x64>
 8008d26:	462a      	mov	r2, r5
 8008d28:	4649      	mov	r1, r9
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f7ff ffa8 	bl	8008c80 <L_shift>
 8008d30:	4544      	cmp	r4, r8
 8008d32:	d952      	bls.n	8008dda <__hexnan+0x10e>
 8008d34:	2300      	movs	r3, #0
 8008d36:	f1a4 0904 	sub.w	r9, r4, #4
 8008d3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d3e:	461d      	mov	r5, r3
 8008d40:	464c      	mov	r4, r9
 8008d42:	f8cd b008 	str.w	fp, [sp, #8]
 8008d46:	9903      	ldr	r1, [sp, #12]
 8008d48:	e7d7      	b.n	8008cfa <__hexnan+0x2e>
 8008d4a:	2a29      	cmp	r2, #41	@ 0x29
 8008d4c:	d157      	bne.n	8008dfe <__hexnan+0x132>
 8008d4e:	3102      	adds	r1, #2
 8008d50:	f8ca 1000 	str.w	r1, [sl]
 8008d54:	f1bb 0f00 	cmp.w	fp, #0
 8008d58:	d051      	beq.n	8008dfe <__hexnan+0x132>
 8008d5a:	454c      	cmp	r4, r9
 8008d5c:	d206      	bcs.n	8008d6c <__hexnan+0xa0>
 8008d5e:	2d07      	cmp	r5, #7
 8008d60:	dc04      	bgt.n	8008d6c <__hexnan+0xa0>
 8008d62:	462a      	mov	r2, r5
 8008d64:	4649      	mov	r1, r9
 8008d66:	4620      	mov	r0, r4
 8008d68:	f7ff ff8a 	bl	8008c80 <L_shift>
 8008d6c:	4544      	cmp	r4, r8
 8008d6e:	d936      	bls.n	8008dde <__hexnan+0x112>
 8008d70:	4623      	mov	r3, r4
 8008d72:	f1a8 0204 	sub.w	r2, r8, #4
 8008d76:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d7a:	429f      	cmp	r7, r3
 8008d7c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d80:	d2f9      	bcs.n	8008d76 <__hexnan+0xaa>
 8008d82:	1b3b      	subs	r3, r7, r4
 8008d84:	f023 0303 	bic.w	r3, r3, #3
 8008d88:	3304      	adds	r3, #4
 8008d8a:	3401      	adds	r4, #1
 8008d8c:	3e03      	subs	r6, #3
 8008d8e:	42b4      	cmp	r4, r6
 8008d90:	bf88      	it	hi
 8008d92:	2304      	movhi	r3, #4
 8008d94:	2200      	movs	r2, #0
 8008d96:	4443      	add	r3, r8
 8008d98:	f843 2b04 	str.w	r2, [r3], #4
 8008d9c:	429f      	cmp	r7, r3
 8008d9e:	d2fb      	bcs.n	8008d98 <__hexnan+0xcc>
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	b91b      	cbnz	r3, 8008dac <__hexnan+0xe0>
 8008da4:	4547      	cmp	r7, r8
 8008da6:	d128      	bne.n	8008dfa <__hexnan+0x12e>
 8008da8:	2301      	movs	r3, #1
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	2005      	movs	r0, #5
 8008dae:	b007      	add	sp, #28
 8008db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db4:	3501      	adds	r5, #1
 8008db6:	2d08      	cmp	r5, #8
 8008db8:	f10b 0b01 	add.w	fp, fp, #1
 8008dbc:	dd06      	ble.n	8008dcc <__hexnan+0x100>
 8008dbe:	4544      	cmp	r4, r8
 8008dc0:	d9c1      	bls.n	8008d46 <__hexnan+0x7a>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2501      	movs	r5, #1
 8008dc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dca:	3c04      	subs	r4, #4
 8008dcc:	6822      	ldr	r2, [r4, #0]
 8008dce:	f000 000f 	and.w	r0, r0, #15
 8008dd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008dd6:	6020      	str	r0, [r4, #0]
 8008dd8:	e7b5      	b.n	8008d46 <__hexnan+0x7a>
 8008dda:	2508      	movs	r5, #8
 8008ddc:	e7b3      	b.n	8008d46 <__hexnan+0x7a>
 8008dde:	9b01      	ldr	r3, [sp, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d0dd      	beq.n	8008da0 <__hexnan+0xd4>
 8008de4:	f04f 32ff 	mov.w	r2, #4294967295
 8008de8:	f1c3 0320 	rsb	r3, r3, #32
 8008dec:	40da      	lsrs	r2, r3
 8008dee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008df2:	4013      	ands	r3, r2
 8008df4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008df8:	e7d2      	b.n	8008da0 <__hexnan+0xd4>
 8008dfa:	3f04      	subs	r7, #4
 8008dfc:	e7d0      	b.n	8008da0 <__hexnan+0xd4>
 8008dfe:	2004      	movs	r0, #4
 8008e00:	e7d5      	b.n	8008dae <__hexnan+0xe2>

08008e02 <__ascii_mbtowc>:
 8008e02:	b082      	sub	sp, #8
 8008e04:	b901      	cbnz	r1, 8008e08 <__ascii_mbtowc+0x6>
 8008e06:	a901      	add	r1, sp, #4
 8008e08:	b142      	cbz	r2, 8008e1c <__ascii_mbtowc+0x1a>
 8008e0a:	b14b      	cbz	r3, 8008e20 <__ascii_mbtowc+0x1e>
 8008e0c:	7813      	ldrb	r3, [r2, #0]
 8008e0e:	600b      	str	r3, [r1, #0]
 8008e10:	7812      	ldrb	r2, [r2, #0]
 8008e12:	1e10      	subs	r0, r2, #0
 8008e14:	bf18      	it	ne
 8008e16:	2001      	movne	r0, #1
 8008e18:	b002      	add	sp, #8
 8008e1a:	4770      	bx	lr
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	e7fb      	b.n	8008e18 <__ascii_mbtowc+0x16>
 8008e20:	f06f 0001 	mvn.w	r0, #1
 8008e24:	e7f8      	b.n	8008e18 <__ascii_mbtowc+0x16>

08008e26 <_realloc_r>:
 8008e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	460d      	mov	r5, r1
 8008e30:	b921      	cbnz	r1, 8008e3c <_realloc_r+0x16>
 8008e32:	4611      	mov	r1, r2
 8008e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e38:	f7fd be80 	b.w	8006b3c <_malloc_r>
 8008e3c:	b92a      	cbnz	r2, 8008e4a <_realloc_r+0x24>
 8008e3e:	f7fd fe0b 	bl	8006a58 <_free_r>
 8008e42:	4625      	mov	r5, r4
 8008e44:	4628      	mov	r0, r5
 8008e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e4a:	f000 f840 	bl	8008ece <_malloc_usable_size_r>
 8008e4e:	4284      	cmp	r4, r0
 8008e50:	4606      	mov	r6, r0
 8008e52:	d802      	bhi.n	8008e5a <_realloc_r+0x34>
 8008e54:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e58:	d8f4      	bhi.n	8008e44 <_realloc_r+0x1e>
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	f7fd fe6d 	bl	8006b3c <_malloc_r>
 8008e62:	4680      	mov	r8, r0
 8008e64:	b908      	cbnz	r0, 8008e6a <_realloc_r+0x44>
 8008e66:	4645      	mov	r5, r8
 8008e68:	e7ec      	b.n	8008e44 <_realloc_r+0x1e>
 8008e6a:	42b4      	cmp	r4, r6
 8008e6c:	4622      	mov	r2, r4
 8008e6e:	4629      	mov	r1, r5
 8008e70:	bf28      	it	cs
 8008e72:	4632      	movcs	r2, r6
 8008e74:	f7ff fc46 	bl	8008704 <memcpy>
 8008e78:	4629      	mov	r1, r5
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	f7fd fdec 	bl	8006a58 <_free_r>
 8008e80:	e7f1      	b.n	8008e66 <_realloc_r+0x40>

08008e82 <__ascii_wctomb>:
 8008e82:	4603      	mov	r3, r0
 8008e84:	4608      	mov	r0, r1
 8008e86:	b141      	cbz	r1, 8008e9a <__ascii_wctomb+0x18>
 8008e88:	2aff      	cmp	r2, #255	@ 0xff
 8008e8a:	d904      	bls.n	8008e96 <__ascii_wctomb+0x14>
 8008e8c:	228a      	movs	r2, #138	@ 0x8a
 8008e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	4770      	bx	lr
 8008e96:	2001      	movs	r0, #1
 8008e98:	700a      	strb	r2, [r1, #0]
 8008e9a:	4770      	bx	lr

08008e9c <fiprintf>:
 8008e9c:	b40e      	push	{r1, r2, r3}
 8008e9e:	b503      	push	{r0, r1, lr}
 8008ea0:	4601      	mov	r1, r0
 8008ea2:	ab03      	add	r3, sp, #12
 8008ea4:	4805      	ldr	r0, [pc, #20]	@ (8008ebc <fiprintf+0x20>)
 8008ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eaa:	6800      	ldr	r0, [r0, #0]
 8008eac:	9301      	str	r3, [sp, #4]
 8008eae:	f000 f83d 	bl	8008f2c <_vfiprintf_r>
 8008eb2:	b002      	add	sp, #8
 8008eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb8:	b003      	add	sp, #12
 8008eba:	4770      	bx	lr
 8008ebc:	20000018 	.word	0x20000018

08008ec0 <abort>:
 8008ec0:	2006      	movs	r0, #6
 8008ec2:	b508      	push	{r3, lr}
 8008ec4:	f000 fa06 	bl	80092d4 <raise>
 8008ec8:	2001      	movs	r0, #1
 8008eca:	f7f9 f98a 	bl	80021e2 <_exit>

08008ece <_malloc_usable_size_r>:
 8008ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed2:	1f18      	subs	r0, r3, #4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bfbc      	itt	lt
 8008ed8:	580b      	ldrlt	r3, [r1, r0]
 8008eda:	18c0      	addlt	r0, r0, r3
 8008edc:	4770      	bx	lr

08008ede <__sfputc_r>:
 8008ede:	6893      	ldr	r3, [r2, #8]
 8008ee0:	b410      	push	{r4}
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	6093      	str	r3, [r2, #8]
 8008ee8:	da07      	bge.n	8008efa <__sfputc_r+0x1c>
 8008eea:	6994      	ldr	r4, [r2, #24]
 8008eec:	42a3      	cmp	r3, r4
 8008eee:	db01      	blt.n	8008ef4 <__sfputc_r+0x16>
 8008ef0:	290a      	cmp	r1, #10
 8008ef2:	d102      	bne.n	8008efa <__sfputc_r+0x1c>
 8008ef4:	bc10      	pop	{r4}
 8008ef6:	f000 b931 	b.w	800915c <__swbuf_r>
 8008efa:	6813      	ldr	r3, [r2, #0]
 8008efc:	1c58      	adds	r0, r3, #1
 8008efe:	6010      	str	r0, [r2, #0]
 8008f00:	7019      	strb	r1, [r3, #0]
 8008f02:	4608      	mov	r0, r1
 8008f04:	bc10      	pop	{r4}
 8008f06:	4770      	bx	lr

08008f08 <__sfputs_r>:
 8008f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	460f      	mov	r7, r1
 8008f0e:	4614      	mov	r4, r2
 8008f10:	18d5      	adds	r5, r2, r3
 8008f12:	42ac      	cmp	r4, r5
 8008f14:	d101      	bne.n	8008f1a <__sfputs_r+0x12>
 8008f16:	2000      	movs	r0, #0
 8008f18:	e007      	b.n	8008f2a <__sfputs_r+0x22>
 8008f1a:	463a      	mov	r2, r7
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f22:	f7ff ffdc 	bl	8008ede <__sfputc_r>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	d1f3      	bne.n	8008f12 <__sfputs_r+0xa>
 8008f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f2c <_vfiprintf_r>:
 8008f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f30:	460d      	mov	r5, r1
 8008f32:	4614      	mov	r4, r2
 8008f34:	4698      	mov	r8, r3
 8008f36:	4606      	mov	r6, r0
 8008f38:	b09d      	sub	sp, #116	@ 0x74
 8008f3a:	b118      	cbz	r0, 8008f44 <_vfiprintf_r+0x18>
 8008f3c:	6a03      	ldr	r3, [r0, #32]
 8008f3e:	b90b      	cbnz	r3, 8008f44 <_vfiprintf_r+0x18>
 8008f40:	f7fc fe00 	bl	8005b44 <__sinit>
 8008f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f46:	07d9      	lsls	r1, r3, #31
 8008f48:	d405      	bmi.n	8008f56 <_vfiprintf_r+0x2a>
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	059a      	lsls	r2, r3, #22
 8008f4e:	d402      	bmi.n	8008f56 <_vfiprintf_r+0x2a>
 8008f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f52:	f7fc ff10 	bl	8005d76 <__retarget_lock_acquire_recursive>
 8008f56:	89ab      	ldrh	r3, [r5, #12]
 8008f58:	071b      	lsls	r3, r3, #28
 8008f5a:	d501      	bpl.n	8008f60 <_vfiprintf_r+0x34>
 8008f5c:	692b      	ldr	r3, [r5, #16]
 8008f5e:	b99b      	cbnz	r3, 8008f88 <_vfiprintf_r+0x5c>
 8008f60:	4629      	mov	r1, r5
 8008f62:	4630      	mov	r0, r6
 8008f64:	f000 f938 	bl	80091d8 <__swsetup_r>
 8008f68:	b170      	cbz	r0, 8008f88 <_vfiprintf_r+0x5c>
 8008f6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f6c:	07dc      	lsls	r4, r3, #31
 8008f6e:	d504      	bpl.n	8008f7a <_vfiprintf_r+0x4e>
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	b01d      	add	sp, #116	@ 0x74
 8008f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f7a:	89ab      	ldrh	r3, [r5, #12]
 8008f7c:	0598      	lsls	r0, r3, #22
 8008f7e:	d4f7      	bmi.n	8008f70 <_vfiprintf_r+0x44>
 8008f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f82:	f7fc fef9 	bl	8005d78 <__retarget_lock_release_recursive>
 8008f86:	e7f3      	b.n	8008f70 <_vfiprintf_r+0x44>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f8c:	2320      	movs	r3, #32
 8008f8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f92:	2330      	movs	r3, #48	@ 0x30
 8008f94:	f04f 0901 	mov.w	r9, #1
 8008f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f9c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009148 <_vfiprintf_r+0x21c>
 8008fa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fa4:	4623      	mov	r3, r4
 8008fa6:	469a      	mov	sl, r3
 8008fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fac:	b10a      	cbz	r2, 8008fb2 <_vfiprintf_r+0x86>
 8008fae:	2a25      	cmp	r2, #37	@ 0x25
 8008fb0:	d1f9      	bne.n	8008fa6 <_vfiprintf_r+0x7a>
 8008fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8008fb6:	d00b      	beq.n	8008fd0 <_vfiprintf_r+0xa4>
 8008fb8:	465b      	mov	r3, fp
 8008fba:	4622      	mov	r2, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7ff ffa2 	bl	8008f08 <__sfputs_r>
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	f000 80a7 	beq.w	8009118 <_vfiprintf_r+0x1ec>
 8008fca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fcc:	445a      	add	r2, fp
 8008fce:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 809f 	beq.w	8009118 <_vfiprintf_r+0x1ec>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fe4:	f10a 0a01 	add.w	sl, sl, #1
 8008fe8:	9304      	str	r3, [sp, #16]
 8008fea:	9307      	str	r3, [sp, #28]
 8008fec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ff0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ff2:	4654      	mov	r4, sl
 8008ff4:	2205      	movs	r2, #5
 8008ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ffa:	4853      	ldr	r0, [pc, #332]	@ (8009148 <_vfiprintf_r+0x21c>)
 8008ffc:	f7fc febd 	bl	8005d7a <memchr>
 8009000:	9a04      	ldr	r2, [sp, #16]
 8009002:	b9d8      	cbnz	r0, 800903c <_vfiprintf_r+0x110>
 8009004:	06d1      	lsls	r1, r2, #27
 8009006:	bf44      	itt	mi
 8009008:	2320      	movmi	r3, #32
 800900a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800900e:	0713      	lsls	r3, r2, #28
 8009010:	bf44      	itt	mi
 8009012:	232b      	movmi	r3, #43	@ 0x2b
 8009014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009018:	f89a 3000 	ldrb.w	r3, [sl]
 800901c:	2b2a      	cmp	r3, #42	@ 0x2a
 800901e:	d015      	beq.n	800904c <_vfiprintf_r+0x120>
 8009020:	4654      	mov	r4, sl
 8009022:	2000      	movs	r0, #0
 8009024:	f04f 0c0a 	mov.w	ip, #10
 8009028:	9a07      	ldr	r2, [sp, #28]
 800902a:	4621      	mov	r1, r4
 800902c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009030:	3b30      	subs	r3, #48	@ 0x30
 8009032:	2b09      	cmp	r3, #9
 8009034:	d94b      	bls.n	80090ce <_vfiprintf_r+0x1a2>
 8009036:	b1b0      	cbz	r0, 8009066 <_vfiprintf_r+0x13a>
 8009038:	9207      	str	r2, [sp, #28]
 800903a:	e014      	b.n	8009066 <_vfiprintf_r+0x13a>
 800903c:	eba0 0308 	sub.w	r3, r0, r8
 8009040:	fa09 f303 	lsl.w	r3, r9, r3
 8009044:	4313      	orrs	r3, r2
 8009046:	46a2      	mov	sl, r4
 8009048:	9304      	str	r3, [sp, #16]
 800904a:	e7d2      	b.n	8008ff2 <_vfiprintf_r+0xc6>
 800904c:	9b03      	ldr	r3, [sp, #12]
 800904e:	1d19      	adds	r1, r3, #4
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	9103      	str	r1, [sp, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	bfbb      	ittet	lt
 8009058:	425b      	neglt	r3, r3
 800905a:	f042 0202 	orrlt.w	r2, r2, #2
 800905e:	9307      	strge	r3, [sp, #28]
 8009060:	9307      	strlt	r3, [sp, #28]
 8009062:	bfb8      	it	lt
 8009064:	9204      	strlt	r2, [sp, #16]
 8009066:	7823      	ldrb	r3, [r4, #0]
 8009068:	2b2e      	cmp	r3, #46	@ 0x2e
 800906a:	d10a      	bne.n	8009082 <_vfiprintf_r+0x156>
 800906c:	7863      	ldrb	r3, [r4, #1]
 800906e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009070:	d132      	bne.n	80090d8 <_vfiprintf_r+0x1ac>
 8009072:	9b03      	ldr	r3, [sp, #12]
 8009074:	3402      	adds	r4, #2
 8009076:	1d1a      	adds	r2, r3, #4
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	9203      	str	r2, [sp, #12]
 800907c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009080:	9305      	str	r3, [sp, #20]
 8009082:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800914c <_vfiprintf_r+0x220>
 8009086:	2203      	movs	r2, #3
 8009088:	4650      	mov	r0, sl
 800908a:	7821      	ldrb	r1, [r4, #0]
 800908c:	f7fc fe75 	bl	8005d7a <memchr>
 8009090:	b138      	cbz	r0, 80090a2 <_vfiprintf_r+0x176>
 8009092:	2240      	movs	r2, #64	@ 0x40
 8009094:	9b04      	ldr	r3, [sp, #16]
 8009096:	eba0 000a 	sub.w	r0, r0, sl
 800909a:	4082      	lsls	r2, r0
 800909c:	4313      	orrs	r3, r2
 800909e:	3401      	adds	r4, #1
 80090a0:	9304      	str	r3, [sp, #16]
 80090a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a6:	2206      	movs	r2, #6
 80090a8:	4829      	ldr	r0, [pc, #164]	@ (8009150 <_vfiprintf_r+0x224>)
 80090aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090ae:	f7fc fe64 	bl	8005d7a <memchr>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d03f      	beq.n	8009136 <_vfiprintf_r+0x20a>
 80090b6:	4b27      	ldr	r3, [pc, #156]	@ (8009154 <_vfiprintf_r+0x228>)
 80090b8:	bb1b      	cbnz	r3, 8009102 <_vfiprintf_r+0x1d6>
 80090ba:	9b03      	ldr	r3, [sp, #12]
 80090bc:	3307      	adds	r3, #7
 80090be:	f023 0307 	bic.w	r3, r3, #7
 80090c2:	3308      	adds	r3, #8
 80090c4:	9303      	str	r3, [sp, #12]
 80090c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c8:	443b      	add	r3, r7
 80090ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80090cc:	e76a      	b.n	8008fa4 <_vfiprintf_r+0x78>
 80090ce:	460c      	mov	r4, r1
 80090d0:	2001      	movs	r0, #1
 80090d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80090d6:	e7a8      	b.n	800902a <_vfiprintf_r+0xfe>
 80090d8:	2300      	movs	r3, #0
 80090da:	f04f 0c0a 	mov.w	ip, #10
 80090de:	4619      	mov	r1, r3
 80090e0:	3401      	adds	r4, #1
 80090e2:	9305      	str	r3, [sp, #20]
 80090e4:	4620      	mov	r0, r4
 80090e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ea:	3a30      	subs	r2, #48	@ 0x30
 80090ec:	2a09      	cmp	r2, #9
 80090ee:	d903      	bls.n	80090f8 <_vfiprintf_r+0x1cc>
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d0c6      	beq.n	8009082 <_vfiprintf_r+0x156>
 80090f4:	9105      	str	r1, [sp, #20]
 80090f6:	e7c4      	b.n	8009082 <_vfiprintf_r+0x156>
 80090f8:	4604      	mov	r4, r0
 80090fa:	2301      	movs	r3, #1
 80090fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009100:	e7f0      	b.n	80090e4 <_vfiprintf_r+0x1b8>
 8009102:	ab03      	add	r3, sp, #12
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	462a      	mov	r2, r5
 8009108:	4630      	mov	r0, r6
 800910a:	4b13      	ldr	r3, [pc, #76]	@ (8009158 <_vfiprintf_r+0x22c>)
 800910c:	a904      	add	r1, sp, #16
 800910e:	f7fb fec7 	bl	8004ea0 <_printf_float>
 8009112:	4607      	mov	r7, r0
 8009114:	1c78      	adds	r0, r7, #1
 8009116:	d1d6      	bne.n	80090c6 <_vfiprintf_r+0x19a>
 8009118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800911a:	07d9      	lsls	r1, r3, #31
 800911c:	d405      	bmi.n	800912a <_vfiprintf_r+0x1fe>
 800911e:	89ab      	ldrh	r3, [r5, #12]
 8009120:	059a      	lsls	r2, r3, #22
 8009122:	d402      	bmi.n	800912a <_vfiprintf_r+0x1fe>
 8009124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009126:	f7fc fe27 	bl	8005d78 <__retarget_lock_release_recursive>
 800912a:	89ab      	ldrh	r3, [r5, #12]
 800912c:	065b      	lsls	r3, r3, #25
 800912e:	f53f af1f 	bmi.w	8008f70 <_vfiprintf_r+0x44>
 8009132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009134:	e71e      	b.n	8008f74 <_vfiprintf_r+0x48>
 8009136:	ab03      	add	r3, sp, #12
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	462a      	mov	r2, r5
 800913c:	4630      	mov	r0, r6
 800913e:	4b06      	ldr	r3, [pc, #24]	@ (8009158 <_vfiprintf_r+0x22c>)
 8009140:	a904      	add	r1, sp, #16
 8009142:	f7fc f94b 	bl	80053dc <_printf_i>
 8009146:	e7e4      	b.n	8009112 <_vfiprintf_r+0x1e6>
 8009148:	08009583 	.word	0x08009583
 800914c:	08009589 	.word	0x08009589
 8009150:	0800958d 	.word	0x0800958d
 8009154:	08004ea1 	.word	0x08004ea1
 8009158:	08008f09 	.word	0x08008f09

0800915c <__swbuf_r>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	460e      	mov	r6, r1
 8009160:	4614      	mov	r4, r2
 8009162:	4605      	mov	r5, r0
 8009164:	b118      	cbz	r0, 800916e <__swbuf_r+0x12>
 8009166:	6a03      	ldr	r3, [r0, #32]
 8009168:	b90b      	cbnz	r3, 800916e <__swbuf_r+0x12>
 800916a:	f7fc fceb 	bl	8005b44 <__sinit>
 800916e:	69a3      	ldr	r3, [r4, #24]
 8009170:	60a3      	str	r3, [r4, #8]
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	071a      	lsls	r2, r3, #28
 8009176:	d501      	bpl.n	800917c <__swbuf_r+0x20>
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	b943      	cbnz	r3, 800918e <__swbuf_r+0x32>
 800917c:	4621      	mov	r1, r4
 800917e:	4628      	mov	r0, r5
 8009180:	f000 f82a 	bl	80091d8 <__swsetup_r>
 8009184:	b118      	cbz	r0, 800918e <__swbuf_r+0x32>
 8009186:	f04f 37ff 	mov.w	r7, #4294967295
 800918a:	4638      	mov	r0, r7
 800918c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	6922      	ldr	r2, [r4, #16]
 8009192:	b2f6      	uxtb	r6, r6
 8009194:	1a98      	subs	r0, r3, r2
 8009196:	6963      	ldr	r3, [r4, #20]
 8009198:	4637      	mov	r7, r6
 800919a:	4283      	cmp	r3, r0
 800919c:	dc05      	bgt.n	80091aa <__swbuf_r+0x4e>
 800919e:	4621      	mov	r1, r4
 80091a0:	4628      	mov	r0, r5
 80091a2:	f7ff fa4b 	bl	800863c <_fflush_r>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	d1ed      	bne.n	8009186 <__swbuf_r+0x2a>
 80091aa:	68a3      	ldr	r3, [r4, #8]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	60a3      	str	r3, [r4, #8]
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	6022      	str	r2, [r4, #0]
 80091b6:	701e      	strb	r6, [r3, #0]
 80091b8:	6962      	ldr	r2, [r4, #20]
 80091ba:	1c43      	adds	r3, r0, #1
 80091bc:	429a      	cmp	r2, r3
 80091be:	d004      	beq.n	80091ca <__swbuf_r+0x6e>
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	07db      	lsls	r3, r3, #31
 80091c4:	d5e1      	bpl.n	800918a <__swbuf_r+0x2e>
 80091c6:	2e0a      	cmp	r6, #10
 80091c8:	d1df      	bne.n	800918a <__swbuf_r+0x2e>
 80091ca:	4621      	mov	r1, r4
 80091cc:	4628      	mov	r0, r5
 80091ce:	f7ff fa35 	bl	800863c <_fflush_r>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d0d9      	beq.n	800918a <__swbuf_r+0x2e>
 80091d6:	e7d6      	b.n	8009186 <__swbuf_r+0x2a>

080091d8 <__swsetup_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4b29      	ldr	r3, [pc, #164]	@ (8009280 <__swsetup_r+0xa8>)
 80091dc:	4605      	mov	r5, r0
 80091de:	6818      	ldr	r0, [r3, #0]
 80091e0:	460c      	mov	r4, r1
 80091e2:	b118      	cbz	r0, 80091ec <__swsetup_r+0x14>
 80091e4:	6a03      	ldr	r3, [r0, #32]
 80091e6:	b90b      	cbnz	r3, 80091ec <__swsetup_r+0x14>
 80091e8:	f7fc fcac 	bl	8005b44 <__sinit>
 80091ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f0:	0719      	lsls	r1, r3, #28
 80091f2:	d422      	bmi.n	800923a <__swsetup_r+0x62>
 80091f4:	06da      	lsls	r2, r3, #27
 80091f6:	d407      	bmi.n	8009208 <__swsetup_r+0x30>
 80091f8:	2209      	movs	r2, #9
 80091fa:	602a      	str	r2, [r5, #0]
 80091fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009200:	f04f 30ff 	mov.w	r0, #4294967295
 8009204:	81a3      	strh	r3, [r4, #12]
 8009206:	e033      	b.n	8009270 <__swsetup_r+0x98>
 8009208:	0758      	lsls	r0, r3, #29
 800920a:	d512      	bpl.n	8009232 <__swsetup_r+0x5a>
 800920c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800920e:	b141      	cbz	r1, 8009222 <__swsetup_r+0x4a>
 8009210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009214:	4299      	cmp	r1, r3
 8009216:	d002      	beq.n	800921e <__swsetup_r+0x46>
 8009218:	4628      	mov	r0, r5
 800921a:	f7fd fc1d 	bl	8006a58 <_free_r>
 800921e:	2300      	movs	r3, #0
 8009220:	6363      	str	r3, [r4, #52]	@ 0x34
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009228:	81a3      	strh	r3, [r4, #12]
 800922a:	2300      	movs	r3, #0
 800922c:	6063      	str	r3, [r4, #4]
 800922e:	6923      	ldr	r3, [r4, #16]
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	f043 0308 	orr.w	r3, r3, #8
 8009238:	81a3      	strh	r3, [r4, #12]
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	b94b      	cbnz	r3, 8009252 <__swsetup_r+0x7a>
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009248:	d003      	beq.n	8009252 <__swsetup_r+0x7a>
 800924a:	4621      	mov	r1, r4
 800924c:	4628      	mov	r0, r5
 800924e:	f000 f882 	bl	8009356 <__smakebuf_r>
 8009252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009256:	f013 0201 	ands.w	r2, r3, #1
 800925a:	d00a      	beq.n	8009272 <__swsetup_r+0x9a>
 800925c:	2200      	movs	r2, #0
 800925e:	60a2      	str	r2, [r4, #8]
 8009260:	6962      	ldr	r2, [r4, #20]
 8009262:	4252      	negs	r2, r2
 8009264:	61a2      	str	r2, [r4, #24]
 8009266:	6922      	ldr	r2, [r4, #16]
 8009268:	b942      	cbnz	r2, 800927c <__swsetup_r+0xa4>
 800926a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800926e:	d1c5      	bne.n	80091fc <__swsetup_r+0x24>
 8009270:	bd38      	pop	{r3, r4, r5, pc}
 8009272:	0799      	lsls	r1, r3, #30
 8009274:	bf58      	it	pl
 8009276:	6962      	ldrpl	r2, [r4, #20]
 8009278:	60a2      	str	r2, [r4, #8]
 800927a:	e7f4      	b.n	8009266 <__swsetup_r+0x8e>
 800927c:	2000      	movs	r0, #0
 800927e:	e7f7      	b.n	8009270 <__swsetup_r+0x98>
 8009280:	20000018 	.word	0x20000018

08009284 <_raise_r>:
 8009284:	291f      	cmp	r1, #31
 8009286:	b538      	push	{r3, r4, r5, lr}
 8009288:	4605      	mov	r5, r0
 800928a:	460c      	mov	r4, r1
 800928c:	d904      	bls.n	8009298 <_raise_r+0x14>
 800928e:	2316      	movs	r3, #22
 8009290:	6003      	str	r3, [r0, #0]
 8009292:	f04f 30ff 	mov.w	r0, #4294967295
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800929a:	b112      	cbz	r2, 80092a2 <_raise_r+0x1e>
 800929c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092a0:	b94b      	cbnz	r3, 80092b6 <_raise_r+0x32>
 80092a2:	4628      	mov	r0, r5
 80092a4:	f000 f830 	bl	8009308 <_getpid_r>
 80092a8:	4622      	mov	r2, r4
 80092aa:	4601      	mov	r1, r0
 80092ac:	4628      	mov	r0, r5
 80092ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092b2:	f000 b817 	b.w	80092e4 <_kill_r>
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d00a      	beq.n	80092d0 <_raise_r+0x4c>
 80092ba:	1c59      	adds	r1, r3, #1
 80092bc:	d103      	bne.n	80092c6 <_raise_r+0x42>
 80092be:	2316      	movs	r3, #22
 80092c0:	6003      	str	r3, [r0, #0]
 80092c2:	2001      	movs	r0, #1
 80092c4:	e7e7      	b.n	8009296 <_raise_r+0x12>
 80092c6:	2100      	movs	r1, #0
 80092c8:	4620      	mov	r0, r4
 80092ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80092ce:	4798      	blx	r3
 80092d0:	2000      	movs	r0, #0
 80092d2:	e7e0      	b.n	8009296 <_raise_r+0x12>

080092d4 <raise>:
 80092d4:	4b02      	ldr	r3, [pc, #8]	@ (80092e0 <raise+0xc>)
 80092d6:	4601      	mov	r1, r0
 80092d8:	6818      	ldr	r0, [r3, #0]
 80092da:	f7ff bfd3 	b.w	8009284 <_raise_r>
 80092de:	bf00      	nop
 80092e0:	20000018 	.word	0x20000018

080092e4 <_kill_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	2300      	movs	r3, #0
 80092e8:	4d06      	ldr	r5, [pc, #24]	@ (8009304 <_kill_r+0x20>)
 80092ea:	4604      	mov	r4, r0
 80092ec:	4608      	mov	r0, r1
 80092ee:	4611      	mov	r1, r2
 80092f0:	602b      	str	r3, [r5, #0]
 80092f2:	f7f8 ff66 	bl	80021c2 <_kill>
 80092f6:	1c43      	adds	r3, r0, #1
 80092f8:	d102      	bne.n	8009300 <_kill_r+0x1c>
 80092fa:	682b      	ldr	r3, [r5, #0]
 80092fc:	b103      	cbz	r3, 8009300 <_kill_r+0x1c>
 80092fe:	6023      	str	r3, [r4, #0]
 8009300:	bd38      	pop	{r3, r4, r5, pc}
 8009302:	bf00      	nop
 8009304:	200005e4 	.word	0x200005e4

08009308 <_getpid_r>:
 8009308:	f7f8 bf54 	b.w	80021b4 <_getpid>

0800930c <__swhatbuf_r>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	460c      	mov	r4, r1
 8009310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009314:	4615      	mov	r5, r2
 8009316:	2900      	cmp	r1, #0
 8009318:	461e      	mov	r6, r3
 800931a:	b096      	sub	sp, #88	@ 0x58
 800931c:	da0c      	bge.n	8009338 <__swhatbuf_r+0x2c>
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	2100      	movs	r1, #0
 8009322:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009326:	bf14      	ite	ne
 8009328:	2340      	movne	r3, #64	@ 0x40
 800932a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800932e:	2000      	movs	r0, #0
 8009330:	6031      	str	r1, [r6, #0]
 8009332:	602b      	str	r3, [r5, #0]
 8009334:	b016      	add	sp, #88	@ 0x58
 8009336:	bd70      	pop	{r4, r5, r6, pc}
 8009338:	466a      	mov	r2, sp
 800933a:	f000 f849 	bl	80093d0 <_fstat_r>
 800933e:	2800      	cmp	r0, #0
 8009340:	dbed      	blt.n	800931e <__swhatbuf_r+0x12>
 8009342:	9901      	ldr	r1, [sp, #4]
 8009344:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009348:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800934c:	4259      	negs	r1, r3
 800934e:	4159      	adcs	r1, r3
 8009350:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009354:	e7eb      	b.n	800932e <__swhatbuf_r+0x22>

08009356 <__smakebuf_r>:
 8009356:	898b      	ldrh	r3, [r1, #12]
 8009358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800935a:	079d      	lsls	r5, r3, #30
 800935c:	4606      	mov	r6, r0
 800935e:	460c      	mov	r4, r1
 8009360:	d507      	bpl.n	8009372 <__smakebuf_r+0x1c>
 8009362:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009366:	6023      	str	r3, [r4, #0]
 8009368:	6123      	str	r3, [r4, #16]
 800936a:	2301      	movs	r3, #1
 800936c:	6163      	str	r3, [r4, #20]
 800936e:	b003      	add	sp, #12
 8009370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009372:	466a      	mov	r2, sp
 8009374:	ab01      	add	r3, sp, #4
 8009376:	f7ff ffc9 	bl	800930c <__swhatbuf_r>
 800937a:	9f00      	ldr	r7, [sp, #0]
 800937c:	4605      	mov	r5, r0
 800937e:	4639      	mov	r1, r7
 8009380:	4630      	mov	r0, r6
 8009382:	f7fd fbdb 	bl	8006b3c <_malloc_r>
 8009386:	b948      	cbnz	r0, 800939c <__smakebuf_r+0x46>
 8009388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800938c:	059a      	lsls	r2, r3, #22
 800938e:	d4ee      	bmi.n	800936e <__smakebuf_r+0x18>
 8009390:	f023 0303 	bic.w	r3, r3, #3
 8009394:	f043 0302 	orr.w	r3, r3, #2
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	e7e2      	b.n	8009362 <__smakebuf_r+0xc>
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093a6:	81a3      	strh	r3, [r4, #12]
 80093a8:	9b01      	ldr	r3, [sp, #4]
 80093aa:	6020      	str	r0, [r4, #0]
 80093ac:	b15b      	cbz	r3, 80093c6 <__smakebuf_r+0x70>
 80093ae:	4630      	mov	r0, r6
 80093b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093b4:	f000 f81e 	bl	80093f4 <_isatty_r>
 80093b8:	b128      	cbz	r0, 80093c6 <__smakebuf_r+0x70>
 80093ba:	89a3      	ldrh	r3, [r4, #12]
 80093bc:	f023 0303 	bic.w	r3, r3, #3
 80093c0:	f043 0301 	orr.w	r3, r3, #1
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	431d      	orrs	r5, r3
 80093ca:	81a5      	strh	r5, [r4, #12]
 80093cc:	e7cf      	b.n	800936e <__smakebuf_r+0x18>
	...

080093d0 <_fstat_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	2300      	movs	r3, #0
 80093d4:	4d06      	ldr	r5, [pc, #24]	@ (80093f0 <_fstat_r+0x20>)
 80093d6:	4604      	mov	r4, r0
 80093d8:	4608      	mov	r0, r1
 80093da:	4611      	mov	r1, r2
 80093dc:	602b      	str	r3, [r5, #0]
 80093de:	f7f8 ff4f 	bl	8002280 <_fstat>
 80093e2:	1c43      	adds	r3, r0, #1
 80093e4:	d102      	bne.n	80093ec <_fstat_r+0x1c>
 80093e6:	682b      	ldr	r3, [r5, #0]
 80093e8:	b103      	cbz	r3, 80093ec <_fstat_r+0x1c>
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	bd38      	pop	{r3, r4, r5, pc}
 80093ee:	bf00      	nop
 80093f0:	200005e4 	.word	0x200005e4

080093f4 <_isatty_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	2300      	movs	r3, #0
 80093f8:	4d05      	ldr	r5, [pc, #20]	@ (8009410 <_isatty_r+0x1c>)
 80093fa:	4604      	mov	r4, r0
 80093fc:	4608      	mov	r0, r1
 80093fe:	602b      	str	r3, [r5, #0]
 8009400:	f7f8 ff4d 	bl	800229e <_isatty>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_isatty_r+0x1a>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_isatty_r+0x1a>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	200005e4 	.word	0x200005e4

08009414 <_init>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	bf00      	nop
 8009418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941a:	bc08      	pop	{r3}
 800941c:	469e      	mov	lr, r3
 800941e:	4770      	bx	lr

08009420 <_fini>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr
